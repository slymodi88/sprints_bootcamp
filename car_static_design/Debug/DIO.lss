
DIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003fca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00003fca  0000405e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000052  00800076  00800076  00004074  2**0
                  ALLOC
  3 .stab         00003d14  00000000  00000000  00004074  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001e6d  00000000  00000000  00007d88  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00009bf5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00009d35  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00009ea5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000baee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000c9d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000d788  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000d8e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000db75  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e343  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 ca 10 	jmp	0x2194	; 0x2194 <__vector_1>
       8:	0c 94 fd 10 	jmp	0x21fa	; 0x21fa <__vector_2>
       c:	0c 94 30 11 	jmp	0x2260	; 0x2260 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 09 06 	jmp	0xc12	; 0xc12 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 d6 05 	jmp	0xbac	; 0xbac <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ec       	ldi	r30, 0xCA	; 202
      68:	ff e3       	ldi	r31, 0x3F	; 63
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 3c       	cpi	r26, 0xC8	; 200
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f0 1b 	call	0x37e0	; 0x37e0 <main>
      8a:	0c 94 e3 1f 	jmp	0x3fc6	; 0x3fc6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 02 1d 	jmp	0x3a04	; 0x3a04 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e6       	ldi	r26, 0x6D	; 109
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1e 1d 	jmp	0x3a3c	; 0x3a3c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0e 1d 	jmp	0x3a1c	; 0x3a1c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2a 1d 	jmp	0x3a54	; 0x3a54 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0e 1d 	jmp	0x3a1c	; 0x3a1c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2a 1d 	jmp	0x3a54	; 0x3a54 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 02 1d 	jmp	0x3a04	; 0x3a04 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d e6       	ldi	r24, 0x6D	; 109
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1e 1d 	jmp	0x3a3c	; 0x3a3c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0e 1d 	jmp	0x3a1c	; 0x3a1c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 2a 1d 	jmp	0x3a54	; 0x3a54 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 0e 1d 	jmp	0x3a1c	; 0x3a1c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 2a 1d 	jmp	0x3a54	; 0x3a54 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 0e 1d 	jmp	0x3a1c	; 0x3a1c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 2a 1d 	jmp	0x3a54	; 0x3a54 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 12 1d 	jmp	0x3a24	; 0x3a24 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 2e 1d 	jmp	0x3a5c	; 0x3a5c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <__vector_11>:
/************************************************************************/
/*		                		TIMER ISR                  		        */
/************************************************************************/

ISR(TIMER0_OVF_vect)
{
     b46:	1f 92       	push	r1
     b48:	0f 92       	push	r0
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	0f 92       	push	r0
     b4e:	11 24       	eor	r1, r1
     b50:	2f 93       	push	r18
     b52:	3f 93       	push	r19
     b54:	4f 93       	push	r20
     b56:	5f 93       	push	r21
     b58:	6f 93       	push	r22
     b5a:	7f 93       	push	r23
     b5c:	8f 93       	push	r24
     b5e:	9f 93       	push	r25
     b60:	af 93       	push	r26
     b62:	bf 93       	push	r27
     b64:	ef 93       	push	r30
     b66:	ff 93       	push	r31
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62

	if(	TimersOverflow_CBF[TIMER_CH0] != NULL)
     b70:	80 91 79 00 	lds	r24, 0x0079
     b74:	90 91 7a 00 	lds	r25, 0x007A
     b78:	00 97       	sbiw	r24, 0x00	; 0
     b7a:	29 f0       	breq	.+10     	; 0xb86 <__vector_11+0x40>
	{
		TimersOverflow_CBF[TIMER_CH0]();
     b7c:	e0 91 79 00 	lds	r30, 0x0079
     b80:	f0 91 7a 00 	lds	r31, 0x007A
     b84:	09 95       	icall

	}
}
     b86:	cf 91       	pop	r28
     b88:	df 91       	pop	r29
     b8a:	ff 91       	pop	r31
     b8c:	ef 91       	pop	r30
     b8e:	bf 91       	pop	r27
     b90:	af 91       	pop	r26
     b92:	9f 91       	pop	r25
     b94:	8f 91       	pop	r24
     b96:	7f 91       	pop	r23
     b98:	6f 91       	pop	r22
     b9a:	5f 91       	pop	r21
     b9c:	4f 91       	pop	r20
     b9e:	3f 91       	pop	r19
     ba0:	2f 91       	pop	r18
     ba2:	0f 90       	pop	r0
     ba4:	0f be       	out	0x3f, r0	; 63
     ba6:	0f 90       	pop	r0
     ba8:	1f 90       	pop	r1
     baa:	18 95       	reti

00000bac <__vector_9>:
ISR(TIMER1_OVF_vect)
{
     bac:	1f 92       	push	r1
     bae:	0f 92       	push	r0
     bb0:	0f b6       	in	r0, 0x3f	; 63
     bb2:	0f 92       	push	r0
     bb4:	11 24       	eor	r1, r1
     bb6:	2f 93       	push	r18
     bb8:	3f 93       	push	r19
     bba:	4f 93       	push	r20
     bbc:	5f 93       	push	r21
     bbe:	6f 93       	push	r22
     bc0:	7f 93       	push	r23
     bc2:	8f 93       	push	r24
     bc4:	9f 93       	push	r25
     bc6:	af 93       	push	r26
     bc8:	bf 93       	push	r27
     bca:	ef 93       	push	r30
     bcc:	ff 93       	push	r31
     bce:	df 93       	push	r29
     bd0:	cf 93       	push	r28
     bd2:	cd b7       	in	r28, 0x3d	; 61
     bd4:	de b7       	in	r29, 0x3e	; 62
	if(	TimersOverflow_CBF[TIMER_CH1] != NULL)
     bd6:	80 91 7b 00 	lds	r24, 0x007B
     bda:	90 91 7c 00 	lds	r25, 0x007C
     bde:	00 97       	sbiw	r24, 0x00	; 0
     be0:	29 f0       	breq	.+10     	; 0xbec <__vector_9+0x40>
	{
		TimersOverflow_CBF[TIMER_CH1]();
     be2:	e0 91 7b 00 	lds	r30, 0x007B
     be6:	f0 91 7c 00 	lds	r31, 0x007C
     bea:	09 95       	icall
	}

}
     bec:	cf 91       	pop	r28
     bee:	df 91       	pop	r29
     bf0:	ff 91       	pop	r31
     bf2:	ef 91       	pop	r30
     bf4:	bf 91       	pop	r27
     bf6:	af 91       	pop	r26
     bf8:	9f 91       	pop	r25
     bfa:	8f 91       	pop	r24
     bfc:	7f 91       	pop	r23
     bfe:	6f 91       	pop	r22
     c00:	5f 91       	pop	r21
     c02:	4f 91       	pop	r20
     c04:	3f 91       	pop	r19
     c06:	2f 91       	pop	r18
     c08:	0f 90       	pop	r0
     c0a:	0f be       	out	0x3f, r0	; 63
     c0c:	0f 90       	pop	r0
     c0e:	1f 90       	pop	r1
     c10:	18 95       	reti

00000c12 <__vector_5>:
ISR(TIMER2_OVF_vect)
{
     c12:	1f 92       	push	r1
     c14:	0f 92       	push	r0
     c16:	0f b6       	in	r0, 0x3f	; 63
     c18:	0f 92       	push	r0
     c1a:	11 24       	eor	r1, r1
     c1c:	2f 93       	push	r18
     c1e:	3f 93       	push	r19
     c20:	4f 93       	push	r20
     c22:	5f 93       	push	r21
     c24:	6f 93       	push	r22
     c26:	7f 93       	push	r23
     c28:	8f 93       	push	r24
     c2a:	9f 93       	push	r25
     c2c:	af 93       	push	r26
     c2e:	bf 93       	push	r27
     c30:	ef 93       	push	r30
     c32:	ff 93       	push	r31
     c34:	df 93       	push	r29
     c36:	cf 93       	push	r28
     c38:	cd b7       	in	r28, 0x3d	; 61
     c3a:	de b7       	in	r29, 0x3e	; 62

	if(	TimersOverflow_CBF[TIMER_CH2] != NULL)
     c3c:	80 91 7d 00 	lds	r24, 0x007D
     c40:	90 91 7e 00 	lds	r25, 0x007E
     c44:	00 97       	sbiw	r24, 0x00	; 0
     c46:	29 f0       	breq	.+10     	; 0xc52 <__vector_5+0x40>
	{
		TimersOverflow_CBF[TIMER_CH2]();
     c48:	e0 91 7d 00 	lds	r30, 0x007D
     c4c:	f0 91 7e 00 	lds	r31, 0x007E
     c50:	09 95       	icall
	}

}
     c52:	cf 91       	pop	r28
     c54:	df 91       	pop	r29
     c56:	ff 91       	pop	r31
     c58:	ef 91       	pop	r30
     c5a:	bf 91       	pop	r27
     c5c:	af 91       	pop	r26
     c5e:	9f 91       	pop	r25
     c60:	8f 91       	pop	r24
     c62:	7f 91       	pop	r23
     c64:	6f 91       	pop	r22
     c66:	5f 91       	pop	r21
     c68:	4f 91       	pop	r20
     c6a:	3f 91       	pop	r19
     c6c:	2f 91       	pop	r18
     c6e:	0f 90       	pop	r0
     c70:	0f be       	out	0x3f, r0	; 63
     c72:	0f 90       	pop	r0
     c74:	1f 90       	pop	r1
     c76:	18 95       	reti

00000c78 <Timer_Init>:
 * In/Out:
 * Return: The error status of the function.
 * Description: Initiates the module.
 *
 */
ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg){
     c78:	df 93       	push	r29
     c7a:	cf 93       	push	r28
     c7c:	cd b7       	in	r28, 0x3d	; 61
     c7e:	de b7       	in	r29, 0x3e	; 62
     c80:	29 97       	sbiw	r28, 0x09	; 9
     c82:	0f b6       	in	r0, 0x3f	; 63
     c84:	f8 94       	cli
     c86:	de bf       	out	0x3e, r29	; 62
     c88:	0f be       	out	0x3f, r0	; 63
     c8a:	cd bf       	out	0x3d, r28	; 61
     c8c:	9a 83       	std	Y+2, r25	; 0x02
     c8e:	89 83       	std	Y+1, r24	; 0x01
	/* check in the parameters of Timer_cfg are in their range or not.*/
	if(Timer_cfg != NULL && gau8_TimerInitialized[Timer_cfg->Timer_CH_NO] == 0  \
     c90:	89 81       	ldd	r24, Y+1	; 0x01
     c92:	9a 81       	ldd	r25, Y+2	; 0x02
     c94:	00 97       	sbiw	r24, 0x00	; 0
     c96:	09 f4       	brne	.+2      	; 0xc9a <Timer_Init+0x22>
     c98:	0a c1       	rjmp	.+532    	; 0xeae <Timer_Init+0x236>
     c9a:	e9 81       	ldd	r30, Y+1	; 0x01
     c9c:	fa 81       	ldd	r31, Y+2	; 0x02
     c9e:	80 81       	ld	r24, Z
     ca0:	88 2f       	mov	r24, r24
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	fc 01       	movw	r30, r24
     ca6:	ea 58       	subi	r30, 0x8A	; 138
     ca8:	ff 4f       	sbci	r31, 0xFF	; 255
     caa:	80 81       	ld	r24, Z
     cac:	88 23       	and	r24, r24
     cae:	09 f0       	breq	.+2      	; 0xcb2 <Timer_Init+0x3a>
     cb0:	fe c0       	rjmp	.+508    	; 0xeae <Timer_Init+0x236>
     cb2:	e9 81       	ldd	r30, Y+1	; 0x01
     cb4:	fa 81       	ldd	r31, Y+2	; 0x02
     cb6:	81 81       	ldd	r24, Z+1	; 0x01
     cb8:	83 30       	cpi	r24, 0x03	; 3
     cba:	08 f0       	brcs	.+2      	; 0xcbe <Timer_Init+0x46>
     cbc:	f8 c0       	rjmp	.+496    	; 0xeae <Timer_Init+0x236>
     cbe:	e9 81       	ldd	r30, Y+1	; 0x01
     cc0:	fa 81       	ldd	r31, Y+2	; 0x02
     cc2:	82 81       	ldd	r24, Z+2	; 0x02
     cc4:	82 30       	cpi	r24, 0x02	; 2
     cc6:	08 f0       	brcs	.+2      	; 0xcca <Timer_Init+0x52>
     cc8:	f2 c0       	rjmp	.+484    	; 0xeae <Timer_Init+0x236>
     cca:	e9 81       	ldd	r30, Y+1	; 0x01
     ccc:	fa 81       	ldd	r31, Y+2	; 0x02
     cce:	83 81       	ldd	r24, Z+3	; 0x03
     cd0:	88 30       	cpi	r24, 0x08	; 8
     cd2:	08 f0       	brcs	.+2      	; 0xcd6 <Timer_Init+0x5e>
     cd4:	ec c0       	rjmp	.+472    	; 0xeae <Timer_Init+0x236>
	    && Timer_cfg->Timer_Mode < MAX_MODES && Timer_cfg->Timer_Polling_Or_Interrupt < 2\
		&& Timer_cfg->Timer_Prescaler <= TIMER_PRESCALER_1024)
	{
		/*Timer0 and Timer 1 have the same value of prescal and counter so work initiate them are similar */
		if(Timer_cfg->Timer_CH_NO == TIMER_CH0 || Timer_cfg->Timer_CH_NO == TIMER_CH1)
     cd6:	e9 81       	ldd	r30, Y+1	; 0x01
     cd8:	fa 81       	ldd	r31, Y+2	; 0x02
     cda:	80 81       	ld	r24, Z
     cdc:	88 23       	and	r24, r24
     cde:	31 f0       	breq	.+12     	; 0xcec <Timer_Init+0x74>
     ce0:	e9 81       	ldd	r30, Y+1	; 0x01
     ce2:	fa 81       	ldd	r31, Y+2	; 0x02
     ce4:	80 81       	ld	r24, Z
     ce6:	81 30       	cpi	r24, 0x01	; 1
     ce8:	09 f0       	breq	.+2      	; 0xcec <Timer_Init+0x74>
     cea:	91 c0       	rjmp	.+290    	; 0xe0e <Timer_Init+0x196>
		{
				if(Timer_cfg->Timer_CH_NO == TIMER_CH0)
     cec:	e9 81       	ldd	r30, Y+1	; 0x01
     cee:	fa 81       	ldd	r31, Y+2	; 0x02
     cf0:	80 81       	ld	r24, Z
     cf2:	88 23       	and	r24, r24
     cf4:	21 f4       	brne	.+8      	; 0xcfe <Timer_Init+0x86>
						 * TCCR0:WGM 1:0 = 0
						 * 		 COM 1:0 = 0
						 * 		 FOC0 = 0
						 * 		 set clk 0 at first. then apply it at start function.
						 * */
					TCCR0 = LOW;
     cf6:	e3 e5       	ldi	r30, 0x53	; 83
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	10 82       	st	Z, r1
     cfc:	04 c0       	rjmp	.+8      	; 0xd06 <Timer_Init+0x8e>
				}
				else
				{
					TCCR1 = LOW;
     cfe:	ee e4       	ldi	r30, 0x4E	; 78
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	11 82       	std	Z+1, r1	; 0x01
     d04:	10 82       	st	Z, r1
				}
				/*
				 * Set the mask if interrupt required */
				if(Timer_cfg->Timer_Polling_Or_Interrupt == TIMER_INTERRUPT_MODE)
     d06:	e9 81       	ldd	r30, Y+1	; 0x01
     d08:	fa 81       	ldd	r31, Y+2	; 0x02
     d0a:	82 81       	ldd	r24, Z+2	; 0x02
     d0c:	81 30       	cpi	r24, 0x01	; 1
     d0e:	c1 f4       	brne	.+48     	; 0xd40 <Timer_Init+0xc8>
				{
					TIMSK |= TOIE(Timer_cfg->Timer_CH_NO);
     d10:	29 e5       	ldi	r18, 0x59	; 89
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	39 87       	std	Y+9, r19	; 0x09
     d16:	28 87       	std	Y+8, r18	; 0x08
     d18:	e9 e5       	ldi	r30, 0x59	; 89
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 81       	ld	r24, Z
     d1e:	8f 83       	std	Y+7, r24	; 0x07
     d20:	e9 81       	ldd	r30, Y+1	; 0x01
     d22:	fa 81       	ldd	r31, Y+2	; 0x02
     d24:	80 81       	ld	r24, Z
     d26:	88 23       	and	r24, r24
     d28:	19 f0       	breq	.+6      	; 0xd30 <Timer_Init+0xb8>
     d2a:	34 e0       	ldi	r19, 0x04	; 4
     d2c:	3e 83       	std	Y+6, r19	; 0x06
     d2e:	02 c0       	rjmp	.+4      	; 0xd34 <Timer_Init+0xbc>
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	8e 83       	std	Y+6, r24	; 0x06
     d34:	8f 81       	ldd	r24, Y+7	; 0x07
     d36:	9e 81       	ldd	r25, Y+6	; 0x06
     d38:	89 2b       	or	r24, r25
     d3a:	e8 85       	ldd	r30, Y+8	; 0x08
     d3c:	f9 85       	ldd	r31, Y+9	; 0x09
     d3e:	80 83       	st	Z, r24
				else
				{

				}

				if(Timer_cfg->Timer_Mode != TIMER_MODE)
     d40:	e9 81       	ldd	r30, Y+1	; 0x01
     d42:	fa 81       	ldd	r31, Y+2	; 0x02
     d44:	81 81       	ldd	r24, Z+1	; 0x01
     d46:	88 23       	and	r24, r24
     d48:	b9 f0       	breq	.+46     	; 0xd78 <Timer_Init+0x100>
				{
					if(Timer_cfg->Timer_Prescaler != TIMER_PRESCALER_NO)
     d4a:	e9 81       	ldd	r30, Y+1	; 0x01
     d4c:	fa 81       	ldd	r31, Y+2	; 0x02
     d4e:	83 81       	ldd	r24, Z+3	; 0x03
     d50:	81 30       	cpi	r24, 0x01	; 1
     d52:	19 f0       	breq	.+6      	; 0xd5a <Timer_Init+0xe2>
					{
						/* there is no prescaler applicable on counter modes*/
						return E_NOK;
     d54:	f1 e0       	ldi	r31, 0x01	; 1
     d56:	fd 83       	std	Y+5, r31	; 0x05
     d58:	ac c0       	rjmp	.+344    	; 0xeb2 <Timer_Init+0x23a>
					else
					{
						/* at falling edge need -> 110 = 6  8 - #define of falling
						 * at Rising edge need 	-> 111 = 7  8 - #define of rising
						 * */
						gau8_CounterType[Timer_cfg->Timer_CH_NO] = COUNTER_OFFSET - Timer_cfg->Timer_Mode;
     d5a:	e9 81       	ldd	r30, Y+1	; 0x01
     d5c:	fa 81       	ldd	r31, Y+2	; 0x02
     d5e:	80 81       	ld	r24, Z
     d60:	28 2f       	mov	r18, r24
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	e9 81       	ldd	r30, Y+1	; 0x01
     d66:	fa 81       	ldd	r31, Y+2	; 0x02
     d68:	91 81       	ldd	r25, Z+1	; 0x01
     d6a:	88 e0       	ldi	r24, 0x08	; 8
     d6c:	89 1b       	sub	r24, r25
     d6e:	f9 01       	movw	r30, r18
     d70:	ee 57       	subi	r30, 0x7E	; 126
     d72:	ff 4f       	sbci	r31, 0xFF	; 255
     d74:	80 83       	st	Z, r24
     d76:	7d c0       	rjmp	.+250    	; 0xe72 <Timer_Init+0x1fa>
				else
				{
					/*for Timer mode at timer 0:1 there is no 32 or 128 precaler. So map the coming value and set it at
					 * global variable to use at start function.
					 * */
					switch(Timer_cfg->Timer_Prescaler){
     d78:	e9 81       	ldd	r30, Y+1	; 0x01
     d7a:	fa 81       	ldd	r31, Y+2	; 0x02
     d7c:	83 81       	ldd	r24, Z+3	; 0x03
     d7e:	28 2f       	mov	r18, r24
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	3c 83       	std	Y+4, r19	; 0x04
     d84:	2b 83       	std	Y+3, r18	; 0x03
     d86:	8b 81       	ldd	r24, Y+3	; 0x03
     d88:	9c 81       	ldd	r25, Y+4	; 0x04
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	91 05       	cpc	r25, r1
     d8e:	01 f1       	breq	.+64     	; 0xdd0 <Timer_Init+0x158>
     d90:	eb 81       	ldd	r30, Y+3	; 0x03
     d92:	fc 81       	ldd	r31, Y+4	; 0x04
     d94:	e5 30       	cpi	r30, 0x05	; 5
     d96:	f1 05       	cpc	r31, r1
     d98:	3c f4       	brge	.+14     	; 0xda8 <Timer_Init+0x130>
     d9a:	8b 81       	ldd	r24, Y+3	; 0x03
     d9c:	9c 81       	ldd	r25, Y+4	; 0x04
     d9e:	01 97       	sbiw	r24, 0x01	; 1
     da0:	82 30       	cpi	r24, 0x02	; 2
     da2:	91 05       	cpc	r25, r1
     da4:	88 f5       	brcc	.+98     	; 0xe08 <Timer_Init+0x190>
     da6:	07 c0       	rjmp	.+14     	; 0xdb6 <Timer_Init+0x13e>
     da8:	8b 81       	ldd	r24, Y+3	; 0x03
     daa:	9c 81       	ldd	r25, Y+4	; 0x04
     dac:	06 97       	sbiw	r24, 0x06	; 6
     dae:	82 30       	cpi	r24, 0x02	; 2
     db0:	91 05       	cpc	r25, r1
     db2:	50 f5       	brcc	.+84     	; 0xe08 <Timer_Init+0x190>
     db4:	1b c0       	rjmp	.+54     	; 0xdec <Timer_Init+0x174>
						case TIMER_PRESCALER_NO:
						case TIMER_PRESCALER_8:
							gau8_TimerPreScaler[Timer_cfg->Timer_CH_NO] = Timer_cfg->Timer_Prescaler;
     db6:	e9 81       	ldd	r30, Y+1	; 0x01
     db8:	fa 81       	ldd	r31, Y+2	; 0x02
     dba:	80 81       	ld	r24, Z
     dbc:	88 2f       	mov	r24, r24
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	e9 81       	ldd	r30, Y+1	; 0x01
     dc2:	fa 81       	ldd	r31, Y+2	; 0x02
     dc4:	23 81       	ldd	r18, Z+3	; 0x03
     dc6:	fc 01       	movw	r30, r24
     dc8:	e1 58       	subi	r30, 0x81	; 129
     dca:	ff 4f       	sbci	r31, 0xFF	; 255
     dcc:	20 83       	st	Z, r18
     dce:	51 c0       	rjmp	.+162    	; 0xe72 <Timer_Init+0x1fa>
							break;
						case TIMER_PRESCALER_64:
							gau8_TimerPreScaler[Timer_cfg->Timer_CH_NO] = Timer_cfg->Timer_Prescaler - 1;
     dd0:	e9 81       	ldd	r30, Y+1	; 0x01
     dd2:	fa 81       	ldd	r31, Y+2	; 0x02
     dd4:	80 81       	ld	r24, Z
     dd6:	28 2f       	mov	r18, r24
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	e9 81       	ldd	r30, Y+1	; 0x01
     ddc:	fa 81       	ldd	r31, Y+2	; 0x02
     dde:	83 81       	ldd	r24, Z+3	; 0x03
     de0:	81 50       	subi	r24, 0x01	; 1
     de2:	f9 01       	movw	r30, r18
     de4:	e1 58       	subi	r30, 0x81	; 129
     de6:	ff 4f       	sbci	r31, 0xFF	; 255
     de8:	80 83       	st	Z, r24
     dea:	43 c0       	rjmp	.+134    	; 0xe72 <Timer_Init+0x1fa>
							break;
						case TIMER_PRESCALER_256:
						case TIMER_PRESCALER_1024:
							gau8_TimerPreScaler[Timer_cfg->Timer_CH_NO] = Timer_cfg->Timer_Prescaler - 2;
     dec:	e9 81       	ldd	r30, Y+1	; 0x01
     dee:	fa 81       	ldd	r31, Y+2	; 0x02
     df0:	80 81       	ld	r24, Z
     df2:	28 2f       	mov	r18, r24
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	e9 81       	ldd	r30, Y+1	; 0x01
     df8:	fa 81       	ldd	r31, Y+2	; 0x02
     dfa:	83 81       	ldd	r24, Z+3	; 0x03
     dfc:	82 50       	subi	r24, 0x02	; 2
     dfe:	f9 01       	movw	r30, r18
     e00:	e1 58       	subi	r30, 0x81	; 129
     e02:	ff 4f       	sbci	r31, 0xFF	; 255
     e04:	80 83       	st	Z, r24
     e06:	35 c0       	rjmp	.+106    	; 0xe72 <Timer_Init+0x1fa>
							break;

						default:
							return E_NOK;
     e08:	f1 e0       	ldi	r31, 0x01	; 1
     e0a:	fd 83       	std	Y+5, r31	; 0x05
     e0c:	52 c0       	rjmp	.+164    	; 0xeb2 <Timer_Init+0x23a>
					}

				}
		}
		/*	Timer 2 Initialization */
		else if(Timer_cfg->Timer_CH_NO == TIMER_CH2)
     e0e:	e9 81       	ldd	r30, Y+1	; 0x01
     e10:	fa 81       	ldd	r31, Y+2	; 0x02
     e12:	80 81       	ld	r24, Z
     e14:	82 30       	cpi	r24, 0x02	; 2
     e16:	51 f5       	brne	.+84     	; 0xe6c <Timer_Init+0x1f4>
					*  TCCR0:WGM2 1:0 = 0
					* 		 COM2 1:0 = 0
					* 		 FOC2 = 0
					* 		 set clk 0 at first. then apply it at start function.
				    */
				TCCR2 = LOW;
     e18:	e5 e4       	ldi	r30, 0x45	; 69
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	10 82       	st	Z, r1
				/*set mask of interrupt if required */
				if(Timer_cfg->Timer_Polling_Or_Interrupt == TIMER_INTERRUPT_MODE){
     e1e:	e9 81       	ldd	r30, Y+1	; 0x01
     e20:	fa 81       	ldd	r31, Y+2	; 0x02
     e22:	82 81       	ldd	r24, Z+2	; 0x02
     e24:	81 30       	cpi	r24, 0x01	; 1
     e26:	39 f4       	brne	.+14     	; 0xe36 <Timer_Init+0x1be>
					SET_BIT(TIMSK, TOIE2);
     e28:	e9 e5       	ldi	r30, 0x59	; 89
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	a9 e5       	ldi	r26, 0x59	; 89
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	8c 91       	ld	r24, X
     e32:	80 83       	st	Z, r24
     e34:	06 c0       	rjmp	.+12     	; 0xe42 <Timer_Init+0x1ca>
				}
				else{
					CLR_BIT(TIMSK, TOIE2);
     e36:	e9 e5       	ldi	r30, 0x59	; 89
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	a9 e5       	ldi	r26, 0x59	; 89
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	8c 91       	ld	r24, X
     e40:	80 83       	st	Z, r24
				}
				if(Timer_cfg->Timer_Mode != TIMER_MODE){
     e42:	e9 81       	ldd	r30, Y+1	; 0x01
     e44:	fa 81       	ldd	r31, Y+2	; 0x02
     e46:	81 81       	ldd	r24, Z+1	; 0x01
     e48:	88 23       	and	r24, r24
     e4a:	19 f0       	breq	.+6      	; 0xe52 <Timer_Init+0x1da>
					/* counter mode not implemented at TIMER 2*/
					return E_NOK;
     e4c:	21 e0       	ldi	r18, 0x01	; 1
     e4e:	2d 83       	std	Y+5, r18	; 0x05
     e50:	30 c0       	rjmp	.+96     	; 0xeb2 <Timer_Init+0x23a>
				}
				else{
					/* assign the value of prescaler to global variable to use it at start function. */
					gau8_TimerPreScaler[Timer_cfg->Timer_CH_NO] = Timer_cfg->Timer_Prescaler;
     e52:	e9 81       	ldd	r30, Y+1	; 0x01
     e54:	fa 81       	ldd	r31, Y+2	; 0x02
     e56:	80 81       	ld	r24, Z
     e58:	88 2f       	mov	r24, r24
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	e9 81       	ldd	r30, Y+1	; 0x01
     e5e:	fa 81       	ldd	r31, Y+2	; 0x02
     e60:	23 81       	ldd	r18, Z+3	; 0x03
     e62:	fc 01       	movw	r30, r24
     e64:	e1 58       	subi	r30, 0x81	; 129
     e66:	ff 4f       	sbci	r31, 0xFF	; 255
     e68:	20 83       	st	Z, r18
     e6a:	03 c0       	rjmp	.+6      	; 0xe72 <Timer_Init+0x1fa>
				}
		}
		else
		{
			/* if timer channel not exist */
			return E_NOK;
     e6c:	31 e0       	ldi	r19, 0x01	; 1
     e6e:	3d 83       	std	Y+5, r19	; 0x05
     e70:	20 c0       	rjmp	.+64     	; 0xeb2 <Timer_Init+0x23a>

	}
	/*
	 * set flag to timer to indicate that it's initialized successfully
	 */
	gau8_TimerInitialized[Timer_cfg->Timer_CH_NO] = 1;
     e72:	e9 81       	ldd	r30, Y+1	; 0x01
     e74:	fa 81       	ldd	r31, Y+2	; 0x02
     e76:	80 81       	ld	r24, Z
     e78:	88 2f       	mov	r24, r24
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	fc 01       	movw	r30, r24
     e7e:	ea 58       	subi	r30, 0x8A	; 138
     e80:	ff 4f       	sbci	r31, 0xFF	; 255
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	80 83       	st	Z, r24
	TimersOverflow_CBF[Timer_cfg->Timer_CH_NO] = Timer_cfg->Timer_Cbk_ptr;
     e86:	e9 81       	ldd	r30, Y+1	; 0x01
     e88:	fa 81       	ldd	r31, Y+2	; 0x02
     e8a:	80 81       	ld	r24, Z
     e8c:	48 2f       	mov	r20, r24
     e8e:	50 e0       	ldi	r21, 0x00	; 0
     e90:	e9 81       	ldd	r30, Y+1	; 0x01
     e92:	fa 81       	ldd	r31, Y+2	; 0x02
     e94:	84 81       	ldd	r24, Z+4	; 0x04
     e96:	95 81       	ldd	r25, Z+5	; 0x05
     e98:	9c 01       	movw	r18, r24
     e9a:	ca 01       	movw	r24, r20
     e9c:	88 0f       	add	r24, r24
     e9e:	99 1f       	adc	r25, r25
     ea0:	fc 01       	movw	r30, r24
     ea2:	e7 58       	subi	r30, 0x87	; 135
     ea4:	ff 4f       	sbci	r31, 0xFF	; 255
     ea6:	31 83       	std	Z+1, r19	; 0x01
     ea8:	20 83       	st	Z, r18
	return E_OK;
     eaa:	1d 82       	std	Y+5, r1	; 0x05
     eac:	02 c0       	rjmp	.+4      	; 0xeb2 <Timer_Init+0x23a>
		}

	}
	else{
		/* if any of initial check are false return error*/
		return E_NOK;
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	8d 83       	std	Y+5, r24	; 0x05
     eb2:	8d 81       	ldd	r24, Y+5	; 0x05
	 * set flag to timer to indicate that it's initialized successfully
	 */
	gau8_TimerInitialized[Timer_cfg->Timer_CH_NO] = 1;
	TimersOverflow_CBF[Timer_cfg->Timer_CH_NO] = Timer_cfg->Timer_Cbk_ptr;
	return E_OK;
}
     eb4:	29 96       	adiw	r28, 0x09	; 9
     eb6:	0f b6       	in	r0, 0x3f	; 63
     eb8:	f8 94       	cli
     eba:	de bf       	out	0x3e, r29	; 62
     ebc:	0f be       	out	0x3f, r0	; 63
     ebe:	cd bf       	out	0x3d, r28	; 61
     ec0:	cf 91       	pop	r28
     ec2:	df 91       	pop	r29
     ec4:	08 95       	ret

00000ec6 <Timer_Start>:
 * In/Out:
 * Return: The error status of the function.
 * Description: This function starts the selected timer.
 *
 */
ERROR_STATUS Timer_Start(uint8 Timer_CH_NO, uint16 Timer_Count){
     ec6:	df 93       	push	r29
     ec8:	cf 93       	push	r28
     eca:	00 d0       	rcall	.+0      	; 0xecc <Timer_Start+0x6>
     ecc:	00 d0       	rcall	.+0      	; 0xece <Timer_Start+0x8>
     ece:	00 d0       	rcall	.+0      	; 0xed0 <Timer_Start+0xa>
     ed0:	cd b7       	in	r28, 0x3d	; 61
     ed2:	de b7       	in	r29, 0x3e	; 62
     ed4:	89 83       	std	Y+1, r24	; 0x01
     ed6:	7b 83       	std	Y+3, r23	; 0x03
     ed8:	6a 83       	std	Y+2, r22	; 0x02
	/*	check if timer is already initialized */
	if(Timer_CH_NO < MAX_CH && gau8_TimerInitialized[Timer_CH_NO] == 1){
     eda:	89 81       	ldd	r24, Y+1	; 0x01
     edc:	83 30       	cpi	r24, 0x03	; 3
     ede:	08 f0       	brcs	.+2      	; 0xee2 <Timer_Start+0x1c>
     ee0:	90 c0       	rjmp	.+288    	; 0x1002 <Timer_Start+0x13c>
     ee2:	89 81       	ldd	r24, Y+1	; 0x01
     ee4:	88 2f       	mov	r24, r24
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	fc 01       	movw	r30, r24
     eea:	ea 58       	subi	r30, 0x8A	; 138
     eec:	ff 4f       	sbci	r31, 0xFF	; 255
     eee:	80 81       	ld	r24, Z
     ef0:	81 30       	cpi	r24, 0x01	; 1
     ef2:	09 f0       	breq	.+2      	; 0xef6 <Timer_Start+0x30>
     ef4:	86 c0       	rjmp	.+268    	; 0x1002 <Timer_Start+0x13c>
		if( ((Timer_CH_NO == TIMER_CH2) || (Timer_CH_NO == TIMER_CH0)) &&  Timer_Count>256 ){
     ef6:	89 81       	ldd	r24, Y+1	; 0x01
     ef8:	82 30       	cpi	r24, 0x02	; 2
     efa:	19 f0       	breq	.+6      	; 0xf02 <Timer_Start+0x3c>
     efc:	89 81       	ldd	r24, Y+1	; 0x01
     efe:	88 23       	and	r24, r24
     f00:	49 f4       	brne	.+18     	; 0xf14 <Timer_Start+0x4e>
     f02:	8a 81       	ldd	r24, Y+2	; 0x02
     f04:	9b 81       	ldd	r25, Y+3	; 0x03
     f06:	21 e0       	ldi	r18, 0x01	; 1
     f08:	81 30       	cpi	r24, 0x01	; 1
     f0a:	92 07       	cpc	r25, r18
     f0c:	18 f0       	brcs	.+6      	; 0xf14 <Timer_Start+0x4e>
			/*check if counts are in range */
			return E_NOK;
     f0e:	31 e0       	ldi	r19, 0x01	; 1
     f10:	3e 83       	std	Y+6, r19	; 0x06
     f12:	79 c0       	rjmp	.+242    	; 0x1006 <Timer_Start+0x140>
		}
		else{
			switch(Timer_CH_NO){
     f14:	89 81       	ldd	r24, Y+1	; 0x01
     f16:	28 2f       	mov	r18, r24
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	3d 83       	std	Y+5, r19	; 0x05
     f1c:	2c 83       	std	Y+4, r18	; 0x04
     f1e:	8c 81       	ldd	r24, Y+4	; 0x04
     f20:	9d 81       	ldd	r25, Y+5	; 0x05
     f22:	81 30       	cpi	r24, 0x01	; 1
     f24:	91 05       	cpc	r25, r1
     f26:	69 f1       	breq	.+90     	; 0xf82 <Timer_Start+0xbc>
     f28:	2c 81       	ldd	r18, Y+4	; 0x04
     f2a:	3d 81       	ldd	r19, Y+5	; 0x05
     f2c:	22 30       	cpi	r18, 0x02	; 2
     f2e:	31 05       	cpc	r19, r1
     f30:	09 f4       	brne	.+2      	; 0xf34 <Timer_Start+0x6e>
     f32:	53 c0       	rjmp	.+166    	; 0xfda <Timer_Start+0x114>
     f34:	8c 81       	ldd	r24, Y+4	; 0x04
     f36:	9d 81       	ldd	r25, Y+5	; 0x05
     f38:	00 97       	sbiw	r24, 0x00	; 0
     f3a:	09 f0       	breq	.+2      	; 0xf3e <Timer_Start+0x78>
     f3c:	5d c0       	rjmp	.+186    	; 0xff8 <Timer_Start+0x132>
			/*for the selected timer load the TCNT wit initial value
			 * set clk to TCCR0 by assigned prescaler.
			 * if counter selected choose if counter up or down*/
				case TIMER_CH0:
					TCNT0 = TIMER_8BITS_OVF - Timer_Count;
     f3e:	e2 e5       	ldi	r30, 0x52	; 82
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	8a 81       	ldd	r24, Y+2	; 0x02
     f44:	80 95       	com	r24
     f46:	80 83       	st	Z, r24
					if(gau8_CounterType[Timer_CH_NO] == 0){
     f48:	89 81       	ldd	r24, Y+1	; 0x01
     f4a:	88 2f       	mov	r24, r24
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	fc 01       	movw	r30, r24
     f50:	ee 57       	subi	r30, 0x7E	; 126
     f52:	ff 4f       	sbci	r31, 0xFF	; 255
     f54:	80 81       	ld	r24, Z
     f56:	88 23       	and	r24, r24
     f58:	51 f4       	brne	.+20     	; 0xf6e <Timer_Start+0xa8>
						TCCR0 |=  gau8_TimerPreScaler[TIMER_CH0];
     f5a:	a3 e5       	ldi	r26, 0x53	; 83
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	e3 e5       	ldi	r30, 0x53	; 83
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	90 81       	ld	r25, Z
     f64:	80 91 7f 00 	lds	r24, 0x007F
     f68:	89 2b       	or	r24, r25
     f6a:	8c 93       	st	X, r24
     f6c:	48 c0       	rjmp	.+144    	; 0xffe <Timer_Start+0x138>
					}
					else
					{
						TCCR0 |=  gau8_CounterType[TIMER_CH0];
     f6e:	a3 e5       	ldi	r26, 0x53	; 83
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	e3 e5       	ldi	r30, 0x53	; 83
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	90 81       	ld	r25, Z
     f78:	80 91 82 00 	lds	r24, 0x0082
     f7c:	89 2b       	or	r24, r25
     f7e:	8c 93       	st	X, r24
     f80:	3e c0       	rjmp	.+124    	; 0xffe <Timer_Start+0x138>
					}
					break;

				case TIMER_CH1:
					TCNT1 = TIMER_16BITS_OVF - Timer_Count;
     f82:	ec e4       	ldi	r30, 0x4C	; 76
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	8a 81       	ldd	r24, Y+2	; 0x02
     f88:	9b 81       	ldd	r25, Y+3	; 0x03
     f8a:	80 95       	com	r24
     f8c:	90 95       	com	r25
     f8e:	91 83       	std	Z+1, r25	; 0x01
     f90:	80 83       	st	Z, r24
					if(gau8_CounterType[TIMER_CH1] == 0){
     f92:	80 91 83 00 	lds	r24, 0x0083
     f96:	88 23       	and	r24, r24
     f98:	81 f4       	brne	.+32     	; 0xfba <Timer_Start+0xf4>
						TCCR1 |=  gau8_TimerPreScaler[TIMER_CH1];
     f9a:	ae e4       	ldi	r26, 0x4E	; 78
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	ee e4       	ldi	r30, 0x4E	; 78
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	20 81       	ld	r18, Z
     fa4:	31 81       	ldd	r19, Z+1	; 0x01
     fa6:	80 91 80 00 	lds	r24, 0x0080
     faa:	88 2f       	mov	r24, r24
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	82 2b       	or	r24, r18
     fb0:	93 2b       	or	r25, r19
     fb2:	11 96       	adiw	r26, 0x01	; 1
     fb4:	9c 93       	st	X, r25
     fb6:	8e 93       	st	-X, r24
     fb8:	22 c0       	rjmp	.+68     	; 0xffe <Timer_Start+0x138>
					}
					else
					{
						TCCR1 |=  gau8_CounterType[TIMER_CH1];
     fba:	ae e4       	ldi	r26, 0x4E	; 78
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	ee e4       	ldi	r30, 0x4E	; 78
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	20 81       	ld	r18, Z
     fc4:	31 81       	ldd	r19, Z+1	; 0x01
     fc6:	80 91 83 00 	lds	r24, 0x0083
     fca:	88 2f       	mov	r24, r24
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	82 2b       	or	r24, r18
     fd0:	93 2b       	or	r25, r19
     fd2:	11 96       	adiw	r26, 0x01	; 1
     fd4:	9c 93       	st	X, r25
     fd6:	8e 93       	st	-X, r24
     fd8:	12 c0       	rjmp	.+36     	; 0xffe <Timer_Start+0x138>
					}
					break;

				case TIMER_CH2:
					TCNT2 = TIMER_8BITS_OVF - Timer_Count;
     fda:	e4 e4       	ldi	r30, 0x44	; 68
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	8a 81       	ldd	r24, Y+2	; 0x02
     fe0:	80 95       	com	r24
     fe2:	80 83       	st	Z, r24
					TCCR2 |=  gau8_TimerPreScaler[TIMER_CH2];
     fe4:	a5 e4       	ldi	r26, 0x45	; 69
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	e5 e4       	ldi	r30, 0x45	; 69
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	90 81       	ld	r25, Z
     fee:	80 91 81 00 	lds	r24, 0x0081
     ff2:	89 2b       	or	r24, r25
     ff4:	8c 93       	st	X, r24
     ff6:	03 c0       	rjmp	.+6      	; 0xffe <Timer_Start+0x138>
					break;

				default:
					/* if channel not exist selected*/
					return E_NOK;
     ff8:	91 e0       	ldi	r25, 0x01	; 1
     ffa:	9e 83       	std	Y+6, r25	; 0x06
     ffc:	04 c0       	rjmp	.+8      	; 0x1006 <Timer_Start+0x140>
	else{
		/* initialization check in */
		return E_NOK;
	}

	return E_OK;
     ffe:	1e 82       	std	Y+6, r1	; 0x06
    1000:	02 c0       	rjmp	.+4      	; 0x1006 <Timer_Start+0x140>
		}

	}
	else{
		/* initialization check in */
		return E_NOK;
    1002:	21 e0       	ldi	r18, 0x01	; 1
    1004:	2e 83       	std	Y+6, r18	; 0x06
    1006:	8e 81       	ldd	r24, Y+6	; 0x06
	}

	return E_OK;
}
    1008:	26 96       	adiw	r28, 0x06	; 6
    100a:	0f b6       	in	r0, 0x3f	; 63
    100c:	f8 94       	cli
    100e:	de bf       	out	0x3e, r29	; 62
    1010:	0f be       	out	0x3f, r0	; 63
    1012:	cd bf       	out	0x3d, r28	; 61
    1014:	cf 91       	pop	r28
    1016:	df 91       	pop	r29
    1018:	08 95       	ret

0000101a <Timer_Stop>:
 * Return: The error status of the function.
 * Description: This function stops the needed timer.
 *
 */
ERROR_STATUS Timer_Stop(uint8 Timer_CH_NO)
{
    101a:	df 93       	push	r29
    101c:	cf 93       	push	r28
    101e:	00 d0       	rcall	.+0      	; 0x1020 <Timer_Stop+0x6>
    1020:	00 d0       	rcall	.+0      	; 0x1022 <Timer_Stop+0x8>
    1022:	cd b7       	in	r28, 0x3d	; 61
    1024:	de b7       	in	r29, 0x3e	; 62
    1026:	89 83       	std	Y+1, r24	; 0x01
	switch(Timer_CH_NO)
    1028:	89 81       	ldd	r24, Y+1	; 0x01
    102a:	28 2f       	mov	r18, r24
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	3c 83       	std	Y+4, r19	; 0x04
    1030:	2b 83       	std	Y+3, r18	; 0x03
    1032:	8b 81       	ldd	r24, Y+3	; 0x03
    1034:	9c 81       	ldd	r25, Y+4	; 0x04
    1036:	81 30       	cpi	r24, 0x01	; 1
    1038:	91 05       	cpc	r25, r1
    103a:	a1 f0       	breq	.+40     	; 0x1064 <Timer_Stop+0x4a>
    103c:	2b 81       	ldd	r18, Y+3	; 0x03
    103e:	3c 81       	ldd	r19, Y+4	; 0x04
    1040:	22 30       	cpi	r18, 0x02	; 2
    1042:	31 05       	cpc	r19, r1
    1044:	f9 f0       	breq	.+62     	; 0x1084 <Timer_Stop+0x6a>
    1046:	8b 81       	ldd	r24, Y+3	; 0x03
    1048:	9c 81       	ldd	r25, Y+4	; 0x04
    104a:	00 97       	sbiw	r24, 0x00	; 0
    104c:	31 f5       	brne	.+76     	; 0x109a <Timer_Stop+0x80>
	{
		case TIMER_CH0:
			TCNT0 = 0;
    104e:	e2 e5       	ldi	r30, 0x52	; 82
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	10 82       	st	Z, r1
			TCCR0 &= STOP_TIMER ;
    1054:	a3 e5       	ldi	r26, 0x53	; 83
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	e3 e5       	ldi	r30, 0x53	; 83
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	88 7f       	andi	r24, 0xF8	; 248
    1060:	8c 93       	st	X, r24
    1062:	1e c0       	rjmp	.+60     	; 0x10a0 <Timer_Stop+0x86>
			break;

		case TIMER_CH1:
			TCNT1 = 0;
    1064:	ec e4       	ldi	r30, 0x4C	; 76
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	11 82       	std	Z+1, r1	; 0x01
    106a:	10 82       	st	Z, r1
			TCCR1 &= STOP_TIMER;
    106c:	ae e4       	ldi	r26, 0x4E	; 78
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	ee e4       	ldi	r30, 0x4E	; 78
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	91 81       	ldd	r25, Z+1	; 0x01
    1078:	88 7f       	andi	r24, 0xF8	; 248
    107a:	90 70       	andi	r25, 0x00	; 0
    107c:	11 96       	adiw	r26, 0x01	; 1
    107e:	9c 93       	st	X, r25
    1080:	8e 93       	st	-X, r24
    1082:	0e c0       	rjmp	.+28     	; 0x10a0 <Timer_Stop+0x86>
			break;

		case TIMER_CH2:
			TCNT2 = 0;
    1084:	e4 e4       	ldi	r30, 0x44	; 68
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	10 82       	st	Z, r1
			TCCR2 &=  STOP_TIMER;
    108a:	a5 e4       	ldi	r26, 0x45	; 69
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e5 e4       	ldi	r30, 0x45	; 69
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	88 7f       	andi	r24, 0xF8	; 248
    1096:	8c 93       	st	X, r24
    1098:	03 c0       	rjmp	.+6      	; 0x10a0 <Timer_Stop+0x86>
			break;

		default:
			return E_NOK;
    109a:	91 e0       	ldi	r25, 0x01	; 1
    109c:	9a 83       	std	Y+2, r25	; 0x02
    109e:	16 c0       	rjmp	.+44     	; 0x10cc <Timer_Stop+0xb2>
	}

	gau8_CounterType[Timer_CH_NO] = 0;
    10a0:	89 81       	ldd	r24, Y+1	; 0x01
    10a2:	88 2f       	mov	r24, r24
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	fc 01       	movw	r30, r24
    10a8:	ee 57       	subi	r30, 0x7E	; 126
    10aa:	ff 4f       	sbci	r31, 0xFF	; 255
    10ac:	10 82       	st	Z, r1
	gau8_TimerInitialized[Timer_CH_NO] = 0;
    10ae:	89 81       	ldd	r24, Y+1	; 0x01
    10b0:	88 2f       	mov	r24, r24
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	fc 01       	movw	r30, r24
    10b6:	ea 58       	subi	r30, 0x8A	; 138
    10b8:	ff 4f       	sbci	r31, 0xFF	; 255
    10ba:	10 82       	st	Z, r1
	gau8_TimerPreScaler[Timer_CH_NO] = 0;
    10bc:	89 81       	ldd	r24, Y+1	; 0x01
    10be:	88 2f       	mov	r24, r24
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	fc 01       	movw	r30, r24
    10c4:	e1 58       	subi	r30, 0x81	; 129
    10c6:	ff 4f       	sbci	r31, 0xFF	; 255
    10c8:	10 82       	st	Z, r1
	return E_OK;
    10ca:	1a 82       	std	Y+2, r1	; 0x02
    10cc:	8a 81       	ldd	r24, Y+2	; 0x02
}
    10ce:	0f 90       	pop	r0
    10d0:	0f 90       	pop	r0
    10d2:	0f 90       	pop	r0
    10d4:	0f 90       	pop	r0
    10d6:	cf 91       	pop	r28
    10d8:	df 91       	pop	r29
    10da:	08 95       	ret

000010dc <Timer_GetStatus>:
 * 	Data: A variable of type bool returns if the flag of the timer is raised or not.
 * In/Out:
 * Return: The error status of the function.
 * Description: This function is used to return if the flag of the timer is raised or not.
 */
ERROR_STATUS Timer_GetStatus(uint8 Timer_CH_NO, bool* Data){
    10dc:	df 93       	push	r29
    10de:	cf 93       	push	r28
    10e0:	cd b7       	in	r28, 0x3d	; 61
    10e2:	de b7       	in	r29, 0x3e	; 62
    10e4:	28 97       	sbiw	r28, 0x08	; 8
    10e6:	0f b6       	in	r0, 0x3f	; 63
    10e8:	f8 94       	cli
    10ea:	de bf       	out	0x3e, r29	; 62
    10ec:	0f be       	out	0x3f, r0	; 63
    10ee:	cd bf       	out	0x3d, r28	; 61
    10f0:	8a 83       	std	Y+2, r24	; 0x02
    10f2:	7c 83       	std	Y+4, r23	; 0x04
    10f4:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * return the value of TOV if set or not
	 * */
	uint8 u8_overflowFlag = 0;
    10f6:	19 82       	std	Y+1, r1	; 0x01
	switch(Timer_CH_NO)
    10f8:	8a 81       	ldd	r24, Y+2	; 0x02
    10fa:	28 2f       	mov	r18, r24
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	38 87       	std	Y+8, r19	; 0x08
    1100:	2f 83       	std	Y+7, r18	; 0x07
    1102:	8f 81       	ldd	r24, Y+7	; 0x07
    1104:	98 85       	ldd	r25, Y+8	; 0x08
    1106:	81 30       	cpi	r24, 0x01	; 1
    1108:	91 05       	cpc	r25, r1
    110a:	c1 f0       	breq	.+48     	; 0x113c <Timer_GetStatus+0x60>
    110c:	2f 81       	ldd	r18, Y+7	; 0x07
    110e:	38 85       	ldd	r19, Y+8	; 0x08
    1110:	22 30       	cpi	r18, 0x02	; 2
    1112:	31 05       	cpc	r19, r1
    1114:	41 f1       	breq	.+80     	; 0x1166 <Timer_GetStatus+0x8a>
    1116:	8f 81       	ldd	r24, Y+7	; 0x07
    1118:	98 85       	ldd	r25, Y+8	; 0x08
    111a:	00 97       	sbiw	r24, 0x00	; 0
    111c:	69 f5       	brne	.+90     	; 0x1178 <Timer_GetStatus+0x9c>
	{
		case TIMER_CH0:
			*Data = GET_BIT(TIFR,TOV0);
    111e:	e8 e5       	ldi	r30, 0x58	; 88
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	88 2f       	mov	r24, r24
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	82 70       	andi	r24, 0x02	; 2
    112a:	90 70       	andi	r25, 0x00	; 0
    112c:	95 95       	asr	r25
    112e:	87 95       	ror	r24
    1130:	eb 81       	ldd	r30, Y+3	; 0x03
    1132:	fc 81       	ldd	r31, Y+4	; 0x04
    1134:	80 83       	st	Z, r24
			u8_overflowFlag = TOV0;
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	89 83       	std	Y+1, r24	; 0x01
    113a:	21 c0       	rjmp	.+66     	; 0x117e <Timer_GetStatus+0xa2>
			break;

		case TIMER_CH1:
			*Data = GET_BIT(TIFR,TOV1);
    113c:	e8 e5       	ldi	r30, 0x58	; 88
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	88 2f       	mov	r24, r24
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	80 71       	andi	r24, 0x10	; 16
    1148:	90 70       	andi	r25, 0x00	; 0
    114a:	95 95       	asr	r25
    114c:	87 95       	ror	r24
    114e:	95 95       	asr	r25
    1150:	87 95       	ror	r24
    1152:	95 95       	asr	r25
    1154:	87 95       	ror	r24
    1156:	95 95       	asr	r25
    1158:	87 95       	ror	r24
    115a:	eb 81       	ldd	r30, Y+3	; 0x03
    115c:	fc 81       	ldd	r31, Y+4	; 0x04
    115e:	80 83       	st	Z, r24
			u8_overflowFlag = TOV1;
    1160:	84 e0       	ldi	r24, 0x04	; 4
    1162:	89 83       	std	Y+1, r24	; 0x01
    1164:	0c c0       	rjmp	.+24     	; 0x117e <Timer_GetStatus+0xa2>
			break;

		case TIMER_CH2:
		    *Data = GET_BIT(TIFR,TOV2);
    1166:	e8 e5       	ldi	r30, 0x58	; 88
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	90 81       	ld	r25, Z
    116c:	eb 81       	ldd	r30, Y+3	; 0x03
    116e:	fc 81       	ldd	r31, Y+4	; 0x04
    1170:	10 82       	st	Z, r1
		    u8_overflowFlag = TOV2;
    1172:	80 e4       	ldi	r24, 0x40	; 64
    1174:	89 83       	std	Y+1, r24	; 0x01
    1176:	03 c0       	rjmp	.+6      	; 0x117e <Timer_GetStatus+0xa2>
		    break;
		default:
			return E_NOK;
    1178:	21 e0       	ldi	r18, 0x01	; 1
    117a:	2d 83       	std	Y+5, r18	; 0x05
    117c:	1a c0       	rjmp	.+52     	; 0x11b2 <Timer_GetStatus+0xd6>
	}
	if(*Data == TRUE)
    117e:	eb 81       	ldd	r30, Y+3	; 0x03
    1180:	fc 81       	ldd	r31, Y+4	; 0x04
    1182:	80 81       	ld	r24, Z
    1184:	81 30       	cpi	r24, 0x01	; 1
    1186:	a1 f4       	brne	.+40     	; 0x11b0 <Timer_GetStatus+0xd4>
	{
		CLR_BIT(TIFR,u8_overflowFlag);
    1188:	a8 e5       	ldi	r26, 0x58	; 88
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	e8 e5       	ldi	r30, 0x58	; 88
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	48 2f       	mov	r20, r24
    1194:	89 81       	ldd	r24, Y+1	; 0x01
    1196:	28 2f       	mov	r18, r24
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	02 2e       	mov	r0, r18
    11a0:	02 c0       	rjmp	.+4      	; 0x11a6 <Timer_GetStatus+0xca>
    11a2:	88 0f       	add	r24, r24
    11a4:	99 1f       	adc	r25, r25
    11a6:	0a 94       	dec	r0
    11a8:	e2 f7       	brpl	.-8      	; 0x11a2 <Timer_GetStatus+0xc6>
    11aa:	80 95       	com	r24
    11ac:	84 23       	and	r24, r20
    11ae:	8c 93       	st	X, r24
	else
	{

	}

	return E_OK;
    11b0:	1d 82       	std	Y+5, r1	; 0x05
    11b2:	8d 81       	ldd	r24, Y+5	; 0x05
}
    11b4:	28 96       	adiw	r28, 0x08	; 8
    11b6:	0f b6       	in	r0, 0x3f	; 63
    11b8:	f8 94       	cli
    11ba:	de bf       	out	0x3e, r29	; 62
    11bc:	0f be       	out	0x3f, r0	; 63
    11be:	cd bf       	out	0x3d, r28	; 61
    11c0:	cf 91       	pop	r28
    11c2:	df 91       	pop	r29
    11c4:	08 95       	ret

000011c6 <Timer_GetValue>:
 * In/Out:
 * Return: The error status of the function.
 * Description: This function is used to return the value of the TCNT REG.
 *
 */
ERROR_STATUS Timer_GetValue(uint8 Timer_CH_NO, uint16* Data){
    11c6:	df 93       	push	r29
    11c8:	cf 93       	push	r28
    11ca:	00 d0       	rcall	.+0      	; 0x11cc <Timer_GetValue+0x6>
    11cc:	00 d0       	rcall	.+0      	; 0x11ce <Timer_GetValue+0x8>
    11ce:	00 d0       	rcall	.+0      	; 0x11d0 <Timer_GetValue+0xa>
    11d0:	cd b7       	in	r28, 0x3d	; 61
    11d2:	de b7       	in	r29, 0x3e	; 62
    11d4:	89 83       	std	Y+1, r24	; 0x01
    11d6:	7b 83       	std	Y+3, r23	; 0x03
    11d8:	6a 83       	std	Y+2, r22	; 0x02
	switch(Timer_CH_NO)
    11da:	89 81       	ldd	r24, Y+1	; 0x01
    11dc:	28 2f       	mov	r18, r24
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	3e 83       	std	Y+6, r19	; 0x06
    11e2:	2d 83       	std	Y+5, r18	; 0x05
    11e4:	8d 81       	ldd	r24, Y+5	; 0x05
    11e6:	9e 81       	ldd	r25, Y+6	; 0x06
    11e8:	81 30       	cpi	r24, 0x01	; 1
    11ea:	91 05       	cpc	r25, r1
    11ec:	99 f0       	breq	.+38     	; 0x1214 <Timer_GetValue+0x4e>
    11ee:	2d 81       	ldd	r18, Y+5	; 0x05
    11f0:	3e 81       	ldd	r19, Y+6	; 0x06
    11f2:	22 30       	cpi	r18, 0x02	; 2
    11f4:	31 05       	cpc	r19, r1
    11f6:	b9 f0       	breq	.+46     	; 0x1226 <Timer_GetValue+0x60>
    11f8:	8d 81       	ldd	r24, Y+5	; 0x05
    11fa:	9e 81       	ldd	r25, Y+6	; 0x06
    11fc:	00 97       	sbiw	r24, 0x00	; 0
    11fe:	e9 f4       	brne	.+58     	; 0x123a <Timer_GetValue+0x74>
		{
			case TIMER_CH0:
				*Data = TCNT0;
    1200:	e2 e5       	ldi	r30, 0x52	; 82
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	88 2f       	mov	r24, r24
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	ea 81       	ldd	r30, Y+2	; 0x02
    120c:	fb 81       	ldd	r31, Y+3	; 0x03
    120e:	91 83       	std	Z+1, r25	; 0x01
    1210:	80 83       	st	Z, r24
    1212:	16 c0       	rjmp	.+44     	; 0x1240 <Timer_GetValue+0x7a>
				break;

			case TIMER_CH1:
				*Data = TCNT1;
    1214:	ec e4       	ldi	r30, 0x4C	; 76
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	91 81       	ldd	r25, Z+1	; 0x01
    121c:	ea 81       	ldd	r30, Y+2	; 0x02
    121e:	fb 81       	ldd	r31, Y+3	; 0x03
    1220:	91 83       	std	Z+1, r25	; 0x01
    1222:	80 83       	st	Z, r24
    1224:	0d c0       	rjmp	.+26     	; 0x1240 <Timer_GetValue+0x7a>
				break;

			case TIMER_CH2:
			    *Data = TCNT2;
    1226:	e4 e4       	ldi	r30, 0x44	; 68
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	88 2f       	mov	r24, r24
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	ea 81       	ldd	r30, Y+2	; 0x02
    1232:	fb 81       	ldd	r31, Y+3	; 0x03
    1234:	91 83       	std	Z+1, r25	; 0x01
    1236:	80 83       	st	Z, r24
    1238:	03 c0       	rjmp	.+6      	; 0x1240 <Timer_GetValue+0x7a>
			    break;
			default:
				return E_NOK;
    123a:	91 e0       	ldi	r25, 0x01	; 1
    123c:	9c 83       	std	Y+4, r25	; 0x04
    123e:	01 c0       	rjmp	.+2      	; 0x1242 <Timer_GetValue+0x7c>
		}

	return E_OK;
    1240:	1c 82       	std	Y+4, r1	; 0x04
    1242:	8c 81       	ldd	r24, Y+4	; 0x04

}
    1244:	26 96       	adiw	r28, 0x06	; 6
    1246:	0f b6       	in	r0, 0x3f	; 63
    1248:	f8 94       	cli
    124a:	de bf       	out	0x3e, r29	; 62
    124c:	0f be       	out	0x3f, r0	; 63
    124e:	cd bf       	out	0x3d, r28	; 61
    1250:	cf 91       	pop	r28
    1252:	df 91       	pop	r29
    1254:	08 95       	ret

00001256 <SPI_Init>:

/* Description : SPI Initialization                                              */
/* Input       : SPI_Cfg_s* "Pointer to Struct of SPI Configration" */
/* Output      : Error Checking                                                  */
ERROR_STATUS SPI_Init(SPI_Cfg_s* pstr_SPI_Confg)
{
    1256:	df 93       	push	r29
    1258:	cf 93       	push	r28
    125a:	cd b7       	in	r28, 0x3d	; 61
    125c:	de b7       	in	r29, 0x3e	; 62
    125e:	2c 97       	sbiw	r28, 0x0c	; 12
    1260:	0f b6       	in	r0, 0x3f	; 63
    1262:	f8 94       	cli
    1264:	de bf       	out	0x3e, r29	; 62
    1266:	0f be       	out	0x3f, r0	; 63
    1268:	cd bf       	out	0x3d, r28	; 61
    126a:	9a 83       	std	Y+2, r25	; 0x02
    126c:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * select SPI MODE MASTER or SLAVE
	 */
	switch (pstr_SPI_Confg->u8_SPIMode)
    126e:	e9 81       	ldd	r30, Y+1	; 0x01
    1270:	fa 81       	ldd	r31, Y+2	; 0x02
    1272:	80 81       	ld	r24, Z
    1274:	28 2f       	mov	r18, r24
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	3c 87       	std	Y+12, r19	; 0x0c
    127a:	2b 87       	std	Y+11, r18	; 0x0b
    127c:	8b 85       	ldd	r24, Y+11	; 0x0b
    127e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1280:	00 97       	sbiw	r24, 0x00	; 0
    1282:	31 f0       	breq	.+12     	; 0x1290 <SPI_Init+0x3a>
    1284:	2b 85       	ldd	r18, Y+11	; 0x0b
    1286:	3c 85       	ldd	r19, Y+12	; 0x0c
    1288:	21 30       	cpi	r18, 0x01	; 1
    128a:	31 05       	cpc	r19, r1
    128c:	61 f1       	breq	.+88     	; 0x12e6 <SPI_Init+0x90>
    128e:	56 c0       	rjmp	.+172    	; 0x133c <SPI_Init+0xe6>
		 * MOSI(PB5) --> Input
		 * MISO(PB6) --> Output
		 * SCK(PB7) --> Input
		 ********************************************/

		CLR_BIT(PORTB_DIR,PB4);
    1290:	a7 e3       	ldi	r26, 0x37	; 55
    1292:	b0 e0       	ldi	r27, 0x00	; 0
    1294:	e7 e3       	ldi	r30, 0x37	; 55
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	8f 7e       	andi	r24, 0xEF	; 239
    129c:	8c 93       	st	X, r24
		CLR_BIT(PORTB_DIR,PB5);
    129e:	a7 e3       	ldi	r26, 0x37	; 55
    12a0:	b0 e0       	ldi	r27, 0x00	; 0
    12a2:	e7 e3       	ldi	r30, 0x37	; 55
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	80 81       	ld	r24, Z
    12a8:	8f 7d       	andi	r24, 0xDF	; 223
    12aa:	8c 93       	st	X, r24
		SET_BIT(PORTB_DIR,PB6);
    12ac:	a7 e3       	ldi	r26, 0x37	; 55
    12ae:	b0 e0       	ldi	r27, 0x00	; 0
    12b0:	e7 e3       	ldi	r30, 0x37	; 55
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
    12b6:	80 64       	ori	r24, 0x40	; 64
    12b8:	8c 93       	st	X, r24
		CLR_BIT(PORTB_DIR,PB7);
    12ba:	a7 e3       	ldi	r26, 0x37	; 55
    12bc:	b0 e0       	ldi	r27, 0x00	; 0
    12be:	e7 e3       	ldi	r30, 0x37	; 55
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	8f 77       	andi	r24, 0x7F	; 127
    12c6:	8c 93       	st	X, r24
		/************ SELECT SLAVE MODE AND ENABLE SPI ************/
		CLR_BIT(SPCR,MSTR);
    12c8:	ad e2       	ldi	r26, 0x2D	; 45
    12ca:	b0 e0       	ldi	r27, 0x00	; 0
    12cc:	ed e2       	ldi	r30, 0x2D	; 45
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	80 81       	ld	r24, Z
    12d2:	8f 7e       	andi	r24, 0xEF	; 239
    12d4:	8c 93       	st	X, r24
		SET_BIT(SPCR,SPE);
    12d6:	ad e2       	ldi	r26, 0x2D	; 45
    12d8:	b0 e0       	ldi	r27, 0x00	; 0
    12da:	ed e2       	ldi	r30, 0x2D	; 45
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	80 64       	ori	r24, 0x40	; 64
    12e2:	8c 93       	st	X, r24
    12e4:	2e c0       	rjmp	.+92     	; 0x1342 <SPI_Init+0xec>
		 * MOSI(PB5) --> Output
		 * MISO(PB6) --> Input
		 * SCK(PB7) --> Output
		 ********************************************/

		SET_BIT(PORTB_DIR,PB4);
    12e6:	a7 e3       	ldi	r26, 0x37	; 55
    12e8:	b0 e0       	ldi	r27, 0x00	; 0
    12ea:	e7 e3       	ldi	r30, 0x37	; 55
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	80 61       	ori	r24, 0x10	; 16
    12f2:	8c 93       	st	X, r24
		SET_BIT(PORTB_DIR,PB5);
    12f4:	a7 e3       	ldi	r26, 0x37	; 55
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	e7 e3       	ldi	r30, 0x37	; 55
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	80 62       	ori	r24, 0x20	; 32
    1300:	8c 93       	st	X, r24
		CLR_BIT(PORTB_DIR,PB6);
    1302:	a7 e3       	ldi	r26, 0x37	; 55
    1304:	b0 e0       	ldi	r27, 0x00	; 0
    1306:	e7 e3       	ldi	r30, 0x37	; 55
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	8f 7b       	andi	r24, 0xBF	; 191
    130e:	8c 93       	st	X, r24
		SET_BIT(PORTB_DIR,PB7);
    1310:	a7 e3       	ldi	r26, 0x37	; 55
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	e7 e3       	ldi	r30, 0x37	; 55
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	80 68       	ori	r24, 0x80	; 128
    131c:	8c 93       	st	X, r24
		/************ SELECT MASTER MODE AND ENABLE SPI ************/
		SET_BIT(SPCR,MSTR);
    131e:	ad e2       	ldi	r26, 0x2D	; 45
    1320:	b0 e0       	ldi	r27, 0x00	; 0
    1322:	ed e2       	ldi	r30, 0x2D	; 45
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	80 81       	ld	r24, Z
    1328:	80 61       	ori	r24, 0x10	; 16
    132a:	8c 93       	st	X, r24
		SET_BIT(SPCR,SPE);
    132c:	ad e2       	ldi	r26, 0x2D	; 45
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	ed e2       	ldi	r30, 0x2D	; 45
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 81       	ld	r24, Z
    1336:	80 64       	ori	r24, 0x40	; 64
    1338:	8c 93       	st	X, r24
    133a:	03 c0       	rjmp	.+6      	; 0x1342 <SPI_Init+0xec>
		break;
	default :
		SPI_INIT_Status = E_NOK;
    133c:	81 e0       	ldi	r24, 0x01	; 1
    133e:	80 93 84 00 	sts	0x0084, r24

	}
	/*
	 * select SPI CLOCK PHASE AND POLARITY
	 */
	switch (pstr_SPI_Confg->u8_DataMode)
    1342:	e9 81       	ldd	r30, Y+1	; 0x01
    1344:	fa 81       	ldd	r31, Y+2	; 0x02
    1346:	81 81       	ldd	r24, Z+1	; 0x01
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	3a 87       	std	Y+10, r19	; 0x0a
    134e:	29 87       	std	Y+9, r18	; 0x09
    1350:	89 85       	ldd	r24, Y+9	; 0x09
    1352:	9a 85       	ldd	r25, Y+10	; 0x0a
    1354:	81 30       	cpi	r24, 0x01	; 1
    1356:	91 05       	cpc	r25, r1
    1358:	21 f1       	breq	.+72     	; 0x13a2 <SPI_Init+0x14c>
    135a:	29 85       	ldd	r18, Y+9	; 0x09
    135c:	3a 85       	ldd	r19, Y+10	; 0x0a
    135e:	22 30       	cpi	r18, 0x02	; 2
    1360:	31 05       	cpc	r19, r1
    1362:	2c f4       	brge	.+10     	; 0x136e <SPI_Init+0x118>
    1364:	89 85       	ldd	r24, Y+9	; 0x09
    1366:	9a 85       	ldd	r25, Y+10	; 0x0a
    1368:	00 97       	sbiw	r24, 0x00	; 0
    136a:	61 f0       	breq	.+24     	; 0x1384 <SPI_Init+0x12e>
    136c:	47 c0       	rjmp	.+142    	; 0x13fc <SPI_Init+0x1a6>
    136e:	29 85       	ldd	r18, Y+9	; 0x09
    1370:	3a 85       	ldd	r19, Y+10	; 0x0a
    1372:	22 30       	cpi	r18, 0x02	; 2
    1374:	31 05       	cpc	r19, r1
    1376:	21 f1       	breq	.+72     	; 0x13c0 <SPI_Init+0x16a>
    1378:	89 85       	ldd	r24, Y+9	; 0x09
    137a:	9a 85       	ldd	r25, Y+10	; 0x0a
    137c:	83 30       	cpi	r24, 0x03	; 3
    137e:	91 05       	cpc	r25, r1
    1380:	71 f1       	breq	.+92     	; 0x13de <SPI_Init+0x188>
    1382:	3c c0       	rjmp	.+120    	; 0x13fc <SPI_Init+0x1a6>
	{
	case MODE_0 :
		CLR_BIT(SPCR,CPHA);
    1384:	ad e2       	ldi	r26, 0x2D	; 45
    1386:	b0 e0       	ldi	r27, 0x00	; 0
    1388:	ed e2       	ldi	r30, 0x2D	; 45
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	8b 7f       	andi	r24, 0xFB	; 251
    1390:	8c 93       	st	X, r24
		CLR_BIT(SPCR,CPOL);
    1392:	ad e2       	ldi	r26, 0x2D	; 45
    1394:	b0 e0       	ldi	r27, 0x00	; 0
    1396:	ed e2       	ldi	r30, 0x2D	; 45
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	80 81       	ld	r24, Z
    139c:	87 7f       	andi	r24, 0xF7	; 247
    139e:	8c 93       	st	X, r24
    13a0:	30 c0       	rjmp	.+96     	; 0x1402 <SPI_Init+0x1ac>
		break;
	case MODE_1 :
		SET_BIT(SPCR,CPHA);
    13a2:	ad e2       	ldi	r26, 0x2D	; 45
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	ed e2       	ldi	r30, 0x2D	; 45
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	84 60       	ori	r24, 0x04	; 4
    13ae:	8c 93       	st	X, r24
		CLR_BIT(SPCR,CPOL);
    13b0:	ad e2       	ldi	r26, 0x2D	; 45
    13b2:	b0 e0       	ldi	r27, 0x00	; 0
    13b4:	ed e2       	ldi	r30, 0x2D	; 45
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	87 7f       	andi	r24, 0xF7	; 247
    13bc:	8c 93       	st	X, r24
    13be:	21 c0       	rjmp	.+66     	; 0x1402 <SPI_Init+0x1ac>
		break;
	case MODE_2 :
		CLR_BIT(SPCR,CPHA);
    13c0:	ad e2       	ldi	r26, 0x2D	; 45
    13c2:	b0 e0       	ldi	r27, 0x00	; 0
    13c4:	ed e2       	ldi	r30, 0x2D	; 45
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	8b 7f       	andi	r24, 0xFB	; 251
    13cc:	8c 93       	st	X, r24
		SET_BIT(SPCR,CPOL);
    13ce:	ad e2       	ldi	r26, 0x2D	; 45
    13d0:	b0 e0       	ldi	r27, 0x00	; 0
    13d2:	ed e2       	ldi	r30, 0x2D	; 45
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	88 60       	ori	r24, 0x08	; 8
    13da:	8c 93       	st	X, r24
    13dc:	12 c0       	rjmp	.+36     	; 0x1402 <SPI_Init+0x1ac>
		break;
	case MODE_3 :
		SET_BIT(SPCR,CPHA);
    13de:	ad e2       	ldi	r26, 0x2D	; 45
    13e0:	b0 e0       	ldi	r27, 0x00	; 0
    13e2:	ed e2       	ldi	r30, 0x2D	; 45
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	84 60       	ori	r24, 0x04	; 4
    13ea:	8c 93       	st	X, r24
		SET_BIT(SPCR,CPOL);
    13ec:	ad e2       	ldi	r26, 0x2D	; 45
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	ed e2       	ldi	r30, 0x2D	; 45
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	88 60       	ori	r24, 0x08	; 8
    13f8:	8c 93       	st	X, r24
    13fa:	03 c0       	rjmp	.+6      	; 0x1402 <SPI_Init+0x1ac>
		break;

	default :
		SPI_INIT_Status = E_NOK;
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	80 93 84 00 	sts	0x0084, r24

	}
	/*
	 * SELECT INTERRUPT MODE OR POLLING MODE
	 */
	switch (pstr_SPI_Confg->u8_InterruptMode)
    1402:	e9 81       	ldd	r30, Y+1	; 0x01
    1404:	fa 81       	ldd	r31, Y+2	; 0x02
    1406:	83 81       	ldd	r24, Z+3	; 0x03
    1408:	28 2f       	mov	r18, r24
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	38 87       	std	Y+8, r19	; 0x08
    140e:	2f 83       	std	Y+7, r18	; 0x07
    1410:	8f 81       	ldd	r24, Y+7	; 0x07
    1412:	98 85       	ldd	r25, Y+8	; 0x08
    1414:	00 97       	sbiw	r24, 0x00	; 0
    1416:	31 f0       	breq	.+12     	; 0x1424 <SPI_Init+0x1ce>
    1418:	2f 81       	ldd	r18, Y+7	; 0x07
    141a:	38 85       	ldd	r19, Y+8	; 0x08
    141c:	21 30       	cpi	r18, 0x01	; 1
    141e:	31 05       	cpc	r19, r1
    1420:	49 f0       	breq	.+18     	; 0x1434 <SPI_Init+0x1de>
    1422:	10 c0       	rjmp	.+32     	; 0x1444 <SPI_Init+0x1ee>
	{
	case POLLING :
		CLR_BIT(SPCR,SPIE);
    1424:	ad e2       	ldi	r26, 0x2D	; 45
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	ed e2       	ldi	r30, 0x2D	; 45
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	8f 77       	andi	r24, 0x7F	; 127
    1430:	8c 93       	st	X, r24
    1432:	0b c0       	rjmp	.+22     	; 0x144a <SPI_Init+0x1f4>
		break;
	case INTERRUPT :
		SET_BIT(SPCR,SPIE);
    1434:	ad e2       	ldi	r26, 0x2D	; 45
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	ed e2       	ldi	r30, 0x2D	; 45
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	80 68       	ori	r24, 0x80	; 128
    1440:	8c 93       	st	X, r24
    1442:	03 c0       	rjmp	.+6      	; 0x144a <SPI_Init+0x1f4>
		break;
	default :
		SPI_INIT_Status = E_NOK;
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	80 93 84 00 	sts	0x0084, r24

	}
	/*
	 * select SPI DATA ORDER MSB or LSB
	 */
	switch (pstr_SPI_Confg->u8_DataOrder)
    144a:	e9 81       	ldd	r30, Y+1	; 0x01
    144c:	fa 81       	ldd	r31, Y+2	; 0x02
    144e:	82 81       	ldd	r24, Z+2	; 0x02
    1450:	28 2f       	mov	r18, r24
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	3e 83       	std	Y+6, r19	; 0x06
    1456:	2d 83       	std	Y+5, r18	; 0x05
    1458:	8d 81       	ldd	r24, Y+5	; 0x05
    145a:	9e 81       	ldd	r25, Y+6	; 0x06
    145c:	00 97       	sbiw	r24, 0x00	; 0
    145e:	31 f0       	breq	.+12     	; 0x146c <SPI_Init+0x216>
    1460:	2d 81       	ldd	r18, Y+5	; 0x05
    1462:	3e 81       	ldd	r19, Y+6	; 0x06
    1464:	21 30       	cpi	r18, 0x01	; 1
    1466:	31 05       	cpc	r19, r1
    1468:	49 f0       	breq	.+18     	; 0x147c <SPI_Init+0x226>
    146a:	10 c0       	rjmp	.+32     	; 0x148c <SPI_Init+0x236>
	{
	case MSB :
		CLR_BIT(SPCR,DORD);
    146c:	ad e2       	ldi	r26, 0x2D	; 45
    146e:	b0 e0       	ldi	r27, 0x00	; 0
    1470:	ed e2       	ldi	r30, 0x2D	; 45
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	80 81       	ld	r24, Z
    1476:	8f 7d       	andi	r24, 0xDF	; 223
    1478:	8c 93       	st	X, r24
    147a:	0b c0       	rjmp	.+22     	; 0x1492 <SPI_Init+0x23c>
		break;
	case LSB :
		SET_BIT(SPCR,DORD);
    147c:	ad e2       	ldi	r26, 0x2D	; 45
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	ed e2       	ldi	r30, 0x2D	; 45
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	80 62       	ori	r24, 0x20	; 32
    1488:	8c 93       	st	X, r24
    148a:	03 c0       	rjmp	.+6      	; 0x1492 <SPI_Init+0x23c>
		break;
	default :
		SPI_INIT_Status = E_NOK;
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	80 93 84 00 	sts	0x0084, r24

	}
	/*
	 * select SPI PRESCALER
	 */
	switch (pstr_SPI_Confg->u8_Prescaler)
    1492:	e9 81       	ldd	r30, Y+1	; 0x01
    1494:	fa 81       	ldd	r31, Y+2	; 0x02
    1496:	84 81       	ldd	r24, Z+4	; 0x04
    1498:	28 2f       	mov	r18, r24
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	3c 83       	std	Y+4, r19	; 0x04
    149e:	2b 83       	std	Y+3, r18	; 0x03
    14a0:	8b 81       	ldd	r24, Y+3	; 0x03
    14a2:	9c 81       	ldd	r25, Y+4	; 0x04
    14a4:	83 30       	cpi	r24, 0x03	; 3
    14a6:	91 05       	cpc	r25, r1
    14a8:	09 f4       	brne	.+2      	; 0x14ac <SPI_Init+0x256>
    14aa:	6a c0       	rjmp	.+212    	; 0x1580 <SPI_Init+0x32a>
    14ac:	2b 81       	ldd	r18, Y+3	; 0x03
    14ae:	3c 81       	ldd	r19, Y+4	; 0x04
    14b0:	24 30       	cpi	r18, 0x04	; 4
    14b2:	31 05       	cpc	r19, r1
    14b4:	84 f4       	brge	.+32     	; 0x14d6 <SPI_Init+0x280>
    14b6:	8b 81       	ldd	r24, Y+3	; 0x03
    14b8:	9c 81       	ldd	r25, Y+4	; 0x04
    14ba:	81 30       	cpi	r24, 0x01	; 1
    14bc:	91 05       	cpc	r25, r1
    14be:	a1 f1       	breq	.+104    	; 0x1528 <SPI_Init+0x2d2>
    14c0:	2b 81       	ldd	r18, Y+3	; 0x03
    14c2:	3c 81       	ldd	r19, Y+4	; 0x04
    14c4:	22 30       	cpi	r18, 0x02	; 2
    14c6:	31 05       	cpc	r19, r1
    14c8:	0c f0       	brlt	.+2      	; 0x14cc <SPI_Init+0x276>
    14ca:	44 c0       	rjmp	.+136    	; 0x1554 <SPI_Init+0x2fe>
    14cc:	8b 81       	ldd	r24, Y+3	; 0x03
    14ce:	9c 81       	ldd	r25, Y+4	; 0x04
    14d0:	00 97       	sbiw	r24, 0x00	; 0
    14d2:	a1 f0       	breq	.+40     	; 0x14fc <SPI_Init+0x2a6>
    14d4:	ad c0       	rjmp	.+346    	; 0x1630 <SPI_Init+0x3da>
    14d6:	2b 81       	ldd	r18, Y+3	; 0x03
    14d8:	3c 81       	ldd	r19, Y+4	; 0x04
    14da:	25 30       	cpi	r18, 0x05	; 5
    14dc:	31 05       	cpc	r19, r1
    14de:	09 f4       	brne	.+2      	; 0x14e2 <SPI_Init+0x28c>
    14e0:	7b c0       	rjmp	.+246    	; 0x15d8 <SPI_Init+0x382>
    14e2:	8b 81       	ldd	r24, Y+3	; 0x03
    14e4:	9c 81       	ldd	r25, Y+4	; 0x04
    14e6:	85 30       	cpi	r24, 0x05	; 5
    14e8:	91 05       	cpc	r25, r1
    14ea:	0c f4       	brge	.+2      	; 0x14ee <SPI_Init+0x298>
    14ec:	5f c0       	rjmp	.+190    	; 0x15ac <SPI_Init+0x356>
    14ee:	2b 81       	ldd	r18, Y+3	; 0x03
    14f0:	3c 81       	ldd	r19, Y+4	; 0x04
    14f2:	26 30       	cpi	r18, 0x06	; 6
    14f4:	31 05       	cpc	r19, r1
    14f6:	09 f4       	brne	.+2      	; 0x14fa <SPI_Init+0x2a4>
    14f8:	85 c0       	rjmp	.+266    	; 0x1604 <SPI_Init+0x3ae>
    14fa:	9a c0       	rjmp	.+308    	; 0x1630 <SPI_Init+0x3da>
	{
	/*
	 * (Fosc/2)
	 */
	case SPI_PRESCALER_2 :
		CLR_BIT(SPCR,SPR0);
    14fc:	ad e2       	ldi	r26, 0x2D	; 45
    14fe:	b0 e0       	ldi	r27, 0x00	; 0
    1500:	ed e2       	ldi	r30, 0x2D	; 45
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	80 81       	ld	r24, Z
    1506:	8e 7f       	andi	r24, 0xFE	; 254
    1508:	8c 93       	st	X, r24
		CLR_BIT(SPCR,SPR1);
    150a:	ad e2       	ldi	r26, 0x2D	; 45
    150c:	b0 e0       	ldi	r27, 0x00	; 0
    150e:	ed e2       	ldi	r30, 0x2D	; 45
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 81       	ld	r24, Z
    1514:	8d 7f       	andi	r24, 0xFD	; 253
    1516:	8c 93       	st	X, r24
		SET_BIT(SPCR,SPI2X);
    1518:	ad e2       	ldi	r26, 0x2D	; 45
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	ed e2       	ldi	r30, 0x2D	; 45
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	81 60       	ori	r24, 0x01	; 1
    1524:	8c 93       	st	X, r24
    1526:	87 c0       	rjmp	.+270    	; 0x1636 <SPI_Init+0x3e0>
		break;
		/*
		 * (Fosc/4)
		 */
	case SPI_PRESCALER_4 :
		CLR_BIT(SPCR,SPR0);
    1528:	ad e2       	ldi	r26, 0x2D	; 45
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	ed e2       	ldi	r30, 0x2D	; 45
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	8e 7f       	andi	r24, 0xFE	; 254
    1534:	8c 93       	st	X, r24
		CLR_BIT(SPCR,SPR1);
    1536:	ad e2       	ldi	r26, 0x2D	; 45
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	ed e2       	ldi	r30, 0x2D	; 45
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	8d 7f       	andi	r24, 0xFD	; 253
    1542:	8c 93       	st	X, r24
		CLR_BIT(SPCR,SPI2X);
    1544:	ad e2       	ldi	r26, 0x2D	; 45
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	ed e2       	ldi	r30, 0x2D	; 45
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	8e 7f       	andi	r24, 0xFE	; 254
    1550:	8c 93       	st	X, r24
    1552:	71 c0       	rjmp	.+226    	; 0x1636 <SPI_Init+0x3e0>
		break;
		/*
		 * (Fosc/8)
		 */
	case SPI_PRESCALER_8 :
		SET_BIT(SPCR,SPR0);
    1554:	ad e2       	ldi	r26, 0x2D	; 45
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	ed e2       	ldi	r30, 0x2D	; 45
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	81 60       	ori	r24, 0x01	; 1
    1560:	8c 93       	st	X, r24
		CLR_BIT(SPCR,SPR1);
    1562:	ad e2       	ldi	r26, 0x2D	; 45
    1564:	b0 e0       	ldi	r27, 0x00	; 0
    1566:	ed e2       	ldi	r30, 0x2D	; 45
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	8d 7f       	andi	r24, 0xFD	; 253
    156e:	8c 93       	st	X, r24
		SET_BIT(SPCR,SPI2X);
    1570:	ad e2       	ldi	r26, 0x2D	; 45
    1572:	b0 e0       	ldi	r27, 0x00	; 0
    1574:	ed e2       	ldi	r30, 0x2D	; 45
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	80 81       	ld	r24, Z
    157a:	81 60       	ori	r24, 0x01	; 1
    157c:	8c 93       	st	X, r24
    157e:	5b c0       	rjmp	.+182    	; 0x1636 <SPI_Init+0x3e0>
		break;
		/*
		 * (Fosc/16)
		 */
	case SPI_PRESCALER_16 :
		SET_BIT(SPCR,SPR0);
    1580:	ad e2       	ldi	r26, 0x2D	; 45
    1582:	b0 e0       	ldi	r27, 0x00	; 0
    1584:	ed e2       	ldi	r30, 0x2D	; 45
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	81 60       	ori	r24, 0x01	; 1
    158c:	8c 93       	st	X, r24
		CLR_BIT(SPCR,SPR1);
    158e:	ad e2       	ldi	r26, 0x2D	; 45
    1590:	b0 e0       	ldi	r27, 0x00	; 0
    1592:	ed e2       	ldi	r30, 0x2D	; 45
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	8d 7f       	andi	r24, 0xFD	; 253
    159a:	8c 93       	st	X, r24
		CLR_BIT(SPCR,SPI2X);
    159c:	ad e2       	ldi	r26, 0x2D	; 45
    159e:	b0 e0       	ldi	r27, 0x00	; 0
    15a0:	ed e2       	ldi	r30, 0x2D	; 45
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	80 81       	ld	r24, Z
    15a6:	8e 7f       	andi	r24, 0xFE	; 254
    15a8:	8c 93       	st	X, r24
    15aa:	45 c0       	rjmp	.+138    	; 0x1636 <SPI_Init+0x3e0>
		break;
		/*
		 * (Fosc/32)
		 */
	case SPI_PRESCALER_32 :
		CLR_BIT(SPCR,SPR0);
    15ac:	ad e2       	ldi	r26, 0x2D	; 45
    15ae:	b0 e0       	ldi	r27, 0x00	; 0
    15b0:	ed e2       	ldi	r30, 0x2D	; 45
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	8e 7f       	andi	r24, 0xFE	; 254
    15b8:	8c 93       	st	X, r24
		SET_BIT(SPCR,SPR1);
    15ba:	ad e2       	ldi	r26, 0x2D	; 45
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	ed e2       	ldi	r30, 0x2D	; 45
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	80 81       	ld	r24, Z
    15c4:	82 60       	ori	r24, 0x02	; 2
    15c6:	8c 93       	st	X, r24
		SET_BIT(SPCR,SPI2X);
    15c8:	ad e2       	ldi	r26, 0x2D	; 45
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	ed e2       	ldi	r30, 0x2D	; 45
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	81 60       	ori	r24, 0x01	; 1
    15d4:	8c 93       	st	X, r24
    15d6:	2f c0       	rjmp	.+94     	; 0x1636 <SPI_Init+0x3e0>
		break;
		/*
		 * (Fosc/64)
		 */
	case SPI_PRESCALER_64 :
		CLR_BIT(SPCR,SPR0);
    15d8:	ad e2       	ldi	r26, 0x2D	; 45
    15da:	b0 e0       	ldi	r27, 0x00	; 0
    15dc:	ed e2       	ldi	r30, 0x2D	; 45
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	8e 7f       	andi	r24, 0xFE	; 254
    15e4:	8c 93       	st	X, r24
		SET_BIT(SPCR,SPR1);
    15e6:	ad e2       	ldi	r26, 0x2D	; 45
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    15ea:	ed e2       	ldi	r30, 0x2D	; 45
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	82 60       	ori	r24, 0x02	; 2
    15f2:	8c 93       	st	X, r24
		CLR_BIT(SPCR,SPI2X);
    15f4:	ad e2       	ldi	r26, 0x2D	; 45
    15f6:	b0 e0       	ldi	r27, 0x00	; 0
    15f8:	ed e2       	ldi	r30, 0x2D	; 45
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	80 81       	ld	r24, Z
    15fe:	8e 7f       	andi	r24, 0xFE	; 254
    1600:	8c 93       	st	X, r24
    1602:	19 c0       	rjmp	.+50     	; 0x1636 <SPI_Init+0x3e0>
		break;
		/*
		 * (Fosc/128)
		 */
	case SPI_PRESCALER_128 :
		SET_BIT(SPCR,SPR0);
    1604:	ad e2       	ldi	r26, 0x2D	; 45
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	ed e2       	ldi	r30, 0x2D	; 45
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	81 60       	ori	r24, 0x01	; 1
    1610:	8c 93       	st	X, r24
		SET_BIT(SPCR,SPR1);
    1612:	ad e2       	ldi	r26, 0x2D	; 45
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	ed e2       	ldi	r30, 0x2D	; 45
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	80 81       	ld	r24, Z
    161c:	82 60       	ori	r24, 0x02	; 2
    161e:	8c 93       	st	X, r24
		CLR_BIT(SPCR,SPI2X);
    1620:	ad e2       	ldi	r26, 0x2D	; 45
    1622:	b0 e0       	ldi	r27, 0x00	; 0
    1624:	ed e2       	ldi	r30, 0x2D	; 45
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	80 81       	ld	r24, Z
    162a:	8e 7f       	andi	r24, 0xFE	; 254
    162c:	8c 93       	st	X, r24
    162e:	03 c0       	rjmp	.+6      	; 0x1636 <SPI_Init+0x3e0>
		break;
	default :
		SPI_INIT_Status = E_NOK;
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	80 93 84 00 	sts	0x0084, r24
		break;

	}


	return SPI_INIT_Status;
    1636:	80 91 84 00 	lds	r24, 0x0084
}
    163a:	2c 96       	adiw	r28, 0x0c	; 12
    163c:	0f b6       	in	r0, 0x3f	; 63
    163e:	f8 94       	cli
    1640:	de bf       	out	0x3e, r29	; 62
    1642:	0f be       	out	0x3f, r0	; 63
    1644:	cd bf       	out	0x3d, r28	; 61
    1646:	cf 91       	pop	r28
    1648:	df 91       	pop	r29
    164a:	08 95       	ret

0000164c <SPI_SendByte>:
/* Description : SPI Send Byte                                                    */
/* Input       :                                                                  */
/* Output      : Error Checking                                                   */
/* INOUT       : u8_Data 					                                      */
ERROR_STATUS SPI_SendByte(uint8 u8_Data)
{
    164c:	df 93       	push	r29
    164e:	cf 93       	push	r28
    1650:	0f 92       	push	r0
    1652:	cd b7       	in	r28, 0x3d	; 61
    1654:	de b7       	in	r29, 0x3e	; 62
    1656:	89 83       	std	Y+1, r24	; 0x01

	if(E_OK == SPI_INIT_Status)
    1658:	80 91 84 00 	lds	r24, 0x0084
    165c:	88 23       	and	r24, r24
    165e:	51 f4       	brne	.+20     	; 0x1674 <SPI_SendByte+0x28>
	{

	SPDR = u8_Data ;
    1660:	ef e2       	ldi	r30, 0x2F	; 47
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	89 81       	ldd	r24, Y+1	; 0x01
    1666:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(SPSR,SPIF)){}
    1668:	ee e2       	ldi	r30, 0x2E	; 46
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
    166e:	88 23       	and	r24, r24
    1670:	dc f7       	brge	.-10     	; 0x1668 <SPI_SendByte+0x1c>
    1672:	03 c0       	rjmp	.+6      	; 0x167a <SPI_SendByte+0x2e>

	}
	else {
		SPI_Send_Status = E_NOK;
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	80 93 85 00 	sts	0x0085, r24
	}

	return SPI_Send_Status;
    167a:	80 91 85 00 	lds	r24, 0x0085

}
    167e:	0f 90       	pop	r0
    1680:	cf 91       	pop	r28
    1682:	df 91       	pop	r29
    1684:	08 95       	ret

00001686 <SPI_ReceiveByte>:
/* Description : SPI Receive Byte                                                 */
/* Input       :                                                                  */
/* Output      : Error Checking                                                   */
/* INOUT       : u8_Data "pointer to u8 Data"                                     */
ERROR_STATUS SPI_ReceiveByte(uint8 *ptru8_Data)
{
    1686:	df 93       	push	r29
    1688:	cf 93       	push	r28
    168a:	00 d0       	rcall	.+0      	; 0x168c <SPI_ReceiveByte+0x6>
    168c:	cd b7       	in	r28, 0x3d	; 61
    168e:	de b7       	in	r29, 0x3e	; 62
    1690:	9a 83       	std	Y+2, r25	; 0x02
    1692:	89 83       	std	Y+1, r24	; 0x01
	if(E_OK == SPI_INIT_Status)
    1694:	80 91 84 00 	lds	r24, 0x0084
    1698:	88 23       	and	r24, r24
    169a:	61 f4       	brne	.+24     	; 0x16b4 <SPI_ReceiveByte+0x2e>
		{
	while(BIT_IS_CLEAR(SPSR,SPIF)){}
    169c:	ee e2       	ldi	r30, 0x2E	; 46
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 81       	ld	r24, Z
    16a2:	88 23       	and	r24, r24
    16a4:	dc f7       	brge	.-10     	; 0x169c <SPI_ReceiveByte+0x16>
	*ptru8_Data = SPDR;
    16a6:	ef e2       	ldi	r30, 0x2F	; 47
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 81       	ld	r24, Z
    16ac:	e9 81       	ldd	r30, Y+1	; 0x01
    16ae:	fa 81       	ldd	r31, Y+2	; 0x02
    16b0:	80 83       	st	Z, r24
    16b2:	03 c0       	rjmp	.+6      	; 0x16ba <SPI_ReceiveByte+0x34>
		}
	else {
		SPI_Send_Status = E_NOK;
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	80 93 85 00 	sts	0x0085, r24
	}
	return SPI_Send_Status;
    16ba:	80 91 85 00 	lds	r24, 0x0085
}
    16be:	0f 90       	pop	r0
    16c0:	0f 90       	pop	r0
    16c2:	cf 91       	pop	r28
    16c4:	df 91       	pop	r29
    16c6:	08 95       	ret

000016c8 <Pwm_Init>:
/* Return type : void                                                            */
/*                                                                               */
/* Description: initialize the PWM configuration                                 */
/*********************************************************************************/
ERROR_STATUS Pwm_Init(Pwm_Cfg_s_t *Pwm_Cfg)
{
    16c8:	df 93       	push	r29
    16ca:	cf 93       	push	r28
    16cc:	cd b7       	in	r28, 0x3d	; 61
    16ce:	de b7       	in	r29, 0x3e	; 62
    16d0:	27 97       	sbiw	r28, 0x07	; 7
    16d2:	0f b6       	in	r0, 0x3f	; 63
    16d4:	f8 94       	cli
    16d6:	de bf       	out	0x3e, r29	; 62
    16d8:	0f be       	out	0x3f, r0	; 63
    16da:	cd bf       	out	0x3d, r28	; 61
    16dc:	9a 83       	std	Y+2, r25	; 0x02
    16de:	89 83       	std	Y+1, r24	; 0x01

	TCCR1A = LOW; //initialize the value of TCCR1A REG by Zero
    16e0:	ef e4       	ldi	r30, 0x4F	; 79
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	10 82       	st	Z, r1
	TCCR1B = LOW; //initialize the value of TCCR1B REG by Zero
    16e6:	ee e4       	ldi	r30, 0x4E	; 78
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	10 82       	st	Z, r1
	ICR1 = LOW;
    16ec:	e6 e4       	ldi	r30, 0x46	; 70
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	11 82       	std	Z+1, r1	; 0x01
    16f2:	10 82       	st	Z, r1
	//select Timer1 Phase Correct PWM
	CLR_BIT(TCCR1A,BIT0); //WGM10 = 0;
    16f4:	af e4       	ldi	r26, 0x4F	; 79
    16f6:	b0 e0       	ldi	r27, 0x00	; 0
    16f8:	ef e4       	ldi	r30, 0x4F	; 79
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
    16fe:	8e 7f       	andi	r24, 0xFE	; 254
    1700:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,BIT1); //WGM11 = 1;
    1702:	af e4       	ldi	r26, 0x4F	; 79
    1704:	b0 e0       	ldi	r27, 0x00	; 0
    1706:	ef e4       	ldi	r30, 0x4F	; 79
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	80 81       	ld	r24, Z
    170c:	82 60       	ori	r24, 0x02	; 2
    170e:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,BIT3); //WGM12 = 0;
    1710:	ae e4       	ldi	r26, 0x4E	; 78
    1712:	b0 e0       	ldi	r27, 0x00	; 0
    1714:	ee e4       	ldi	r30, 0x4E	; 78
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	80 81       	ld	r24, Z
    171a:	87 7f       	andi	r24, 0xF7	; 247
    171c:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,BIT4); //WGH13 =1;
    171e:	ae e4       	ldi	r26, 0x4E	; 78
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	ee e4       	ldi	r30, 0x4E	; 78
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	80 61       	ori	r24, 0x10	; 16
    172a:	8c 93       	st	X, r24

	//Clear OC1A and OC1B when match occurs (non inverted mode)
	CLR_BIT(TCCR1A,BIT6); //COM1A0 = 0;
    172c:	af e4       	ldi	r26, 0x4F	; 79
    172e:	b0 e0       	ldi	r27, 0x00	; 0
    1730:	ef e4       	ldi	r30, 0x4F	; 79
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	8f 7b       	andi	r24, 0xBF	; 191
    1738:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,BIT7); //COM1A1 = 1;
    173a:	af e4       	ldi	r26, 0x4F	; 79
    173c:	b0 e0       	ldi	r27, 0x00	; 0
    173e:	ef e4       	ldi	r30, 0x4F	; 79
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 81       	ld	r24, Z
    1744:	80 68       	ori	r24, 0x80	; 128
    1746:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,BIT4); //COM1B0 = 0;
    1748:	af e4       	ldi	r26, 0x4F	; 79
    174a:	b0 e0       	ldi	r27, 0x00	; 0
    174c:	ef e4       	ldi	r30, 0x4F	; 79
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	80 81       	ld	r24, Z
    1752:	8f 7e       	andi	r24, 0xEF	; 239
    1754:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,BIT5); //COM1B1 = 1;
    1756:	af e4       	ldi	r26, 0x4F	; 79
    1758:	b0 e0       	ldi	r27, 0x00	; 0
    175a:	ef e4       	ldi	r30, 0x4F	; 79
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
    1760:	80 62       	ori	r24, 0x20	; 32
    1762:	8c 93       	st	X, r24


	switch(Pwm_Cfg->channel)
    1764:	e9 81       	ldd	r30, Y+1	; 0x01
    1766:	fa 81       	ldd	r31, Y+2	; 0x02
    1768:	80 81       	ld	r24, Z
    176a:	28 2f       	mov	r18, r24
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	3f 83       	std	Y+7, r19	; 0x07
    1770:	2e 83       	std	Y+6, r18	; 0x06
    1772:	8e 81       	ldd	r24, Y+6	; 0x06
    1774:	9f 81       	ldd	r25, Y+7	; 0x07
    1776:	82 30       	cpi	r24, 0x02	; 2
    1778:	91 05       	cpc	r25, r1
    177a:	91 f0       	breq	.+36     	; 0x17a0 <Pwm_Init+0xd8>
    177c:	2e 81       	ldd	r18, Y+6	; 0x06
    177e:	3f 81       	ldd	r19, Y+7	; 0x07
    1780:	24 30       	cpi	r18, 0x04	; 4
    1782:	31 05       	cpc	r19, r1
    1784:	a9 f0       	breq	.+42     	; 0x17b0 <Pwm_Init+0xe8>
    1786:	8e 81       	ldd	r24, Y+6	; 0x06
    1788:	9f 81       	ldd	r25, Y+7	; 0x07
    178a:	81 30       	cpi	r24, 0x01	; 1
    178c:	91 05       	cpc	r25, r1
    178e:	f9 f4       	brne	.+62     	; 0x17ce <Pwm_Init+0x106>
	{
	case PWM_CH1A:

		//CLR_BIT(PORTD_DIR,BIT4); // SWITCH OFF OC1B
		SET_BIT(PORTD_DIR,BIT5);  // set OC1A as OUTPUT
    1790:	a1 e3       	ldi	r26, 0x31	; 49
    1792:	b0 e0       	ldi	r27, 0x00	; 0
    1794:	e1 e3       	ldi	r30, 0x31	; 49
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	80 62       	ori	r24, 0x20	; 32
    179c:	8c 93       	st	X, r24
    179e:	1a c0       	rjmp	.+52     	; 0x17d4 <Pwm_Init+0x10c>
		break;

	case PWM_CH1B:
		//CLR_BIT(PORTD_DIR,BIT5); // SWITCH OFF OC1A
		SET_BIT(PORTD_DIR,BIT4); // set OC1B as OUTPUT
    17a0:	a1 e3       	ldi	r26, 0x31	; 49
    17a2:	b0 e0       	ldi	r27, 0x00	; 0
    17a4:	e1 e3       	ldi	r30, 0x31	; 49
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	80 81       	ld	r24, Z
    17aa:	80 61       	ori	r24, 0x10	; 16
    17ac:	8c 93       	st	X, r24
    17ae:	12 c0       	rjmp	.+36     	; 0x17d4 <Pwm_Init+0x10c>
		break;
	case PWM_CHAB:
		SET_BIT(PORTD_DIR,BIT4);
    17b0:	a1 e3       	ldi	r26, 0x31	; 49
    17b2:	b0 e0       	ldi	r27, 0x00	; 0
    17b4:	e1 e3       	ldi	r30, 0x31	; 49
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	80 81       	ld	r24, Z
    17ba:	80 61       	ori	r24, 0x10	; 16
    17bc:	8c 93       	st	X, r24
		SET_BIT(PORTD_DIR,BIT5);
    17be:	a1 e3       	ldi	r26, 0x31	; 49
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
    17c2:	e1 e3       	ldi	r30, 0x31	; 49
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	80 62       	ori	r24, 0x20	; 32
    17ca:	8c 93       	st	X, r24
    17cc:	03 c0       	rjmp	.+6      	; 0x17d4 <Pwm_Init+0x10c>
		break;
	default :
		return E_NOK;
    17ce:	91 e0       	ldi	r25, 0x01	; 1
    17d0:	9d 83       	std	Y+5, r25	; 0x05
    17d2:	7c c0       	rjmp	.+248    	; 0x18cc <Pwm_Init+0x204>
		break;

	}
	switch(Pwm_Cfg->prescaler)
    17d4:	e9 81       	ldd	r30, Y+1	; 0x01
    17d6:	fa 81       	ldd	r31, Y+2	; 0x02
    17d8:	81 81       	ldd	r24, Z+1	; 0x01
    17da:	28 2f       	mov	r18, r24
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	3c 83       	std	Y+4, r19	; 0x04
    17e0:	2b 83       	std	Y+3, r18	; 0x03
    17e2:	8b 81       	ldd	r24, Y+3	; 0x03
    17e4:	9c 81       	ldd	r25, Y+4	; 0x04
    17e6:	83 30       	cpi	r24, 0x03	; 3
    17e8:	91 05       	cpc	r25, r1
    17ea:	e1 f1       	breq	.+120    	; 0x1864 <Pwm_Init+0x19c>
    17ec:	2b 81       	ldd	r18, Y+3	; 0x03
    17ee:	3c 81       	ldd	r19, Y+4	; 0x04
    17f0:	24 30       	cpi	r18, 0x04	; 4
    17f2:	31 05       	cpc	r19, r1
    17f4:	5c f4       	brge	.+22     	; 0x180c <Pwm_Init+0x144>
    17f6:	8b 81       	ldd	r24, Y+3	; 0x03
    17f8:	9c 81       	ldd	r25, Y+4	; 0x04
    17fa:	81 30       	cpi	r24, 0x01	; 1
    17fc:	91 05       	cpc	r25, r1
    17fe:	91 f0       	breq	.+36     	; 0x1824 <Pwm_Init+0x15c>
    1800:	2b 81       	ldd	r18, Y+3	; 0x03
    1802:	3c 81       	ldd	r19, Y+4	; 0x04
    1804:	22 30       	cpi	r18, 0x02	; 2
    1806:	31 05       	cpc	r19, r1
    1808:	e9 f0       	breq	.+58     	; 0x1844 <Pwm_Init+0x17c>
    180a:	5c c0       	rjmp	.+184    	; 0x18c4 <Pwm_Init+0x1fc>
    180c:	8b 81       	ldd	r24, Y+3	; 0x03
    180e:	9c 81       	ldd	r25, Y+4	; 0x04
    1810:	84 30       	cpi	r24, 0x04	; 4
    1812:	91 05       	cpc	r25, r1
    1814:	b9 f1       	breq	.+110    	; 0x1884 <Pwm_Init+0x1bc>
    1816:	2b 81       	ldd	r18, Y+3	; 0x03
    1818:	3c 81       	ldd	r19, Y+4	; 0x04
    181a:	25 30       	cpi	r18, 0x05	; 5
    181c:	31 05       	cpc	r19, r1
    181e:	09 f4       	brne	.+2      	; 0x1822 <Pwm_Init+0x15a>
    1820:	41 c0       	rjmp	.+130    	; 0x18a4 <Pwm_Init+0x1dc>
    1822:	50 c0       	rjmp	.+160    	; 0x18c4 <Pwm_Init+0x1fc>
	{
	case PWM_PRESCALER_NO:
		gu8_PWM1_PreScaller = PWM_PRESCALER_NO;
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	80 93 86 00 	sts	0x0086, r24
		gu8_PWM1_PreScaller_Value =PRESCALER_NO;
    182a:	81 e0       	ldi	r24, 0x01	; 1
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	a0 e0       	ldi	r26, 0x00	; 0
    1830:	b0 e0       	ldi	r27, 0x00	; 0
    1832:	80 93 87 00 	sts	0x0087, r24
    1836:	90 93 88 00 	sts	0x0088, r25
    183a:	a0 93 89 00 	sts	0x0089, r26
    183e:	b0 93 8a 00 	sts	0x008A, r27
    1842:	43 c0       	rjmp	.+134    	; 0x18ca <Pwm_Init+0x202>
		break;
	case PWM_PRESCALER_8:
		gu8_PWM1_PreScaller = PWM_PRESCALER_8;
    1844:	82 e0       	ldi	r24, 0x02	; 2
    1846:	80 93 86 00 	sts	0x0086, r24
		gu8_PWM1_PreScaller_Value =PRESCALER_8;
    184a:	88 e0       	ldi	r24, 0x08	; 8
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	a0 e0       	ldi	r26, 0x00	; 0
    1850:	b0 e0       	ldi	r27, 0x00	; 0
    1852:	80 93 87 00 	sts	0x0087, r24
    1856:	90 93 88 00 	sts	0x0088, r25
    185a:	a0 93 89 00 	sts	0x0089, r26
    185e:	b0 93 8a 00 	sts	0x008A, r27
    1862:	33 c0       	rjmp	.+102    	; 0x18ca <Pwm_Init+0x202>
		break;
	case PWM_PRESCALER_64:
		gu8_PWM1_PreScaller = PWM_PRESCALER_64;
    1864:	83 e0       	ldi	r24, 0x03	; 3
    1866:	80 93 86 00 	sts	0x0086, r24
		gu8_PWM1_PreScaller_Value=PRESCALER_64;
    186a:	80 e4       	ldi	r24, 0x40	; 64
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	a0 e0       	ldi	r26, 0x00	; 0
    1870:	b0 e0       	ldi	r27, 0x00	; 0
    1872:	80 93 87 00 	sts	0x0087, r24
    1876:	90 93 88 00 	sts	0x0088, r25
    187a:	a0 93 89 00 	sts	0x0089, r26
    187e:	b0 93 8a 00 	sts	0x008A, r27
    1882:	23 c0       	rjmp	.+70     	; 0x18ca <Pwm_Init+0x202>

		break;
	case PWM_PRESCALER_256:
		gu8_PWM1_PreScaller = PWM_PRESCALER_256;
    1884:	84 e0       	ldi	r24, 0x04	; 4
    1886:	80 93 86 00 	sts	0x0086, r24
		gu8_PWM1_PreScaller_Value =PRESCALER_256;
    188a:	80 e0       	ldi	r24, 0x00	; 0
    188c:	91 e0       	ldi	r25, 0x01	; 1
    188e:	a0 e0       	ldi	r26, 0x00	; 0
    1890:	b0 e0       	ldi	r27, 0x00	; 0
    1892:	80 93 87 00 	sts	0x0087, r24
    1896:	90 93 88 00 	sts	0x0088, r25
    189a:	a0 93 89 00 	sts	0x0089, r26
    189e:	b0 93 8a 00 	sts	0x008A, r27
    18a2:	13 c0       	rjmp	.+38     	; 0x18ca <Pwm_Init+0x202>

		break;
	case PWM_PRESCALER_1024:
		gu8_PWM1_PreScaller = PWM_PRESCALER_1024;
    18a4:	85 e0       	ldi	r24, 0x05	; 5
    18a6:	80 93 86 00 	sts	0x0086, r24
		gu8_PWM1_PreScaller_Value =PRESCALER_1024;
    18aa:	80 e0       	ldi	r24, 0x00	; 0
    18ac:	94 e0       	ldi	r25, 0x04	; 4
    18ae:	a0 e0       	ldi	r26, 0x00	; 0
    18b0:	b0 e0       	ldi	r27, 0x00	; 0
    18b2:	80 93 87 00 	sts	0x0087, r24
    18b6:	90 93 88 00 	sts	0x0088, r25
    18ba:	a0 93 89 00 	sts	0x0089, r26
    18be:	b0 93 8a 00 	sts	0x008A, r27
    18c2:	03 c0       	rjmp	.+6      	; 0x18ca <Pwm_Init+0x202>

		break;
	default:
		return E_NOK;
    18c4:	31 e0       	ldi	r19, 0x01	; 1
    18c6:	3d 83       	std	Y+5, r19	; 0x05
    18c8:	01 c0       	rjmp	.+2      	; 0x18cc <Pwm_Init+0x204>
		break;
	}
	return E_OK;
    18ca:	1d 82       	std	Y+5, r1	; 0x05
    18cc:	8d 81       	ldd	r24, Y+5	; 0x05
}
    18ce:	27 96       	adiw	r28, 0x07	; 7
    18d0:	0f b6       	in	r0, 0x3f	; 63
    18d2:	f8 94       	cli
    18d4:	de bf       	out	0x3e, r29	; 62
    18d6:	0f be       	out	0x3f, r0	; 63
    18d8:	cd bf       	out	0x3d, r28	; 61
    18da:	cf 91       	pop	r28
    18dc:	df 91       	pop	r29
    18de:	08 95       	ret

000018e0 <Pwm_Start>:
/*                                                                               */
/* Description: starts the PWM on the dedicated channel with the required duty   */
/*				cycle and frequency                                              */
/*********************************************************************************/
ERROR_STATUS Pwm_Start(uint8 channel,uint8 Duty,uint32 Frequncy)
{
    18e0:	df 93       	push	r29
    18e2:	cf 93       	push	r28
    18e4:	cd b7       	in	r28, 0x3d	; 61
    18e6:	de b7       	in	r29, 0x3e	; 62
    18e8:	29 97       	sbiw	r28, 0x09	; 9
    18ea:	0f b6       	in	r0, 0x3f	; 63
    18ec:	f8 94       	cli
    18ee:	de bf       	out	0x3e, r29	; 62
    18f0:	0f be       	out	0x3f, r0	; 63
    18f2:	cd bf       	out	0x3d, r28	; 61
    18f4:	89 83       	std	Y+1, r24	; 0x01
    18f6:	6a 83       	std	Y+2, r22	; 0x02
    18f8:	2b 83       	std	Y+3, r18	; 0x03
    18fa:	3c 83       	std	Y+4, r19	; 0x04
    18fc:	4d 83       	std	Y+5, r20	; 0x05
    18fe:	5e 83       	std	Y+6, r21	; 0x06
	switch(channel)
    1900:	89 81       	ldd	r24, Y+1	; 0x01
    1902:	28 2f       	mov	r18, r24
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	39 87       	std	Y+9, r19	; 0x09
    1908:	28 87       	std	Y+8, r18	; 0x08
    190a:	88 85       	ldd	r24, Y+8	; 0x08
    190c:	99 85       	ldd	r25, Y+9	; 0x09
    190e:	82 30       	cpi	r24, 0x02	; 2
    1910:	91 05       	cpc	r25, r1
    1912:	09 f4       	brne	.+2      	; 0x1916 <Pwm_Start+0x36>
    1914:	74 c0       	rjmp	.+232    	; 0x19fe <Pwm_Start+0x11e>
    1916:	28 85       	ldd	r18, Y+8	; 0x08
    1918:	39 85       	ldd	r19, Y+9	; 0x09
    191a:	24 30       	cpi	r18, 0x04	; 4
    191c:	31 05       	cpc	r19, r1
    191e:	09 f4       	brne	.+2      	; 0x1922 <Pwm_Start+0x42>
    1920:	d6 c0       	rjmp	.+428    	; 0x1ace <Pwm_Start+0x1ee>
    1922:	88 85       	ldd	r24, Y+8	; 0x08
    1924:	99 85       	ldd	r25, Y+9	; 0x09
    1926:	81 30       	cpi	r24, 0x01	; 1
    1928:	91 05       	cpc	r25, r1
    192a:	09 f0       	breq	.+2      	; 0x192e <Pwm_Start+0x4e>
    192c:	44 c1       	rjmp	.+648    	; 0x1bb6 <Pwm_Start+0x2d6>
	{
	case PWM_CH1A:
		//calculate the top value to be loaded in ICR1
		gu8_PWM1_CH1A_Frequency =  ((FREQUENCY)/(FREQFACTOR*gu8_PWM1_PreScaller_Value*Frequncy));
    192e:	80 91 87 00 	lds	r24, 0x0087
    1932:	90 91 88 00 	lds	r25, 0x0088
    1936:	a0 91 89 00 	lds	r26, 0x0089
    193a:	b0 91 8a 00 	lds	r27, 0x008A
    193e:	2b 81       	ldd	r18, Y+3	; 0x03
    1940:	3c 81       	ldd	r19, Y+4	; 0x04
    1942:	4d 81       	ldd	r20, Y+5	; 0x05
    1944:	5e 81       	ldd	r21, Y+6	; 0x06
    1946:	bc 01       	movw	r22, r24
    1948:	cd 01       	movw	r24, r26
    194a:	0e 94 c1 1c 	call	0x3982	; 0x3982 <__mulsi3>
    194e:	dc 01       	movw	r26, r24
    1950:	cb 01       	movw	r24, r22
    1952:	9c 01       	movw	r18, r24
    1954:	ad 01       	movw	r20, r26
    1956:	22 0f       	add	r18, r18
    1958:	33 1f       	adc	r19, r19
    195a:	44 1f       	adc	r20, r20
    195c:	55 1f       	adc	r21, r21
    195e:	80 e0       	ldi	r24, 0x00	; 0
    1960:	94 e2       	ldi	r25, 0x24	; 36
    1962:	a4 ef       	ldi	r26, 0xF4	; 244
    1964:	b0 e0       	ldi	r27, 0x00	; 0
    1966:	bc 01       	movw	r22, r24
    1968:	cd 01       	movw	r24, r26
    196a:	0e 94 e0 1c 	call	0x39c0	; 0x39c0 <__udivmodsi4>
    196e:	da 01       	movw	r26, r20
    1970:	c9 01       	movw	r24, r18
    1972:	80 93 93 00 	sts	0x0093, r24
    1976:	90 93 94 00 	sts	0x0094, r25
    197a:	a0 93 95 00 	sts	0x0095, r26
    197e:	b0 93 96 00 	sts	0x0096, r27
		ICR1 = gu8_PWM1_CH1A_Frequency;
    1982:	e6 e4       	ldi	r30, 0x46	; 70
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 91 93 00 	lds	r24, 0x0093
    198a:	90 91 94 00 	lds	r25, 0x0094
    198e:	a0 91 95 00 	lds	r26, 0x0095
    1992:	b0 91 96 00 	lds	r27, 0x0096
    1996:	91 83       	std	Z+1, r25	; 0x01
    1998:	80 83       	st	Z, r24
		//calculate the value to be loaded in OCR1A
		gu8_PWM1_CH1A_DutyCycle = ((Duty*gu8_PWM1_CH1A_Frequency)/DUTYFACTOR);
    199a:	8a 81       	ldd	r24, Y+2	; 0x02
    199c:	88 2f       	mov	r24, r24
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	a0 e0       	ldi	r26, 0x00	; 0
    19a2:	b0 e0       	ldi	r27, 0x00	; 0
    19a4:	20 91 93 00 	lds	r18, 0x0093
    19a8:	30 91 94 00 	lds	r19, 0x0094
    19ac:	40 91 95 00 	lds	r20, 0x0095
    19b0:	50 91 96 00 	lds	r21, 0x0096
    19b4:	bc 01       	movw	r22, r24
    19b6:	cd 01       	movw	r24, r26
    19b8:	0e 94 c1 1c 	call	0x3982	; 0x3982 <__mulsi3>
    19bc:	dc 01       	movw	r26, r24
    19be:	cb 01       	movw	r24, r22
    19c0:	24 e6       	ldi	r18, 0x64	; 100
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	40 e0       	ldi	r20, 0x00	; 0
    19c6:	50 e0       	ldi	r21, 0x00	; 0
    19c8:	bc 01       	movw	r22, r24
    19ca:	cd 01       	movw	r24, r26
    19cc:	0e 94 e0 1c 	call	0x39c0	; 0x39c0 <__udivmodsi4>
    19d0:	da 01       	movw	r26, r20
    19d2:	c9 01       	movw	r24, r18
    19d4:	80 93 8b 00 	sts	0x008B, r24
    19d8:	90 93 8c 00 	sts	0x008C, r25
    19dc:	a0 93 8d 00 	sts	0x008D, r26
    19e0:	b0 93 8e 00 	sts	0x008E, r27
		OCR1A = gu8_PWM1_CH1A_DutyCycle;
    19e4:	ea e4       	ldi	r30, 0x4A	; 74
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	80 91 8b 00 	lds	r24, 0x008B
    19ec:	90 91 8c 00 	lds	r25, 0x008C
    19f0:	a0 91 8d 00 	lds	r26, 0x008D
    19f4:	b0 91 8e 00 	lds	r27, 0x008E
    19f8:	91 83       	std	Z+1, r25	; 0x01
    19fa:	80 83       	st	Z, r24
    19fc:	df c0       	rjmp	.+446    	; 0x1bbc <Pwm_Start+0x2dc>
		//OCR1B = LOW;
		break;
	case PWM_CH1B:
		//calculate the top value to be loaded in ICR1
		gu8_PWM1_CH1B_Frequency = ((FREQUENCY)/(FREQFACTOR*gu8_PWM1_PreScaller_Value*Frequncy));
    19fe:	80 91 87 00 	lds	r24, 0x0087
    1a02:	90 91 88 00 	lds	r25, 0x0088
    1a06:	a0 91 89 00 	lds	r26, 0x0089
    1a0a:	b0 91 8a 00 	lds	r27, 0x008A
    1a0e:	2b 81       	ldd	r18, Y+3	; 0x03
    1a10:	3c 81       	ldd	r19, Y+4	; 0x04
    1a12:	4d 81       	ldd	r20, Y+5	; 0x05
    1a14:	5e 81       	ldd	r21, Y+6	; 0x06
    1a16:	bc 01       	movw	r22, r24
    1a18:	cd 01       	movw	r24, r26
    1a1a:	0e 94 c1 1c 	call	0x3982	; 0x3982 <__mulsi3>
    1a1e:	dc 01       	movw	r26, r24
    1a20:	cb 01       	movw	r24, r22
    1a22:	9c 01       	movw	r18, r24
    1a24:	ad 01       	movw	r20, r26
    1a26:	22 0f       	add	r18, r18
    1a28:	33 1f       	adc	r19, r19
    1a2a:	44 1f       	adc	r20, r20
    1a2c:	55 1f       	adc	r21, r21
    1a2e:	80 e0       	ldi	r24, 0x00	; 0
    1a30:	94 e2       	ldi	r25, 0x24	; 36
    1a32:	a4 ef       	ldi	r26, 0xF4	; 244
    1a34:	b0 e0       	ldi	r27, 0x00	; 0
    1a36:	bc 01       	movw	r22, r24
    1a38:	cd 01       	movw	r24, r26
    1a3a:	0e 94 e0 1c 	call	0x39c0	; 0x39c0 <__udivmodsi4>
    1a3e:	da 01       	movw	r26, r20
    1a40:	c9 01       	movw	r24, r18
    1a42:	80 93 97 00 	sts	0x0097, r24
    1a46:	90 93 98 00 	sts	0x0098, r25
    1a4a:	a0 93 99 00 	sts	0x0099, r26
    1a4e:	b0 93 9a 00 	sts	0x009A, r27
		ICR1 =gu8_PWM1_CH1B_Frequency;
    1a52:	e6 e4       	ldi	r30, 0x46	; 70
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	80 91 97 00 	lds	r24, 0x0097
    1a5a:	90 91 98 00 	lds	r25, 0x0098
    1a5e:	a0 91 99 00 	lds	r26, 0x0099
    1a62:	b0 91 9a 00 	lds	r27, 0x009A
    1a66:	91 83       	std	Z+1, r25	; 0x01
    1a68:	80 83       	st	Z, r24
		//calculate the value to be loaded in OCR1A
		gu8_PWM1_CH1B_DutyCycle = ((Duty*gu8_PWM1_CH1B_Frequency)/DUTYFACTOR);
    1a6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6c:	88 2f       	mov	r24, r24
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	a0 e0       	ldi	r26, 0x00	; 0
    1a72:	b0 e0       	ldi	r27, 0x00	; 0
    1a74:	20 91 97 00 	lds	r18, 0x0097
    1a78:	30 91 98 00 	lds	r19, 0x0098
    1a7c:	40 91 99 00 	lds	r20, 0x0099
    1a80:	50 91 9a 00 	lds	r21, 0x009A
    1a84:	bc 01       	movw	r22, r24
    1a86:	cd 01       	movw	r24, r26
    1a88:	0e 94 c1 1c 	call	0x3982	; 0x3982 <__mulsi3>
    1a8c:	dc 01       	movw	r26, r24
    1a8e:	cb 01       	movw	r24, r22
    1a90:	24 e6       	ldi	r18, 0x64	; 100
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	40 e0       	ldi	r20, 0x00	; 0
    1a96:	50 e0       	ldi	r21, 0x00	; 0
    1a98:	bc 01       	movw	r22, r24
    1a9a:	cd 01       	movw	r24, r26
    1a9c:	0e 94 e0 1c 	call	0x39c0	; 0x39c0 <__udivmodsi4>
    1aa0:	da 01       	movw	r26, r20
    1aa2:	c9 01       	movw	r24, r18
    1aa4:	80 93 8f 00 	sts	0x008F, r24
    1aa8:	90 93 90 00 	sts	0x0090, r25
    1aac:	a0 93 91 00 	sts	0x0091, r26
    1ab0:	b0 93 92 00 	sts	0x0092, r27
		OCR1B = gu8_PWM1_CH1B_DutyCycle;
    1ab4:	e8 e4       	ldi	r30, 0x48	; 72
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	80 91 8f 00 	lds	r24, 0x008F
    1abc:	90 91 90 00 	lds	r25, 0x0090
    1ac0:	a0 91 91 00 	lds	r26, 0x0091
    1ac4:	b0 91 92 00 	lds	r27, 0x0092
    1ac8:	91 83       	std	Z+1, r25	; 0x01
    1aca:	80 83       	st	Z, r24
    1acc:	77 c0       	rjmp	.+238    	; 0x1bbc <Pwm_Start+0x2dc>
		//OCR1A = LOW;
		break;
	case PWM_CHAB:
		//calculate the top value to be loaded in ICR1
		gu8_PWM1_CHAB_Frequency = ((FREQUENCY)/(FREQFACTOR*gu8_PWM1_PreScaller_Value*Frequncy));
    1ace:	80 91 87 00 	lds	r24, 0x0087
    1ad2:	90 91 88 00 	lds	r25, 0x0088
    1ad6:	a0 91 89 00 	lds	r26, 0x0089
    1ada:	b0 91 8a 00 	lds	r27, 0x008A
    1ade:	2b 81       	ldd	r18, Y+3	; 0x03
    1ae0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ae2:	4d 81       	ldd	r20, Y+5	; 0x05
    1ae4:	5e 81       	ldd	r21, Y+6	; 0x06
    1ae6:	bc 01       	movw	r22, r24
    1ae8:	cd 01       	movw	r24, r26
    1aea:	0e 94 c1 1c 	call	0x3982	; 0x3982 <__mulsi3>
    1aee:	dc 01       	movw	r26, r24
    1af0:	cb 01       	movw	r24, r22
    1af2:	9c 01       	movw	r18, r24
    1af4:	ad 01       	movw	r20, r26
    1af6:	22 0f       	add	r18, r18
    1af8:	33 1f       	adc	r19, r19
    1afa:	44 1f       	adc	r20, r20
    1afc:	55 1f       	adc	r21, r21
    1afe:	80 e0       	ldi	r24, 0x00	; 0
    1b00:	94 e2       	ldi	r25, 0x24	; 36
    1b02:	a4 ef       	ldi	r26, 0xF4	; 244
    1b04:	b0 e0       	ldi	r27, 0x00	; 0
    1b06:	bc 01       	movw	r22, r24
    1b08:	cd 01       	movw	r24, r26
    1b0a:	0e 94 e0 1c 	call	0x39c0	; 0x39c0 <__udivmodsi4>
    1b0e:	da 01       	movw	r26, r20
    1b10:	c9 01       	movw	r24, r18
    1b12:	80 93 9f 00 	sts	0x009F, r24
    1b16:	90 93 a0 00 	sts	0x00A0, r25
    1b1a:	a0 93 a1 00 	sts	0x00A1, r26
    1b1e:	b0 93 a2 00 	sts	0x00A2, r27
		ICR1 =gu8_PWM1_CHAB_Frequency;
    1b22:	e6 e4       	ldi	r30, 0x46	; 70
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	80 91 9f 00 	lds	r24, 0x009F
    1b2a:	90 91 a0 00 	lds	r25, 0x00A0
    1b2e:	a0 91 a1 00 	lds	r26, 0x00A1
    1b32:	b0 91 a2 00 	lds	r27, 0x00A2
    1b36:	91 83       	std	Z+1, r25	; 0x01
    1b38:	80 83       	st	Z, r24
		//calculate the value to be loaded in OCR1A
		gu8_PWM1_CHAB_DutyCycle = ((Duty*gu8_PWM1_CHAB_Frequency)/DUTYFACTOR);
    1b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3c:	88 2f       	mov	r24, r24
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	a0 e0       	ldi	r26, 0x00	; 0
    1b42:	b0 e0       	ldi	r27, 0x00	; 0
    1b44:	20 91 9f 00 	lds	r18, 0x009F
    1b48:	30 91 a0 00 	lds	r19, 0x00A0
    1b4c:	40 91 a1 00 	lds	r20, 0x00A1
    1b50:	50 91 a2 00 	lds	r21, 0x00A2
    1b54:	bc 01       	movw	r22, r24
    1b56:	cd 01       	movw	r24, r26
    1b58:	0e 94 c1 1c 	call	0x3982	; 0x3982 <__mulsi3>
    1b5c:	dc 01       	movw	r26, r24
    1b5e:	cb 01       	movw	r24, r22
    1b60:	24 e6       	ldi	r18, 0x64	; 100
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	40 e0       	ldi	r20, 0x00	; 0
    1b66:	50 e0       	ldi	r21, 0x00	; 0
    1b68:	bc 01       	movw	r22, r24
    1b6a:	cd 01       	movw	r24, r26
    1b6c:	0e 94 e0 1c 	call	0x39c0	; 0x39c0 <__udivmodsi4>
    1b70:	da 01       	movw	r26, r20
    1b72:	c9 01       	movw	r24, r18
    1b74:	80 93 9b 00 	sts	0x009B, r24
    1b78:	90 93 9c 00 	sts	0x009C, r25
    1b7c:	a0 93 9d 00 	sts	0x009D, r26
    1b80:	b0 93 9e 00 	sts	0x009E, r27
		OCR1A = gu8_PWM1_CHAB_DutyCycle;
    1b84:	ea e4       	ldi	r30, 0x4A	; 74
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	80 91 9b 00 	lds	r24, 0x009B
    1b8c:	90 91 9c 00 	lds	r25, 0x009C
    1b90:	a0 91 9d 00 	lds	r26, 0x009D
    1b94:	b0 91 9e 00 	lds	r27, 0x009E
    1b98:	91 83       	std	Z+1, r25	; 0x01
    1b9a:	80 83       	st	Z, r24
		OCR1B = gu8_PWM1_CHAB_DutyCycle;
    1b9c:	e8 e4       	ldi	r30, 0x48	; 72
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	80 91 9b 00 	lds	r24, 0x009B
    1ba4:	90 91 9c 00 	lds	r25, 0x009C
    1ba8:	a0 91 9d 00 	lds	r26, 0x009D
    1bac:	b0 91 9e 00 	lds	r27, 0x009E
    1bb0:	91 83       	std	Z+1, r25	; 0x01
    1bb2:	80 83       	st	Z, r24
    1bb4:	03 c0       	rjmp	.+6      	; 0x1bbc <Pwm_Start+0x2dc>
		break;
	default:
		return E_NOK;
    1bb6:	91 e0       	ldi	r25, 0x01	; 1
    1bb8:	9f 83       	std	Y+7, r25	; 0x07
    1bba:	0a c0       	rjmp	.+20     	; 0x1bd0 <Pwm_Start+0x2f0>
		break;
	}
	TCCR1B |= gu8_PWM1_PreScaller;
    1bbc:	ae e4       	ldi	r26, 0x4E	; 78
    1bbe:	b0 e0       	ldi	r27, 0x00	; 0
    1bc0:	ee e4       	ldi	r30, 0x4E	; 78
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	90 81       	ld	r25, Z
    1bc6:	80 91 86 00 	lds	r24, 0x0086
    1bca:	89 2b       	or	r24, r25
    1bcc:	8c 93       	st	X, r24


	return E_OK;
    1bce:	1f 82       	std	Y+7, r1	; 0x07
    1bd0:	8f 81       	ldd	r24, Y+7	; 0x07
}
    1bd2:	29 96       	adiw	r28, 0x09	; 9
    1bd4:	0f b6       	in	r0, 0x3f	; 63
    1bd6:	f8 94       	cli
    1bd8:	de bf       	out	0x3e, r29	; 62
    1bda:	0f be       	out	0x3f, r0	; 63
    1bdc:	cd bf       	out	0x3d, r28	; 61
    1bde:	cf 91       	pop	r28
    1be0:	df 91       	pop	r29
    1be2:	08 95       	ret

00001be4 <Pwm_Update>:
/* Return type : Error State                                                     */
/*                                                                               */
/* Description: updates the duty cycle and frequency of the dedicated channel    */
/*********************************************************************************/
ERROR_STATUS Pwm_Update(uint8 channel,uint8 Duty,uint32 Frequncy)
{
    1be4:	df 93       	push	r29
    1be6:	cf 93       	push	r28
    1be8:	cd b7       	in	r28, 0x3d	; 61
    1bea:	de b7       	in	r29, 0x3e	; 62
    1bec:	29 97       	sbiw	r28, 0x09	; 9
    1bee:	0f b6       	in	r0, 0x3f	; 63
    1bf0:	f8 94       	cli
    1bf2:	de bf       	out	0x3e, r29	; 62
    1bf4:	0f be       	out	0x3f, r0	; 63
    1bf6:	cd bf       	out	0x3d, r28	; 61
    1bf8:	89 83       	std	Y+1, r24	; 0x01
    1bfa:	6a 83       	std	Y+2, r22	; 0x02
    1bfc:	2b 83       	std	Y+3, r18	; 0x03
    1bfe:	3c 83       	std	Y+4, r19	; 0x04
    1c00:	4d 83       	std	Y+5, r20	; 0x05
    1c02:	5e 83       	std	Y+6, r21	; 0x06
	switch(channel)
    1c04:	89 81       	ldd	r24, Y+1	; 0x01
    1c06:	28 2f       	mov	r18, r24
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	39 87       	std	Y+9, r19	; 0x09
    1c0c:	28 87       	std	Y+8, r18	; 0x08
    1c0e:	88 85       	ldd	r24, Y+8	; 0x08
    1c10:	99 85       	ldd	r25, Y+9	; 0x09
    1c12:	82 30       	cpi	r24, 0x02	; 2
    1c14:	91 05       	cpc	r25, r1
    1c16:	09 f4       	brne	.+2      	; 0x1c1a <Pwm_Update+0x36>
    1c18:	70 c0       	rjmp	.+224    	; 0x1cfa <Pwm_Update+0x116>
    1c1a:	28 85       	ldd	r18, Y+8	; 0x08
    1c1c:	39 85       	ldd	r19, Y+9	; 0x09
    1c1e:	24 30       	cpi	r18, 0x04	; 4
    1c20:	31 05       	cpc	r19, r1
    1c22:	09 f4       	brne	.+2      	; 0x1c26 <Pwm_Update+0x42>
    1c24:	ce c0       	rjmp	.+412    	; 0x1dc2 <Pwm_Update+0x1de>
    1c26:	88 85       	ldd	r24, Y+8	; 0x08
    1c28:	99 85       	ldd	r25, Y+9	; 0x09
    1c2a:	81 30       	cpi	r24, 0x01	; 1
    1c2c:	91 05       	cpc	r25, r1
    1c2e:	09 f0       	breq	.+2      	; 0x1c32 <Pwm_Update+0x4e>
    1c30:	3c c1       	rjmp	.+632    	; 0x1eaa <Pwm_Update+0x2c6>
	{
	case PWM_CH1A:
		//calculate the top value to be loaded in ICR1
		gu8_PWM1_CH1A_Frequency = ((FREQUENCY)/(FREQFACTOR*gu8_PWM1_PreScaller*Frequncy));
    1c32:	80 91 86 00 	lds	r24, 0x0086
    1c36:	88 2f       	mov	r24, r24
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	88 0f       	add	r24, r24
    1c3c:	99 1f       	adc	r25, r25
    1c3e:	aa 27       	eor	r26, r26
    1c40:	97 fd       	sbrc	r25, 7
    1c42:	a0 95       	com	r26
    1c44:	ba 2f       	mov	r27, r26
    1c46:	2b 81       	ldd	r18, Y+3	; 0x03
    1c48:	3c 81       	ldd	r19, Y+4	; 0x04
    1c4a:	4d 81       	ldd	r20, Y+5	; 0x05
    1c4c:	5e 81       	ldd	r21, Y+6	; 0x06
    1c4e:	bc 01       	movw	r22, r24
    1c50:	cd 01       	movw	r24, r26
    1c52:	0e 94 c1 1c 	call	0x3982	; 0x3982 <__mulsi3>
    1c56:	9b 01       	movw	r18, r22
    1c58:	ac 01       	movw	r20, r24
    1c5a:	80 e0       	ldi	r24, 0x00	; 0
    1c5c:	94 e2       	ldi	r25, 0x24	; 36
    1c5e:	a4 ef       	ldi	r26, 0xF4	; 244
    1c60:	b0 e0       	ldi	r27, 0x00	; 0
    1c62:	bc 01       	movw	r22, r24
    1c64:	cd 01       	movw	r24, r26
    1c66:	0e 94 e0 1c 	call	0x39c0	; 0x39c0 <__udivmodsi4>
    1c6a:	da 01       	movw	r26, r20
    1c6c:	c9 01       	movw	r24, r18
    1c6e:	80 93 93 00 	sts	0x0093, r24
    1c72:	90 93 94 00 	sts	0x0094, r25
    1c76:	a0 93 95 00 	sts	0x0095, r26
    1c7a:	b0 93 96 00 	sts	0x0096, r27
		ICR1 = gu8_PWM1_CH1A_Frequency;
    1c7e:	e6 e4       	ldi	r30, 0x46	; 70
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	80 91 93 00 	lds	r24, 0x0093
    1c86:	90 91 94 00 	lds	r25, 0x0094
    1c8a:	a0 91 95 00 	lds	r26, 0x0095
    1c8e:	b0 91 96 00 	lds	r27, 0x0096
    1c92:	91 83       	std	Z+1, r25	; 0x01
    1c94:	80 83       	st	Z, r24
		//calculate the value to be loaded in OCR1A
		gu8_PWM1_CH1A_DutyCycle = ((Duty*gu8_PWM1_CH1A_Frequency)/DUTYFACTOR);
    1c96:	8a 81       	ldd	r24, Y+2	; 0x02
    1c98:	88 2f       	mov	r24, r24
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	a0 e0       	ldi	r26, 0x00	; 0
    1c9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ca0:	20 91 93 00 	lds	r18, 0x0093
    1ca4:	30 91 94 00 	lds	r19, 0x0094
    1ca8:	40 91 95 00 	lds	r20, 0x0095
    1cac:	50 91 96 00 	lds	r21, 0x0096
    1cb0:	bc 01       	movw	r22, r24
    1cb2:	cd 01       	movw	r24, r26
    1cb4:	0e 94 c1 1c 	call	0x3982	; 0x3982 <__mulsi3>
    1cb8:	dc 01       	movw	r26, r24
    1cba:	cb 01       	movw	r24, r22
    1cbc:	24 e6       	ldi	r18, 0x64	; 100
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	40 e0       	ldi	r20, 0x00	; 0
    1cc2:	50 e0       	ldi	r21, 0x00	; 0
    1cc4:	bc 01       	movw	r22, r24
    1cc6:	cd 01       	movw	r24, r26
    1cc8:	0e 94 e0 1c 	call	0x39c0	; 0x39c0 <__udivmodsi4>
    1ccc:	da 01       	movw	r26, r20
    1cce:	c9 01       	movw	r24, r18
    1cd0:	80 93 8b 00 	sts	0x008B, r24
    1cd4:	90 93 8c 00 	sts	0x008C, r25
    1cd8:	a0 93 8d 00 	sts	0x008D, r26
    1cdc:	b0 93 8e 00 	sts	0x008E, r27
		OCR1A = gu8_PWM1_CH1A_DutyCycle;
    1ce0:	ea e4       	ldi	r30, 0x4A	; 74
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	80 91 8b 00 	lds	r24, 0x008B
    1ce8:	90 91 8c 00 	lds	r25, 0x008C
    1cec:	a0 91 8d 00 	lds	r26, 0x008D
    1cf0:	b0 91 8e 00 	lds	r27, 0x008E
    1cf4:	91 83       	std	Z+1, r25	; 0x01
    1cf6:	80 83       	st	Z, r24
    1cf8:	db c0       	rjmp	.+438    	; 0x1eb0 <Pwm_Update+0x2cc>
		break;
	case PWM_CH1B:
		//calculate the top value to be loaded in ICR1
		gu8_PWM1_CH1B_Frequency = ((FREQUENCY)/(FREQFACTOR*gu8_PWM1_PreScaller*Frequncy));
    1cfa:	80 91 86 00 	lds	r24, 0x0086
    1cfe:	88 2f       	mov	r24, r24
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	88 0f       	add	r24, r24
    1d04:	99 1f       	adc	r25, r25
    1d06:	aa 27       	eor	r26, r26
    1d08:	97 fd       	sbrc	r25, 7
    1d0a:	a0 95       	com	r26
    1d0c:	ba 2f       	mov	r27, r26
    1d0e:	2b 81       	ldd	r18, Y+3	; 0x03
    1d10:	3c 81       	ldd	r19, Y+4	; 0x04
    1d12:	4d 81       	ldd	r20, Y+5	; 0x05
    1d14:	5e 81       	ldd	r21, Y+6	; 0x06
    1d16:	bc 01       	movw	r22, r24
    1d18:	cd 01       	movw	r24, r26
    1d1a:	0e 94 c1 1c 	call	0x3982	; 0x3982 <__mulsi3>
    1d1e:	9b 01       	movw	r18, r22
    1d20:	ac 01       	movw	r20, r24
    1d22:	80 e0       	ldi	r24, 0x00	; 0
    1d24:	94 e2       	ldi	r25, 0x24	; 36
    1d26:	a4 ef       	ldi	r26, 0xF4	; 244
    1d28:	b0 e0       	ldi	r27, 0x00	; 0
    1d2a:	bc 01       	movw	r22, r24
    1d2c:	cd 01       	movw	r24, r26
    1d2e:	0e 94 e0 1c 	call	0x39c0	; 0x39c0 <__udivmodsi4>
    1d32:	da 01       	movw	r26, r20
    1d34:	c9 01       	movw	r24, r18
    1d36:	80 93 97 00 	sts	0x0097, r24
    1d3a:	90 93 98 00 	sts	0x0098, r25
    1d3e:	a0 93 99 00 	sts	0x0099, r26
    1d42:	b0 93 9a 00 	sts	0x009A, r27
		ICR1 = gu8_PWM1_CH1B_Frequency;
    1d46:	e6 e4       	ldi	r30, 0x46	; 70
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	80 91 97 00 	lds	r24, 0x0097
    1d4e:	90 91 98 00 	lds	r25, 0x0098
    1d52:	a0 91 99 00 	lds	r26, 0x0099
    1d56:	b0 91 9a 00 	lds	r27, 0x009A
    1d5a:	91 83       	std	Z+1, r25	; 0x01
    1d5c:	80 83       	st	Z, r24
		//calculate the value to be loaded in OCR1A
		gu8_PWM1_CH1B_DutyCycle = ((Duty*gu8_PWM1_CH1B_Frequency)/DUTYFACTOR);
    1d5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d60:	88 2f       	mov	r24, r24
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	a0 e0       	ldi	r26, 0x00	; 0
    1d66:	b0 e0       	ldi	r27, 0x00	; 0
    1d68:	20 91 97 00 	lds	r18, 0x0097
    1d6c:	30 91 98 00 	lds	r19, 0x0098
    1d70:	40 91 99 00 	lds	r20, 0x0099
    1d74:	50 91 9a 00 	lds	r21, 0x009A
    1d78:	bc 01       	movw	r22, r24
    1d7a:	cd 01       	movw	r24, r26
    1d7c:	0e 94 c1 1c 	call	0x3982	; 0x3982 <__mulsi3>
    1d80:	dc 01       	movw	r26, r24
    1d82:	cb 01       	movw	r24, r22
    1d84:	24 e6       	ldi	r18, 0x64	; 100
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	40 e0       	ldi	r20, 0x00	; 0
    1d8a:	50 e0       	ldi	r21, 0x00	; 0
    1d8c:	bc 01       	movw	r22, r24
    1d8e:	cd 01       	movw	r24, r26
    1d90:	0e 94 e0 1c 	call	0x39c0	; 0x39c0 <__udivmodsi4>
    1d94:	da 01       	movw	r26, r20
    1d96:	c9 01       	movw	r24, r18
    1d98:	80 93 8f 00 	sts	0x008F, r24
    1d9c:	90 93 90 00 	sts	0x0090, r25
    1da0:	a0 93 91 00 	sts	0x0091, r26
    1da4:	b0 93 92 00 	sts	0x0092, r27
		OCR1B = gu8_PWM1_CH1B_DutyCycle;
    1da8:	e8 e4       	ldi	r30, 0x48	; 72
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	80 91 8f 00 	lds	r24, 0x008F
    1db0:	90 91 90 00 	lds	r25, 0x0090
    1db4:	a0 91 91 00 	lds	r26, 0x0091
    1db8:	b0 91 92 00 	lds	r27, 0x0092
    1dbc:	91 83       	std	Z+1, r25	; 0x01
    1dbe:	80 83       	st	Z, r24
    1dc0:	77 c0       	rjmp	.+238    	; 0x1eb0 <Pwm_Update+0x2cc>
		break;
	case PWM_CHAB:
		//calculate the top value to be loaded in ICR1
		gu8_PWM1_CHAB_Frequency = ((FREQUENCY)/(FREQFACTOR*gu8_PWM1_PreScaller_Value*Frequncy));
    1dc2:	80 91 87 00 	lds	r24, 0x0087
    1dc6:	90 91 88 00 	lds	r25, 0x0088
    1dca:	a0 91 89 00 	lds	r26, 0x0089
    1dce:	b0 91 8a 00 	lds	r27, 0x008A
    1dd2:	2b 81       	ldd	r18, Y+3	; 0x03
    1dd4:	3c 81       	ldd	r19, Y+4	; 0x04
    1dd6:	4d 81       	ldd	r20, Y+5	; 0x05
    1dd8:	5e 81       	ldd	r21, Y+6	; 0x06
    1dda:	bc 01       	movw	r22, r24
    1ddc:	cd 01       	movw	r24, r26
    1dde:	0e 94 c1 1c 	call	0x3982	; 0x3982 <__mulsi3>
    1de2:	dc 01       	movw	r26, r24
    1de4:	cb 01       	movw	r24, r22
    1de6:	9c 01       	movw	r18, r24
    1de8:	ad 01       	movw	r20, r26
    1dea:	22 0f       	add	r18, r18
    1dec:	33 1f       	adc	r19, r19
    1dee:	44 1f       	adc	r20, r20
    1df0:	55 1f       	adc	r21, r21
    1df2:	80 e0       	ldi	r24, 0x00	; 0
    1df4:	94 e2       	ldi	r25, 0x24	; 36
    1df6:	a4 ef       	ldi	r26, 0xF4	; 244
    1df8:	b0 e0       	ldi	r27, 0x00	; 0
    1dfa:	bc 01       	movw	r22, r24
    1dfc:	cd 01       	movw	r24, r26
    1dfe:	0e 94 e0 1c 	call	0x39c0	; 0x39c0 <__udivmodsi4>
    1e02:	da 01       	movw	r26, r20
    1e04:	c9 01       	movw	r24, r18
    1e06:	80 93 9f 00 	sts	0x009F, r24
    1e0a:	90 93 a0 00 	sts	0x00A0, r25
    1e0e:	a0 93 a1 00 	sts	0x00A1, r26
    1e12:	b0 93 a2 00 	sts	0x00A2, r27
		ICR1 =gu8_PWM1_CHAB_Frequency;
    1e16:	e6 e4       	ldi	r30, 0x46	; 70
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	80 91 9f 00 	lds	r24, 0x009F
    1e1e:	90 91 a0 00 	lds	r25, 0x00A0
    1e22:	a0 91 a1 00 	lds	r26, 0x00A1
    1e26:	b0 91 a2 00 	lds	r27, 0x00A2
    1e2a:	91 83       	std	Z+1, r25	; 0x01
    1e2c:	80 83       	st	Z, r24
		//calculate the value to be loaded in OCR1A
		gu8_PWM1_CHAB_DutyCycle = ((Duty*gu8_PWM1_CHAB_Frequency)/DUTYFACTOR);
    1e2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e30:	88 2f       	mov	r24, r24
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	a0 e0       	ldi	r26, 0x00	; 0
    1e36:	b0 e0       	ldi	r27, 0x00	; 0
    1e38:	20 91 9f 00 	lds	r18, 0x009F
    1e3c:	30 91 a0 00 	lds	r19, 0x00A0
    1e40:	40 91 a1 00 	lds	r20, 0x00A1
    1e44:	50 91 a2 00 	lds	r21, 0x00A2
    1e48:	bc 01       	movw	r22, r24
    1e4a:	cd 01       	movw	r24, r26
    1e4c:	0e 94 c1 1c 	call	0x3982	; 0x3982 <__mulsi3>
    1e50:	dc 01       	movw	r26, r24
    1e52:	cb 01       	movw	r24, r22
    1e54:	24 e6       	ldi	r18, 0x64	; 100
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	40 e0       	ldi	r20, 0x00	; 0
    1e5a:	50 e0       	ldi	r21, 0x00	; 0
    1e5c:	bc 01       	movw	r22, r24
    1e5e:	cd 01       	movw	r24, r26
    1e60:	0e 94 e0 1c 	call	0x39c0	; 0x39c0 <__udivmodsi4>
    1e64:	da 01       	movw	r26, r20
    1e66:	c9 01       	movw	r24, r18
    1e68:	80 93 9b 00 	sts	0x009B, r24
    1e6c:	90 93 9c 00 	sts	0x009C, r25
    1e70:	a0 93 9d 00 	sts	0x009D, r26
    1e74:	b0 93 9e 00 	sts	0x009E, r27
		OCR1A = gu8_PWM1_CHAB_DutyCycle;
    1e78:	ea e4       	ldi	r30, 0x4A	; 74
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	80 91 9b 00 	lds	r24, 0x009B
    1e80:	90 91 9c 00 	lds	r25, 0x009C
    1e84:	a0 91 9d 00 	lds	r26, 0x009D
    1e88:	b0 91 9e 00 	lds	r27, 0x009E
    1e8c:	91 83       	std	Z+1, r25	; 0x01
    1e8e:	80 83       	st	Z, r24
		OCR1B = gu8_PWM1_CHAB_DutyCycle;
    1e90:	e8 e4       	ldi	r30, 0x48	; 72
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	80 91 9b 00 	lds	r24, 0x009B
    1e98:	90 91 9c 00 	lds	r25, 0x009C
    1e9c:	a0 91 9d 00 	lds	r26, 0x009D
    1ea0:	b0 91 9e 00 	lds	r27, 0x009E
    1ea4:	91 83       	std	Z+1, r25	; 0x01
    1ea6:	80 83       	st	Z, r24
    1ea8:	03 c0       	rjmp	.+6      	; 0x1eb0 <Pwm_Update+0x2cc>
		break;
	default:
		return E_NOK;
    1eaa:	91 e0       	ldi	r25, 0x01	; 1
    1eac:	9f 83       	std	Y+7, r25	; 0x07
    1eae:	01 c0       	rjmp	.+2      	; 0x1eb2 <Pwm_Update+0x2ce>
		break;
	}

	return E_OK;
    1eb0:	1f 82       	std	Y+7, r1	; 0x07
    1eb2:	8f 81       	ldd	r24, Y+7	; 0x07
}
    1eb4:	29 96       	adiw	r28, 0x09	; 9
    1eb6:	0f b6       	in	r0, 0x3f	; 63
    1eb8:	f8 94       	cli
    1eba:	de bf       	out	0x3e, r29	; 62
    1ebc:	0f be       	out	0x3f, r0	; 63
    1ebe:	cd bf       	out	0x3d, r28	; 61
    1ec0:	cf 91       	pop	r28
    1ec2:	df 91       	pop	r29
    1ec4:	08 95       	ret

00001ec6 <Pwm_Stop>:
/*                                                                               */
/* Description: responsible of Stopping the PWM by clearing the prescaler		 */
/*				of the corresponding channel                                     */
/*********************************************************************************/
ERROR_STATUS Pwm_Stop(uint8 channel)
{
    1ec6:	df 93       	push	r29
    1ec8:	cf 93       	push	r28
    1eca:	0f 92       	push	r0
    1ecc:	cd b7       	in	r28, 0x3d	; 61
    1ece:	de b7       	in	r29, 0x3e	; 62
    1ed0:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B = OFF;
    1ed2:	ee e4       	ldi	r30, 0x4E	; 78
    1ed4:	f0 e0       	ldi	r31, 0x00	; 0
    1ed6:	10 82       	st	Z, r1
	return E_OK;
    1ed8:	80 e0       	ldi	r24, 0x00	; 0
}
    1eda:	0f 90       	pop	r0
    1edc:	cf 91       	pop	r28
    1ede:	df 91       	pop	r29
    1ee0:	08 95       	ret

00001ee2 <ExternInt_Init>:
 * Description: Initiate the required external interrupt configuration as it specify
 *	event of interrupt.
 *	Enable the required external interrupt from GICR but to allow the interrupt global interrupt must be set
 */
ERROR_STATUS ExternInt_Init(ExternInt_Cfg_s *ExternIntCfg)
{
    1ee2:	df 93       	push	r29
    1ee4:	cf 93       	push	r28
    1ee6:	00 d0       	rcall	.+0      	; 0x1ee8 <ExternInt_Init+0x6>
    1ee8:	0f 92       	push	r0
    1eea:	cd b7       	in	r28, 0x3d	; 61
    1eec:	de b7       	in	r29, 0x3e	; 62
    1eee:	9a 83       	std	Y+2, r25	; 0x02
    1ef0:	89 83       	std	Y+1, r24	; 0x01
		if(ExternIntCfg->ExternInt_No == EXTRN_INT_0 ||ExternIntCfg->ExternInt_No == EXTRN_INT_1)
    1ef2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ef4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ef6:	80 81       	ld	r24, Z
    1ef8:	88 23       	and	r24, r24
    1efa:	29 f0       	breq	.+10     	; 0x1f06 <ExternInt_Init+0x24>
    1efc:	e9 81       	ldd	r30, Y+1	; 0x01
    1efe:	fa 81       	ldd	r31, Y+2	; 0x02
    1f00:	80 81       	ld	r24, Z
    1f02:	81 30       	cpi	r24, 0x01	; 1
    1f04:	e1 f4       	brne	.+56     	; 0x1f3e <ExternInt_Init+0x5c>
	{
		MCUCR |= ((ExternIntCfg->ExternInt_Event)<<(2*ExternIntCfg->ExternInt_No));
    1f06:	a5 e5       	ldi	r26, 0x55	; 85
    1f08:	b0 e0       	ldi	r27, 0x00	; 0
    1f0a:	e5 e5       	ldi	r30, 0x55	; 85
    1f0c:	f0 e0       	ldi	r31, 0x00	; 0
    1f0e:	80 81       	ld	r24, Z
    1f10:	48 2f       	mov	r20, r24
    1f12:	e9 81       	ldd	r30, Y+1	; 0x01
    1f14:	fa 81       	ldd	r31, Y+2	; 0x02
    1f16:	81 81       	ldd	r24, Z+1	; 0x01
    1f18:	28 2f       	mov	r18, r24
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f1e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f20:	80 81       	ld	r24, Z
    1f22:	88 2f       	mov	r24, r24
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	88 0f       	add	r24, r24
    1f28:	99 1f       	adc	r25, r25
    1f2a:	b9 01       	movw	r22, r18
    1f2c:	02 c0       	rjmp	.+4      	; 0x1f32 <ExternInt_Init+0x50>
    1f2e:	66 0f       	add	r22, r22
    1f30:	77 1f       	adc	r23, r23
    1f32:	8a 95       	dec	r24
    1f34:	e2 f7       	brpl	.-8      	; 0x1f2e <ExternInt_Init+0x4c>
    1f36:	cb 01       	movw	r24, r22
    1f38:	84 2b       	or	r24, r20
    1f3a:	8c 93       	st	X, r24
    1f3c:	25 c0       	rjmp	.+74     	; 0x1f88 <ExternInt_Init+0xa6>

	}
	else if (ExternIntCfg->ExternInt_No == EXTRN_INT_2)
    1f3e:	e9 81       	ldd	r30, Y+1	; 0x01
    1f40:	fa 81       	ldd	r31, Y+2	; 0x02
    1f42:	80 81       	ld	r24, Z
    1f44:	82 30       	cpi	r24, 0x02	; 2
    1f46:	e9 f4       	brne	.+58     	; 0x1f82 <ExternInt_Init+0xa0>
	{


		if (ExternIntCfg->ExternInt_Event == FALLING_EDGE)
    1f48:	e9 81       	ldd	r30, Y+1	; 0x01
    1f4a:	fa 81       	ldd	r31, Y+2	; 0x02
    1f4c:	81 81       	ldd	r24, Z+1	; 0x01
    1f4e:	82 30       	cpi	r24, 0x02	; 2
    1f50:	41 f4       	brne	.+16     	; 0x1f62 <ExternInt_Init+0x80>
		{
			MCUCSR &= ~(1<<ISC2);
    1f52:	a4 e5       	ldi	r26, 0x54	; 84
    1f54:	b0 e0       	ldi	r27, 0x00	; 0
    1f56:	e4 e5       	ldi	r30, 0x54	; 84
    1f58:	f0 e0       	ldi	r31, 0x00	; 0
    1f5a:	80 81       	ld	r24, Z
    1f5c:	8f 7b       	andi	r24, 0xBF	; 191
    1f5e:	8c 93       	st	X, r24
    1f60:	13 c0       	rjmp	.+38     	; 0x1f88 <ExternInt_Init+0xa6>
		}
		else if(ExternIntCfg->ExternInt_Event == RISING_EDGE)
    1f62:	e9 81       	ldd	r30, Y+1	; 0x01
    1f64:	fa 81       	ldd	r31, Y+2	; 0x02
    1f66:	81 81       	ldd	r24, Z+1	; 0x01
    1f68:	83 30       	cpi	r24, 0x03	; 3
    1f6a:	41 f4       	brne	.+16     	; 0x1f7c <ExternInt_Init+0x9a>
		{

			MCUCSR |= (1<<ISC2);
    1f6c:	a4 e5       	ldi	r26, 0x54	; 84
    1f6e:	b0 e0       	ldi	r27, 0x00	; 0
    1f70:	e4 e5       	ldi	r30, 0x54	; 84
    1f72:	f0 e0       	ldi	r31, 0x00	; 0
    1f74:	80 81       	ld	r24, Z
    1f76:	80 64       	ori	r24, 0x40	; 64
    1f78:	8c 93       	st	X, r24
    1f7a:	06 c0       	rjmp	.+12     	; 0x1f88 <ExternInt_Init+0xa6>

		}
		else
		{
			return E_NOK;
    1f7c:	71 e0       	ldi	r23, 0x01	; 1
    1f7e:	7b 83       	std	Y+3, r23	; 0x03
    1f80:	14 c0       	rjmp	.+40     	; 0x1faa <ExternInt_Init+0xc8>
		}

	}
	else {
		return E_NOK;
    1f82:	81 e0       	ldi	r24, 0x01	; 1
    1f84:	8b 83       	std	Y+3, r24	; 0x03
    1f86:	11 c0       	rjmp	.+34     	; 0x1faa <ExternInt_Init+0xc8>
	}

	ExtInt_CBK_Ptr[ExternIntCfg->ExternInt_No] = ExternIntCfg->ExternInt_CBF_Ptr;
    1f88:	e9 81       	ldd	r30, Y+1	; 0x01
    1f8a:	fa 81       	ldd	r31, Y+2	; 0x02
    1f8c:	80 81       	ld	r24, Z
    1f8e:	88 2f       	mov	r24, r24
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	e9 81       	ldd	r30, Y+1	; 0x01
    1f94:	fa 81       	ldd	r31, Y+2	; 0x02
    1f96:	22 81       	ldd	r18, Z+2	; 0x02
    1f98:	33 81       	ldd	r19, Z+3	; 0x03
    1f9a:	88 0f       	add	r24, r24
    1f9c:	99 1f       	adc	r25, r25
    1f9e:	fc 01       	movw	r30, r24
    1fa0:	ed 55       	subi	r30, 0x5D	; 93
    1fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa4:	31 83       	std	Z+1, r19	; 0x01
    1fa6:	20 83       	st	Z, r18
	return E_OK;
    1fa8:	1b 82       	std	Y+3, r1	; 0x03
    1faa:	8b 81       	ldd	r24, Y+3	; 0x03

}
    1fac:	0f 90       	pop	r0
    1fae:	0f 90       	pop	r0
    1fb0:	0f 90       	pop	r0
    1fb2:	cf 91       	pop	r28
    1fb4:	df 91       	pop	r29
    1fb6:	08 95       	ret

00001fb8 <ExternInt_SetEvent>:
 * Return: ERROR_STATUS -> check if there any error occurs, would return E_NOK else it would return E_OK.
 * Description: function is used to set event of required external interrupt.
 * 				note: usually used to poll on the flag.
 */
ERROR_STATUS ExternInt_SetEvent(uint8 ExternInt_No,uint8 InterruptEvent)
{
    1fb8:	df 93       	push	r29
    1fba:	cf 93       	push	r28
    1fbc:	00 d0       	rcall	.+0      	; 0x1fbe <ExternInt_SetEvent+0x6>
    1fbe:	0f 92       	push	r0
    1fc0:	cd b7       	in	r28, 0x3d	; 61
    1fc2:	de b7       	in	r29, 0x3e	; 62
    1fc4:	89 83       	std	Y+1, r24	; 0x01
    1fc6:	6a 83       	std	Y+2, r22	; 0x02
	if(ExternInt_No == EXTRN_INT_0 ||ExternInt_No == EXTRN_INT_1)
    1fc8:	89 81       	ldd	r24, Y+1	; 0x01
    1fca:	88 23       	and	r24, r24
    1fcc:	19 f0       	breq	.+6      	; 0x1fd4 <ExternInt_SetEvent+0x1c>
    1fce:	89 81       	ldd	r24, Y+1	; 0x01
    1fd0:	81 30       	cpi	r24, 0x01	; 1
    1fd2:	c1 f4       	brne	.+48     	; 0x2004 <ExternInt_SetEvent+0x4c>
	{
		MCUCR |= ((InterruptEvent)<<(2*InterruptEvent));
    1fd4:	a5 e5       	ldi	r26, 0x55	; 85
    1fd6:	b0 e0       	ldi	r27, 0x00	; 0
    1fd8:	e5 e5       	ldi	r30, 0x55	; 85
    1fda:	f0 e0       	ldi	r31, 0x00	; 0
    1fdc:	80 81       	ld	r24, Z
    1fde:	48 2f       	mov	r20, r24
    1fe0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe2:	28 2f       	mov	r18, r24
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe8:	88 2f       	mov	r24, r24
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	88 0f       	add	r24, r24
    1fee:	99 1f       	adc	r25, r25
    1ff0:	b9 01       	movw	r22, r18
    1ff2:	02 c0       	rjmp	.+4      	; 0x1ff8 <ExternInt_SetEvent+0x40>
    1ff4:	66 0f       	add	r22, r22
    1ff6:	77 1f       	adc	r23, r23
    1ff8:	8a 95       	dec	r24
    1ffa:	e2 f7       	brpl	.-8      	; 0x1ff4 <ExternInt_SetEvent+0x3c>
    1ffc:	cb 01       	movw	r24, r22
    1ffe:	84 2b       	or	r24, r20
    2000:	8c 93       	st	X, r24
    2002:	1f c0       	rjmp	.+62     	; 0x2042 <ExternInt_SetEvent+0x8a>

	}
	else if (ExternInt_No == EXTRN_INT_2)
    2004:	89 81       	ldd	r24, Y+1	; 0x01
    2006:	82 30       	cpi	r24, 0x02	; 2
    2008:	c9 f4       	brne	.+50     	; 0x203c <ExternInt_SetEvent+0x84>
	{
		if (InterruptEvent == FALLING_EDGE)
    200a:	8a 81       	ldd	r24, Y+2	; 0x02
    200c:	82 30       	cpi	r24, 0x02	; 2
    200e:	41 f4       	brne	.+16     	; 0x2020 <ExternInt_SetEvent+0x68>
		{
			MCUCSR &= ~(1<<ISC2);
    2010:	a4 e5       	ldi	r26, 0x54	; 84
    2012:	b0 e0       	ldi	r27, 0x00	; 0
    2014:	e4 e5       	ldi	r30, 0x54	; 84
    2016:	f0 e0       	ldi	r31, 0x00	; 0
    2018:	80 81       	ld	r24, Z
    201a:	8f 7b       	andi	r24, 0xBF	; 191
    201c:	8c 93       	st	X, r24
    201e:	11 c0       	rjmp	.+34     	; 0x2042 <ExternInt_SetEvent+0x8a>
		}
		else if(InterruptEvent == RISING_EDGE)
    2020:	8a 81       	ldd	r24, Y+2	; 0x02
    2022:	83 30       	cpi	r24, 0x03	; 3
    2024:	41 f4       	brne	.+16     	; 0x2036 <ExternInt_SetEvent+0x7e>
		{
			MCUCSR |= (1<<ISC2);
    2026:	a4 e5       	ldi	r26, 0x54	; 84
    2028:	b0 e0       	ldi	r27, 0x00	; 0
    202a:	e4 e5       	ldi	r30, 0x54	; 84
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	80 81       	ld	r24, Z
    2030:	80 64       	ori	r24, 0x40	; 64
    2032:	8c 93       	st	X, r24
    2034:	06 c0       	rjmp	.+12     	; 0x2042 <ExternInt_SetEvent+0x8a>

		}
		else
		{
			return E_NOK;
    2036:	71 e0       	ldi	r23, 0x01	; 1
    2038:	7b 83       	std	Y+3, r23	; 0x03
    203a:	04 c0       	rjmp	.+8      	; 0x2044 <ExternInt_SetEvent+0x8c>
		}

	}
	else {
		return E_NOK;
    203c:	81 e0       	ldi	r24, 0x01	; 1
    203e:	8b 83       	std	Y+3, r24	; 0x03
    2040:	01 c0       	rjmp	.+2      	; 0x2044 <ExternInt_SetEvent+0x8c>
	}
	return E_OK;
    2042:	1b 82       	std	Y+3, r1	; 0x03
    2044:	8b 81       	ldd	r24, Y+3	; 0x03


}
    2046:	0f 90       	pop	r0
    2048:	0f 90       	pop	r0
    204a:	0f 90       	pop	r0
    204c:	cf 91       	pop	r28
    204e:	df 91       	pop	r29
    2050:	08 95       	ret

00002052 <ExternInt_GetStatus>:
 * Return: ERROR_STATUS -> check if there any error occurs, would return E_NOK else it would return E_OK.
 * Description: function is used to get flag of required interrupt status.
 * 				note: usually used to poll on the flag.
 */
ERROR_STATUS ExternInt_GetStatus(uint8 ExternInt_No,uint8 *Status)
{
    2052:	df 93       	push	r29
    2054:	cf 93       	push	r28
    2056:	00 d0       	rcall	.+0      	; 0x2058 <ExternInt_GetStatus+0x6>
    2058:	00 d0       	rcall	.+0      	; 0x205a <ExternInt_GetStatus+0x8>
    205a:	cd b7       	in	r28, 0x3d	; 61
    205c:	de b7       	in	r29, 0x3e	; 62
    205e:	89 83       	std	Y+1, r24	; 0x01
    2060:	7b 83       	std	Y+3, r23	; 0x03
    2062:	6a 83       	std	Y+2, r22	; 0x02
	if(ExternInt_No == EXTRN_INT_0)
    2064:	89 81       	ldd	r24, Y+1	; 0x01
    2066:	88 23       	and	r24, r24
    2068:	61 f4       	brne	.+24     	; 0x2082 <ExternInt_GetStatus+0x30>
	{
		 *Status = ((GIFR >> INT0)&1);
    206a:	ea e5       	ldi	r30, 0x5A	; 90
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	80 81       	ld	r24, Z
    2070:	82 95       	swap	r24
    2072:	86 95       	lsr	r24
    2074:	86 95       	lsr	r24
    2076:	83 70       	andi	r24, 0x03	; 3
    2078:	81 70       	andi	r24, 0x01	; 1
    207a:	ea 81       	ldd	r30, Y+2	; 0x02
    207c:	fb 81       	ldd	r31, Y+3	; 0x03
    207e:	80 83       	st	Z, r24
    2080:	1e c0       	rjmp	.+60     	; 0x20be <ExternInt_GetStatus+0x6c>


	}
	else if(ExternInt_No == EXTRN_INT_1)
    2082:	89 81       	ldd	r24, Y+1	; 0x01
    2084:	81 30       	cpi	r24, 0x01	; 1
    2086:	51 f4       	brne	.+20     	; 0x209c <ExternInt_GetStatus+0x4a>
	{
		 *Status = ((GIFR >> INT1)&1);
    2088:	ea e5       	ldi	r30, 0x5A	; 90
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	80 81       	ld	r24, Z
    208e:	88 1f       	adc	r24, r24
    2090:	88 27       	eor	r24, r24
    2092:	88 1f       	adc	r24, r24
    2094:	ea 81       	ldd	r30, Y+2	; 0x02
    2096:	fb 81       	ldd	r31, Y+3	; 0x03
    2098:	80 83       	st	Z, r24
    209a:	11 c0       	rjmp	.+34     	; 0x20be <ExternInt_GetStatus+0x6c>


	}
	else if (ExternInt_No == EXTRN_INT_2)
    209c:	89 81       	ldd	r24, Y+1	; 0x01
    209e:	82 30       	cpi	r24, 0x02	; 2
    20a0:	59 f4       	brne	.+22     	; 0x20b8 <ExternInt_GetStatus+0x66>
	{
		 *Status = ((GIFR >> INT2)&1);
    20a2:	ea e5       	ldi	r30, 0x5A	; 90
    20a4:	f0 e0       	ldi	r31, 0x00	; 0
    20a6:	80 81       	ld	r24, Z
    20a8:	82 95       	swap	r24
    20aa:	86 95       	lsr	r24
    20ac:	87 70       	andi	r24, 0x07	; 7
    20ae:	81 70       	andi	r24, 0x01	; 1
    20b0:	ea 81       	ldd	r30, Y+2	; 0x02
    20b2:	fb 81       	ldd	r31, Y+3	; 0x03
    20b4:	80 83       	st	Z, r24
    20b6:	03 c0       	rjmp	.+6      	; 0x20be <ExternInt_GetStatus+0x6c>

	}
	else
	{
		return E_NOK;
    20b8:	81 e0       	ldi	r24, 0x01	; 1
    20ba:	8c 83       	std	Y+4, r24	; 0x04
    20bc:	01 c0       	rjmp	.+2      	; 0x20c0 <ExternInt_GetStatus+0x6e>
	}
	return E_OK;
    20be:	1c 82       	std	Y+4, r1	; 0x04
    20c0:	8c 81       	ldd	r24, Y+4	; 0x04

}
    20c2:	0f 90       	pop	r0
    20c4:	0f 90       	pop	r0
    20c6:	0f 90       	pop	r0
    20c8:	0f 90       	pop	r0
    20ca:	cf 91       	pop	r28
    20cc:	df 91       	pop	r29
    20ce:	08 95       	ret

000020d0 <ExternInt_Enable>:
 * In Out:
 * Return: ERROR_STATUS -> check if there any error occurs, would return E_NOK else it would return E_OK.
 * Description: Disable the required external interrupt.
 */
ERROR_STATUS ExternInt_Enable(uint8 ExternInt_No)
{
    20d0:	df 93       	push	r29
    20d2:	cf 93       	push	r28
    20d4:	00 d0       	rcall	.+0      	; 0x20d6 <ExternInt_Enable+0x6>
    20d6:	cd b7       	in	r28, 0x3d	; 61
    20d8:	de b7       	in	r29, 0x3e	; 62
    20da:	89 83       	std	Y+1, r24	; 0x01
	if(ExternInt_No == EXTRN_INT_0)
    20dc:	89 81       	ldd	r24, Y+1	; 0x01
    20de:	88 23       	and	r24, r24
    20e0:	41 f4       	brne	.+16     	; 0x20f2 <ExternInt_Enable+0x22>
	{
		GICR |=(1<<INT0);
    20e2:	ab e5       	ldi	r26, 0x5B	; 91
    20e4:	b0 e0       	ldi	r27, 0x00	; 0
    20e6:	eb e5       	ldi	r30, 0x5B	; 91
    20e8:	f0 e0       	ldi	r31, 0x00	; 0
    20ea:	80 81       	ld	r24, Z
    20ec:	80 64       	ori	r24, 0x40	; 64
    20ee:	8c 93       	st	X, r24
    20f0:	19 c0       	rjmp	.+50     	; 0x2124 <ExternInt_Enable+0x54>


	}
	else if(ExternInt_No == EXTRN_INT_1)
    20f2:	89 81       	ldd	r24, Y+1	; 0x01
    20f4:	81 30       	cpi	r24, 0x01	; 1
    20f6:	41 f4       	brne	.+16     	; 0x2108 <ExternInt_Enable+0x38>
	{
		GICR |=(1<<INT1);
    20f8:	ab e5       	ldi	r26, 0x5B	; 91
    20fa:	b0 e0       	ldi	r27, 0x00	; 0
    20fc:	eb e5       	ldi	r30, 0x5B	; 91
    20fe:	f0 e0       	ldi	r31, 0x00	; 0
    2100:	80 81       	ld	r24, Z
    2102:	80 68       	ori	r24, 0x80	; 128
    2104:	8c 93       	st	X, r24
    2106:	0e c0       	rjmp	.+28     	; 0x2124 <ExternInt_Enable+0x54>


	}
	else if (ExternInt_No == EXTRN_INT_2)
    2108:	89 81       	ldd	r24, Y+1	; 0x01
    210a:	82 30       	cpi	r24, 0x02	; 2
    210c:	41 f4       	brne	.+16     	; 0x211e <ExternInt_Enable+0x4e>
	{
		GICR |=(1<<INT2);
    210e:	ab e5       	ldi	r26, 0x5B	; 91
    2110:	b0 e0       	ldi	r27, 0x00	; 0
    2112:	eb e5       	ldi	r30, 0x5B	; 91
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	80 81       	ld	r24, Z
    2118:	80 62       	ori	r24, 0x20	; 32
    211a:	8c 93       	st	X, r24
    211c:	03 c0       	rjmp	.+6      	; 0x2124 <ExternInt_Enable+0x54>

	}
	else
	{
		return E_NOK;
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	8a 83       	std	Y+2, r24	; 0x02
    2122:	01 c0       	rjmp	.+2      	; 0x2126 <ExternInt_Enable+0x56>
	}
	return E_OK;
    2124:	1a 82       	std	Y+2, r1	; 0x02
    2126:	8a 81       	ldd	r24, Y+2	; 0x02

}
    2128:	0f 90       	pop	r0
    212a:	0f 90       	pop	r0
    212c:	cf 91       	pop	r28
    212e:	df 91       	pop	r29
    2130:	08 95       	ret

00002132 <ExternInt_Disable>:
 * In Out:
 * Return: ERROR_STATUS -> check if there any error occurs, would return E_NOK else it would return E_OK.
 * Description: Disable the required external interrupt.
 */
ERROR_STATUS ExternInt_Disable(uint8 ExternInt_No)
{
    2132:	df 93       	push	r29
    2134:	cf 93       	push	r28
    2136:	00 d0       	rcall	.+0      	; 0x2138 <ExternInt_Disable+0x6>
    2138:	cd b7       	in	r28, 0x3d	; 61
    213a:	de b7       	in	r29, 0x3e	; 62
    213c:	89 83       	std	Y+1, r24	; 0x01
	if(ExternInt_No == EXTRN_INT_0)
    213e:	89 81       	ldd	r24, Y+1	; 0x01
    2140:	88 23       	and	r24, r24
    2142:	41 f4       	brne	.+16     	; 0x2154 <ExternInt_Disable+0x22>
	{
		GICR &= ~(1<<INT0);
    2144:	ab e5       	ldi	r26, 0x5B	; 91
    2146:	b0 e0       	ldi	r27, 0x00	; 0
    2148:	eb e5       	ldi	r30, 0x5B	; 91
    214a:	f0 e0       	ldi	r31, 0x00	; 0
    214c:	80 81       	ld	r24, Z
    214e:	8f 7b       	andi	r24, 0xBF	; 191
    2150:	8c 93       	st	X, r24
    2152:	19 c0       	rjmp	.+50     	; 0x2186 <ExternInt_Disable+0x54>


	}
	else if(ExternInt_No == EXTRN_INT_1)
    2154:	89 81       	ldd	r24, Y+1	; 0x01
    2156:	81 30       	cpi	r24, 0x01	; 1
    2158:	41 f4       	brne	.+16     	; 0x216a <ExternInt_Disable+0x38>
	{
		GICR &= ~(1<<INT1);
    215a:	ab e5       	ldi	r26, 0x5B	; 91
    215c:	b0 e0       	ldi	r27, 0x00	; 0
    215e:	eb e5       	ldi	r30, 0x5B	; 91
    2160:	f0 e0       	ldi	r31, 0x00	; 0
    2162:	80 81       	ld	r24, Z
    2164:	8f 77       	andi	r24, 0x7F	; 127
    2166:	8c 93       	st	X, r24
    2168:	0e c0       	rjmp	.+28     	; 0x2186 <ExternInt_Disable+0x54>


	}
	else if (ExternInt_No == EXTRN_INT_2)
    216a:	89 81       	ldd	r24, Y+1	; 0x01
    216c:	82 30       	cpi	r24, 0x02	; 2
    216e:	41 f4       	brne	.+16     	; 0x2180 <ExternInt_Disable+0x4e>
	{
		GICR &= ~(1<<INT2);
    2170:	ab e5       	ldi	r26, 0x5B	; 91
    2172:	b0 e0       	ldi	r27, 0x00	; 0
    2174:	eb e5       	ldi	r30, 0x5B	; 91
    2176:	f0 e0       	ldi	r31, 0x00	; 0
    2178:	80 81       	ld	r24, Z
    217a:	8f 7d       	andi	r24, 0xDF	; 223
    217c:	8c 93       	st	X, r24
    217e:	03 c0       	rjmp	.+6      	; 0x2186 <ExternInt_Disable+0x54>

	}
	else
	{
		return E_NOK;
    2180:	81 e0       	ldi	r24, 0x01	; 1
    2182:	8a 83       	std	Y+2, r24	; 0x02
    2184:	01 c0       	rjmp	.+2      	; 0x2188 <ExternInt_Disable+0x56>
	}
	return E_OK;
    2186:	1a 82       	std	Y+2, r1	; 0x02
    2188:	8a 81       	ldd	r24, Y+2	; 0x02
}
    218a:	0f 90       	pop	r0
    218c:	0f 90       	pop	r0
    218e:	cf 91       	pop	r28
    2190:	df 91       	pop	r29
    2192:	08 95       	ret

00002194 <__vector_1>:
ISR(INT0_vect)
{
    2194:	1f 92       	push	r1
    2196:	0f 92       	push	r0
    2198:	0f b6       	in	r0, 0x3f	; 63
    219a:	0f 92       	push	r0
    219c:	11 24       	eor	r1, r1
    219e:	2f 93       	push	r18
    21a0:	3f 93       	push	r19
    21a2:	4f 93       	push	r20
    21a4:	5f 93       	push	r21
    21a6:	6f 93       	push	r22
    21a8:	7f 93       	push	r23
    21aa:	8f 93       	push	r24
    21ac:	9f 93       	push	r25
    21ae:	af 93       	push	r26
    21b0:	bf 93       	push	r27
    21b2:	ef 93       	push	r30
    21b4:	ff 93       	push	r31
    21b6:	df 93       	push	r29
    21b8:	cf 93       	push	r28
    21ba:	cd b7       	in	r28, 0x3d	; 61
    21bc:	de b7       	in	r29, 0x3e	; 62
	if(NULL!= ExtInt_CBK_Ptr[EXTRN_INT_0])
    21be:	80 91 a3 00 	lds	r24, 0x00A3
    21c2:	90 91 a4 00 	lds	r25, 0x00A4
    21c6:	00 97       	sbiw	r24, 0x00	; 0
    21c8:	29 f0       	breq	.+10     	; 0x21d4 <__vector_1+0x40>
	{
		ExtInt_CBK_Ptr[EXTRN_INT_0]();
    21ca:	e0 91 a3 00 	lds	r30, 0x00A3
    21ce:	f0 91 a4 00 	lds	r31, 0x00A4
    21d2:	09 95       	icall

	}

}
    21d4:	cf 91       	pop	r28
    21d6:	df 91       	pop	r29
    21d8:	ff 91       	pop	r31
    21da:	ef 91       	pop	r30
    21dc:	bf 91       	pop	r27
    21de:	af 91       	pop	r26
    21e0:	9f 91       	pop	r25
    21e2:	8f 91       	pop	r24
    21e4:	7f 91       	pop	r23
    21e6:	6f 91       	pop	r22
    21e8:	5f 91       	pop	r21
    21ea:	4f 91       	pop	r20
    21ec:	3f 91       	pop	r19
    21ee:	2f 91       	pop	r18
    21f0:	0f 90       	pop	r0
    21f2:	0f be       	out	0x3f, r0	; 63
    21f4:	0f 90       	pop	r0
    21f6:	1f 90       	pop	r1
    21f8:	18 95       	reti

000021fa <__vector_2>:
ISR(INT1_vect)
{
    21fa:	1f 92       	push	r1
    21fc:	0f 92       	push	r0
    21fe:	0f b6       	in	r0, 0x3f	; 63
    2200:	0f 92       	push	r0
    2202:	11 24       	eor	r1, r1
    2204:	2f 93       	push	r18
    2206:	3f 93       	push	r19
    2208:	4f 93       	push	r20
    220a:	5f 93       	push	r21
    220c:	6f 93       	push	r22
    220e:	7f 93       	push	r23
    2210:	8f 93       	push	r24
    2212:	9f 93       	push	r25
    2214:	af 93       	push	r26
    2216:	bf 93       	push	r27
    2218:	ef 93       	push	r30
    221a:	ff 93       	push	r31
    221c:	df 93       	push	r29
    221e:	cf 93       	push	r28
    2220:	cd b7       	in	r28, 0x3d	; 61
    2222:	de b7       	in	r29, 0x3e	; 62

	if(NULL!= ExtInt_CBK_Ptr[EXTRN_INT_1])
    2224:	80 91 a5 00 	lds	r24, 0x00A5
    2228:	90 91 a6 00 	lds	r25, 0x00A6
    222c:	00 97       	sbiw	r24, 0x00	; 0
    222e:	29 f0       	breq	.+10     	; 0x223a <__vector_2+0x40>
	{
		ExtInt_CBK_Ptr[EXTRN_INT_1]();
    2230:	e0 91 a5 00 	lds	r30, 0x00A5
    2234:	f0 91 a6 00 	lds	r31, 0x00A6
    2238:	09 95       	icall

	}

}
    223a:	cf 91       	pop	r28
    223c:	df 91       	pop	r29
    223e:	ff 91       	pop	r31
    2240:	ef 91       	pop	r30
    2242:	bf 91       	pop	r27
    2244:	af 91       	pop	r26
    2246:	9f 91       	pop	r25
    2248:	8f 91       	pop	r24
    224a:	7f 91       	pop	r23
    224c:	6f 91       	pop	r22
    224e:	5f 91       	pop	r21
    2250:	4f 91       	pop	r20
    2252:	3f 91       	pop	r19
    2254:	2f 91       	pop	r18
    2256:	0f 90       	pop	r0
    2258:	0f be       	out	0x3f, r0	; 63
    225a:	0f 90       	pop	r0
    225c:	1f 90       	pop	r1
    225e:	18 95       	reti

00002260 <__vector_3>:
ISR(INT2_vect)
{
    2260:	1f 92       	push	r1
    2262:	0f 92       	push	r0
    2264:	0f b6       	in	r0, 0x3f	; 63
    2266:	0f 92       	push	r0
    2268:	11 24       	eor	r1, r1
    226a:	2f 93       	push	r18
    226c:	3f 93       	push	r19
    226e:	4f 93       	push	r20
    2270:	5f 93       	push	r21
    2272:	6f 93       	push	r22
    2274:	7f 93       	push	r23
    2276:	8f 93       	push	r24
    2278:	9f 93       	push	r25
    227a:	af 93       	push	r26
    227c:	bf 93       	push	r27
    227e:	ef 93       	push	r30
    2280:	ff 93       	push	r31
    2282:	df 93       	push	r29
    2284:	cf 93       	push	r28
    2286:	cd b7       	in	r28, 0x3d	; 61
    2288:	de b7       	in	r29, 0x3e	; 62


	if(NULL!= ExtInt_CBK_Ptr[EXTRN_INT_2])
    228a:	80 91 a7 00 	lds	r24, 0x00A7
    228e:	90 91 a8 00 	lds	r25, 0x00A8
    2292:	00 97       	sbiw	r24, 0x00	; 0
    2294:	29 f0       	breq	.+10     	; 0x22a0 <__vector_3+0x40>
	{
		ExtInt_CBK_Ptr[EXTRN_INT_2]();
    2296:	e0 91 a7 00 	lds	r30, 0x00A7
    229a:	f0 91 a8 00 	lds	r31, 0x00A8
    229e:	09 95       	icall

	}

}
    22a0:	cf 91       	pop	r28
    22a2:	df 91       	pop	r29
    22a4:	ff 91       	pop	r31
    22a6:	ef 91       	pop	r30
    22a8:	bf 91       	pop	r27
    22aa:	af 91       	pop	r26
    22ac:	9f 91       	pop	r25
    22ae:	8f 91       	pop	r24
    22b0:	7f 91       	pop	r23
    22b2:	6f 91       	pop	r22
    22b4:	5f 91       	pop	r21
    22b6:	4f 91       	pop	r20
    22b8:	3f 91       	pop	r19
    22ba:	2f 91       	pop	r18
    22bc:	0f 90       	pop	r0
    22be:	0f be       	out	0x3f, r0	; 63
    22c0:	0f 90       	pop	r0
    22c2:	1f 90       	pop	r1
    22c4:	18 95       	reti

000022c6 <DIO_init>:
 *In/Out:
 *Description: This function can set the direction of a full port, a nibble
 * 			  or even one pin.
 */
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
    22c6:	df 93       	push	r29
    22c8:	cf 93       	push	r28
    22ca:	cd b7       	in	r28, 0x3d	; 61
    22cc:	de b7       	in	r29, 0x3e	; 62
    22ce:	27 97       	sbiw	r28, 0x07	; 7
    22d0:	0f b6       	in	r0, 0x3f	; 63
    22d2:	f8 94       	cli
    22d4:	de bf       	out	0x3e, r29	; 62
    22d6:	0f be       	out	0x3f, r0	; 63
    22d8:	cd bf       	out	0x3d, r28	; 61
    22da:	9a 83       	std	Y+2, r25	; 0x02
    22dc:	89 83       	std	Y+1, r24	; 0x01
	if(DIO_info -> dir == HIGH){
    22de:	e9 81       	ldd	r30, Y+1	; 0x01
    22e0:	fa 81       	ldd	r31, Y+2	; 0x02
    22e2:	82 81       	ldd	r24, Z+2	; 0x02
    22e4:	8f 3f       	cpi	r24, 0xFF	; 255
    22e6:	09 f0       	breq	.+2      	; 0x22ea <DIO_init+0x24>
    22e8:	50 c0       	rjmp	.+160    	; 0x238a <DIO_init+0xc4>
		switch(DIO_info -> GPIO){
    22ea:	e9 81       	ldd	r30, Y+1	; 0x01
    22ec:	fa 81       	ldd	r31, Y+2	; 0x02
    22ee:	80 81       	ld	r24, Z
    22f0:	28 2f       	mov	r18, r24
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	3f 83       	std	Y+7, r19	; 0x07
    22f6:	2e 83       	std	Y+6, r18	; 0x06
    22f8:	8e 81       	ldd	r24, Y+6	; 0x06
    22fa:	9f 81       	ldd	r25, Y+7	; 0x07
    22fc:	81 30       	cpi	r24, 0x01	; 1
    22fe:	91 05       	cpc	r25, r1
    2300:	01 f1       	breq	.+64     	; 0x2342 <DIO_init+0x7c>
    2302:	2e 81       	ldd	r18, Y+6	; 0x06
    2304:	3f 81       	ldd	r19, Y+7	; 0x07
    2306:	22 30       	cpi	r18, 0x02	; 2
    2308:	31 05       	cpc	r19, r1
    230a:	2c f4       	brge	.+10     	; 0x2316 <DIO_init+0x50>
    230c:	8e 81       	ldd	r24, Y+6	; 0x06
    230e:	9f 81       	ldd	r25, Y+7	; 0x07
    2310:	00 97       	sbiw	r24, 0x00	; 0
    2312:	61 f0       	breq	.+24     	; 0x232c <DIO_init+0x66>
    2314:	37 c0       	rjmp	.+110    	; 0x2384 <DIO_init+0xbe>
    2316:	2e 81       	ldd	r18, Y+6	; 0x06
    2318:	3f 81       	ldd	r19, Y+7	; 0x07
    231a:	22 30       	cpi	r18, 0x02	; 2
    231c:	31 05       	cpc	r19, r1
    231e:	e1 f0       	breq	.+56     	; 0x2358 <DIO_init+0x92>
    2320:	8e 81       	ldd	r24, Y+6	; 0x06
    2322:	9f 81       	ldd	r25, Y+7	; 0x07
    2324:	83 30       	cpi	r24, 0x03	; 3
    2326:	91 05       	cpc	r25, r1
    2328:	11 f1       	breq	.+68     	; 0x236e <DIO_init+0xa8>
    232a:	2c c0       	rjmp	.+88     	; 0x2384 <DIO_init+0xbe>
		case GPIOA:
			PORTA_DIR |= (DIO_info -> pins);
    232c:	aa e3       	ldi	r26, 0x3A	; 58
    232e:	b0 e0       	ldi	r27, 0x00	; 0
    2330:	ea e3       	ldi	r30, 0x3A	; 58
    2332:	f0 e0       	ldi	r31, 0x00	; 0
    2334:	90 81       	ld	r25, Z
    2336:	e9 81       	ldd	r30, Y+1	; 0x01
    2338:	fa 81       	ldd	r31, Y+2	; 0x02
    233a:	81 81       	ldd	r24, Z+1	; 0x01
    233c:	89 2b       	or	r24, r25
    233e:	8c 93       	st	X, r24
    2340:	82 c0       	rjmp	.+260    	; 0x2446 <DIO_init+0x180>
			break;
		case GPIOB:
			PORTB_DIR |= (DIO_info -> pins);
    2342:	a7 e3       	ldi	r26, 0x37	; 55
    2344:	b0 e0       	ldi	r27, 0x00	; 0
    2346:	e7 e3       	ldi	r30, 0x37	; 55
    2348:	f0 e0       	ldi	r31, 0x00	; 0
    234a:	90 81       	ld	r25, Z
    234c:	e9 81       	ldd	r30, Y+1	; 0x01
    234e:	fa 81       	ldd	r31, Y+2	; 0x02
    2350:	81 81       	ldd	r24, Z+1	; 0x01
    2352:	89 2b       	or	r24, r25
    2354:	8c 93       	st	X, r24
    2356:	77 c0       	rjmp	.+238    	; 0x2446 <DIO_init+0x180>
			break;
		case GPIOC:
			PORTC_DIR |= (DIO_info -> pins);
    2358:	a4 e3       	ldi	r26, 0x34	; 52
    235a:	b0 e0       	ldi	r27, 0x00	; 0
    235c:	e4 e3       	ldi	r30, 0x34	; 52
    235e:	f0 e0       	ldi	r31, 0x00	; 0
    2360:	90 81       	ld	r25, Z
    2362:	e9 81       	ldd	r30, Y+1	; 0x01
    2364:	fa 81       	ldd	r31, Y+2	; 0x02
    2366:	81 81       	ldd	r24, Z+1	; 0x01
    2368:	89 2b       	or	r24, r25
    236a:	8c 93       	st	X, r24
    236c:	6c c0       	rjmp	.+216    	; 0x2446 <DIO_init+0x180>
			break;
		case GPIOD:
			PORTD_DIR |= (DIO_info -> pins);
    236e:	a1 e3       	ldi	r26, 0x31	; 49
    2370:	b0 e0       	ldi	r27, 0x00	; 0
    2372:	e1 e3       	ldi	r30, 0x31	; 49
    2374:	f0 e0       	ldi	r31, 0x00	; 0
    2376:	90 81       	ld	r25, Z
    2378:	e9 81       	ldd	r30, Y+1	; 0x01
    237a:	fa 81       	ldd	r31, Y+2	; 0x02
    237c:	81 81       	ldd	r24, Z+1	; 0x01
    237e:	89 2b       	or	r24, r25
    2380:	8c 93       	st	X, r24
    2382:	61 c0       	rjmp	.+194    	; 0x2446 <DIO_init+0x180>
			break;
		default:
			return E_NOK;
    2384:	91 e0       	ldi	r25, 0x01	; 1
    2386:	9d 83       	std	Y+5, r25	; 0x05
    2388:	5f c0       	rjmp	.+190    	; 0x2448 <DIO_init+0x182>
			break;
		}
	} else if(DIO_info -> dir == LOW){
    238a:	e9 81       	ldd	r30, Y+1	; 0x01
    238c:	fa 81       	ldd	r31, Y+2	; 0x02
    238e:	82 81       	ldd	r24, Z+2	; 0x02
    2390:	88 23       	and	r24, r24
    2392:	09 f0       	breq	.+2      	; 0x2396 <DIO_init+0xd0>
    2394:	58 c0       	rjmp	.+176    	; 0x2446 <DIO_init+0x180>
		switch(DIO_info -> GPIO){
    2396:	e9 81       	ldd	r30, Y+1	; 0x01
    2398:	fa 81       	ldd	r31, Y+2	; 0x02
    239a:	80 81       	ld	r24, Z
    239c:	28 2f       	mov	r18, r24
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	3c 83       	std	Y+4, r19	; 0x04
    23a2:	2b 83       	std	Y+3, r18	; 0x03
    23a4:	8b 81       	ldd	r24, Y+3	; 0x03
    23a6:	9c 81       	ldd	r25, Y+4	; 0x04
    23a8:	81 30       	cpi	r24, 0x01	; 1
    23aa:	91 05       	cpc	r25, r1
    23ac:	11 f1       	breq	.+68     	; 0x23f2 <DIO_init+0x12c>
    23ae:	2b 81       	ldd	r18, Y+3	; 0x03
    23b0:	3c 81       	ldd	r19, Y+4	; 0x04
    23b2:	22 30       	cpi	r18, 0x02	; 2
    23b4:	31 05       	cpc	r19, r1
    23b6:	2c f4       	brge	.+10     	; 0x23c2 <DIO_init+0xfc>
    23b8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ba:	9c 81       	ldd	r25, Y+4	; 0x04
    23bc:	00 97       	sbiw	r24, 0x00	; 0
    23be:	61 f0       	breq	.+24     	; 0x23d8 <DIO_init+0x112>
    23c0:	3f c0       	rjmp	.+126    	; 0x2440 <DIO_init+0x17a>
    23c2:	2b 81       	ldd	r18, Y+3	; 0x03
    23c4:	3c 81       	ldd	r19, Y+4	; 0x04
    23c6:	22 30       	cpi	r18, 0x02	; 2
    23c8:	31 05       	cpc	r19, r1
    23ca:	01 f1       	breq	.+64     	; 0x240c <DIO_init+0x146>
    23cc:	8b 81       	ldd	r24, Y+3	; 0x03
    23ce:	9c 81       	ldd	r25, Y+4	; 0x04
    23d0:	83 30       	cpi	r24, 0x03	; 3
    23d2:	91 05       	cpc	r25, r1
    23d4:	41 f1       	breq	.+80     	; 0x2426 <DIO_init+0x160>
    23d6:	34 c0       	rjmp	.+104    	; 0x2440 <DIO_init+0x17a>
		case GPIOA:
			PORTA_DIR &= ~(DIO_info -> pins);
    23d8:	aa e3       	ldi	r26, 0x3A	; 58
    23da:	b0 e0       	ldi	r27, 0x00	; 0
    23dc:	ea e3       	ldi	r30, 0x3A	; 58
    23de:	f0 e0       	ldi	r31, 0x00	; 0
    23e0:	80 81       	ld	r24, Z
    23e2:	98 2f       	mov	r25, r24
    23e4:	e9 81       	ldd	r30, Y+1	; 0x01
    23e6:	fa 81       	ldd	r31, Y+2	; 0x02
    23e8:	81 81       	ldd	r24, Z+1	; 0x01
    23ea:	80 95       	com	r24
    23ec:	89 23       	and	r24, r25
    23ee:	8c 93       	st	X, r24
    23f0:	2a c0       	rjmp	.+84     	; 0x2446 <DIO_init+0x180>
			break;
		case GPIOB:
			PORTB_DIR &= ~(DIO_info -> pins);
    23f2:	a7 e3       	ldi	r26, 0x37	; 55
    23f4:	b0 e0       	ldi	r27, 0x00	; 0
    23f6:	e7 e3       	ldi	r30, 0x37	; 55
    23f8:	f0 e0       	ldi	r31, 0x00	; 0
    23fa:	80 81       	ld	r24, Z
    23fc:	98 2f       	mov	r25, r24
    23fe:	e9 81       	ldd	r30, Y+1	; 0x01
    2400:	fa 81       	ldd	r31, Y+2	; 0x02
    2402:	81 81       	ldd	r24, Z+1	; 0x01
    2404:	80 95       	com	r24
    2406:	89 23       	and	r24, r25
    2408:	8c 93       	st	X, r24
    240a:	1d c0       	rjmp	.+58     	; 0x2446 <DIO_init+0x180>
			break;
		case GPIOC:
			PORTC_DIR &= ~(DIO_info -> pins);
    240c:	a4 e3       	ldi	r26, 0x34	; 52
    240e:	b0 e0       	ldi	r27, 0x00	; 0
    2410:	e4 e3       	ldi	r30, 0x34	; 52
    2412:	f0 e0       	ldi	r31, 0x00	; 0
    2414:	80 81       	ld	r24, Z
    2416:	98 2f       	mov	r25, r24
    2418:	e9 81       	ldd	r30, Y+1	; 0x01
    241a:	fa 81       	ldd	r31, Y+2	; 0x02
    241c:	81 81       	ldd	r24, Z+1	; 0x01
    241e:	80 95       	com	r24
    2420:	89 23       	and	r24, r25
    2422:	8c 93       	st	X, r24
    2424:	10 c0       	rjmp	.+32     	; 0x2446 <DIO_init+0x180>
			break;
		case GPIOD:
			PORTD_DIR &= ~(DIO_info -> pins);
    2426:	a1 e3       	ldi	r26, 0x31	; 49
    2428:	b0 e0       	ldi	r27, 0x00	; 0
    242a:	e1 e3       	ldi	r30, 0x31	; 49
    242c:	f0 e0       	ldi	r31, 0x00	; 0
    242e:	80 81       	ld	r24, Z
    2430:	98 2f       	mov	r25, r24
    2432:	e9 81       	ldd	r30, Y+1	; 0x01
    2434:	fa 81       	ldd	r31, Y+2	; 0x02
    2436:	81 81       	ldd	r24, Z+1	; 0x01
    2438:	80 95       	com	r24
    243a:	89 23       	and	r24, r25
    243c:	8c 93       	st	X, r24
    243e:	03 c0       	rjmp	.+6      	; 0x2446 <DIO_init+0x180>
			break;
		default:
			return E_NOK;
    2440:	91 e0       	ldi	r25, 0x01	; 1
    2442:	9d 83       	std	Y+5, r25	; 0x05
    2444:	01 c0       	rjmp	.+2      	; 0x2448 <DIO_init+0x182>
			break;
		}
	}

	return E_OK;
    2446:	1d 82       	std	Y+5, r1	; 0x05
    2448:	8d 81       	ldd	r24, Y+5	; 0x05
}
    244a:	27 96       	adiw	r28, 0x07	; 7
    244c:	0f b6       	in	r0, 0x3f	; 63
    244e:	f8 94       	cli
    2450:	de bf       	out	0x3e, r29	; 62
    2452:	0f be       	out	0x3f, r0	; 63
    2454:	cd bf       	out	0x3d, r28	; 61
    2456:	cf 91       	pop	r28
    2458:	df 91       	pop	r29
    245a:	08 95       	ret

0000245c <DIO_Write>:
 *In/Out: No In/Out
 *Description: This function can set the value of a full port, a nibble
 * 			  or even one pin.
 */
ERROR_STATUS DIO_Write (uint8 GPIO, uint8 pins, uint8 value)
{
    245c:	df 93       	push	r29
    245e:	cf 93       	push	r28
    2460:	cd b7       	in	r28, 0x3d	; 61
    2462:	de b7       	in	r29, 0x3e	; 62
    2464:	28 97       	sbiw	r28, 0x08	; 8
    2466:	0f b6       	in	r0, 0x3f	; 63
    2468:	f8 94       	cli
    246a:	de bf       	out	0x3e, r29	; 62
    246c:	0f be       	out	0x3f, r0	; 63
    246e:	cd bf       	out	0x3d, r28	; 61
    2470:	89 83       	std	Y+1, r24	; 0x01
    2472:	6a 83       	std	Y+2, r22	; 0x02
    2474:	4b 83       	std	Y+3, r20	; 0x03
	if(value == HIGH){
    2476:	8b 81       	ldd	r24, Y+3	; 0x03
    2478:	8f 3f       	cpi	r24, 0xFF	; 255
    247a:	09 f0       	breq	.+2      	; 0x247e <DIO_Write+0x22>
    247c:	46 c0       	rjmp	.+140    	; 0x250a <DIO_Write+0xae>
		switch(GPIO){
    247e:	89 81       	ldd	r24, Y+1	; 0x01
    2480:	28 2f       	mov	r18, r24
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	38 87       	std	Y+8, r19	; 0x08
    2486:	2f 83       	std	Y+7, r18	; 0x07
    2488:	8f 81       	ldd	r24, Y+7	; 0x07
    248a:	98 85       	ldd	r25, Y+8	; 0x08
    248c:	81 30       	cpi	r24, 0x01	; 1
    248e:	91 05       	cpc	r25, r1
    2490:	f1 f0       	breq	.+60     	; 0x24ce <DIO_Write+0x72>
    2492:	2f 81       	ldd	r18, Y+7	; 0x07
    2494:	38 85       	ldd	r19, Y+8	; 0x08
    2496:	22 30       	cpi	r18, 0x02	; 2
    2498:	31 05       	cpc	r19, r1
    249a:	2c f4       	brge	.+10     	; 0x24a6 <DIO_Write+0x4a>
    249c:	8f 81       	ldd	r24, Y+7	; 0x07
    249e:	98 85       	ldd	r25, Y+8	; 0x08
    24a0:	00 97       	sbiw	r24, 0x00	; 0
    24a2:	61 f0       	breq	.+24     	; 0x24bc <DIO_Write+0x60>
    24a4:	2f c0       	rjmp	.+94     	; 0x2504 <DIO_Write+0xa8>
    24a6:	2f 81       	ldd	r18, Y+7	; 0x07
    24a8:	38 85       	ldd	r19, Y+8	; 0x08
    24aa:	22 30       	cpi	r18, 0x02	; 2
    24ac:	31 05       	cpc	r19, r1
    24ae:	c1 f0       	breq	.+48     	; 0x24e0 <DIO_Write+0x84>
    24b0:	8f 81       	ldd	r24, Y+7	; 0x07
    24b2:	98 85       	ldd	r25, Y+8	; 0x08
    24b4:	83 30       	cpi	r24, 0x03	; 3
    24b6:	91 05       	cpc	r25, r1
    24b8:	e1 f0       	breq	.+56     	; 0x24f2 <DIO_Write+0x96>
    24ba:	24 c0       	rjmp	.+72     	; 0x2504 <DIO_Write+0xa8>
		case GPIOA:
			PORTA_DATA |= (pins);
    24bc:	ab e3       	ldi	r26, 0x3B	; 59
    24be:	b0 e0       	ldi	r27, 0x00	; 0
    24c0:	eb e3       	ldi	r30, 0x3B	; 59
    24c2:	f0 e0       	ldi	r31, 0x00	; 0
    24c4:	90 81       	ld	r25, Z
    24c6:	8a 81       	ldd	r24, Y+2	; 0x02
    24c8:	89 2b       	or	r24, r25
    24ca:	8c 93       	st	X, r24
    24cc:	70 c0       	rjmp	.+224    	; 0x25ae <DIO_Write+0x152>
			break;
		case GPIOB:
			PORTB_DATA |= (pins);
    24ce:	a8 e3       	ldi	r26, 0x38	; 56
    24d0:	b0 e0       	ldi	r27, 0x00	; 0
    24d2:	e8 e3       	ldi	r30, 0x38	; 56
    24d4:	f0 e0       	ldi	r31, 0x00	; 0
    24d6:	90 81       	ld	r25, Z
    24d8:	8a 81       	ldd	r24, Y+2	; 0x02
    24da:	89 2b       	or	r24, r25
    24dc:	8c 93       	st	X, r24
    24de:	67 c0       	rjmp	.+206    	; 0x25ae <DIO_Write+0x152>
			break;
		case GPIOC:
			PORTC_DATA |= (pins);
    24e0:	a5 e3       	ldi	r26, 0x35	; 53
    24e2:	b0 e0       	ldi	r27, 0x00	; 0
    24e4:	e5 e3       	ldi	r30, 0x35	; 53
    24e6:	f0 e0       	ldi	r31, 0x00	; 0
    24e8:	90 81       	ld	r25, Z
    24ea:	8a 81       	ldd	r24, Y+2	; 0x02
    24ec:	89 2b       	or	r24, r25
    24ee:	8c 93       	st	X, r24
    24f0:	5e c0       	rjmp	.+188    	; 0x25ae <DIO_Write+0x152>
			break;
		case GPIOD:
			PORTD_DATA |= (pins);
    24f2:	a2 e3       	ldi	r26, 0x32	; 50
    24f4:	b0 e0       	ldi	r27, 0x00	; 0
    24f6:	e2 e3       	ldi	r30, 0x32	; 50
    24f8:	f0 e0       	ldi	r31, 0x00	; 0
    24fa:	90 81       	ld	r25, Z
    24fc:	8a 81       	ldd	r24, Y+2	; 0x02
    24fe:	89 2b       	or	r24, r25
    2500:	8c 93       	st	X, r24
    2502:	55 c0       	rjmp	.+170    	; 0x25ae <DIO_Write+0x152>
			break;
		default:
			return E_NOK;
    2504:	91 e0       	ldi	r25, 0x01	; 1
    2506:	9e 83       	std	Y+6, r25	; 0x06
    2508:	53 c0       	rjmp	.+166    	; 0x25b0 <DIO_Write+0x154>
			break;
		}
	}else if(value==LOW){
    250a:	8b 81       	ldd	r24, Y+3	; 0x03
    250c:	88 23       	and	r24, r24
    250e:	09 f0       	breq	.+2      	; 0x2512 <DIO_Write+0xb6>
    2510:	4e c0       	rjmp	.+156    	; 0x25ae <DIO_Write+0x152>
		switch(GPIO){
    2512:	89 81       	ldd	r24, Y+1	; 0x01
    2514:	28 2f       	mov	r18, r24
    2516:	30 e0       	ldi	r19, 0x00	; 0
    2518:	3d 83       	std	Y+5, r19	; 0x05
    251a:	2c 83       	std	Y+4, r18	; 0x04
    251c:	8c 81       	ldd	r24, Y+4	; 0x04
    251e:	9d 81       	ldd	r25, Y+5	; 0x05
    2520:	81 30       	cpi	r24, 0x01	; 1
    2522:	91 05       	cpc	r25, r1
    2524:	01 f1       	breq	.+64     	; 0x2566 <DIO_Write+0x10a>
    2526:	2c 81       	ldd	r18, Y+4	; 0x04
    2528:	3d 81       	ldd	r19, Y+5	; 0x05
    252a:	22 30       	cpi	r18, 0x02	; 2
    252c:	31 05       	cpc	r19, r1
    252e:	2c f4       	brge	.+10     	; 0x253a <DIO_Write+0xde>
    2530:	8c 81       	ldd	r24, Y+4	; 0x04
    2532:	9d 81       	ldd	r25, Y+5	; 0x05
    2534:	00 97       	sbiw	r24, 0x00	; 0
    2536:	61 f0       	breq	.+24     	; 0x2550 <DIO_Write+0xf4>
    2538:	37 c0       	rjmp	.+110    	; 0x25a8 <DIO_Write+0x14c>
    253a:	2c 81       	ldd	r18, Y+4	; 0x04
    253c:	3d 81       	ldd	r19, Y+5	; 0x05
    253e:	22 30       	cpi	r18, 0x02	; 2
    2540:	31 05       	cpc	r19, r1
    2542:	e1 f0       	breq	.+56     	; 0x257c <DIO_Write+0x120>
    2544:	8c 81       	ldd	r24, Y+4	; 0x04
    2546:	9d 81       	ldd	r25, Y+5	; 0x05
    2548:	83 30       	cpi	r24, 0x03	; 3
    254a:	91 05       	cpc	r25, r1
    254c:	11 f1       	breq	.+68     	; 0x2592 <DIO_Write+0x136>
    254e:	2c c0       	rjmp	.+88     	; 0x25a8 <DIO_Write+0x14c>
		case GPIOA:
			PORTA_DATA &= ~(pins);
    2550:	ab e3       	ldi	r26, 0x3B	; 59
    2552:	b0 e0       	ldi	r27, 0x00	; 0
    2554:	eb e3       	ldi	r30, 0x3B	; 59
    2556:	f0 e0       	ldi	r31, 0x00	; 0
    2558:	80 81       	ld	r24, Z
    255a:	98 2f       	mov	r25, r24
    255c:	8a 81       	ldd	r24, Y+2	; 0x02
    255e:	80 95       	com	r24
    2560:	89 23       	and	r24, r25
    2562:	8c 93       	st	X, r24
    2564:	24 c0       	rjmp	.+72     	; 0x25ae <DIO_Write+0x152>
			break;
		case GPIOB:
			PORTB_DATA &= ~(pins);
    2566:	a8 e3       	ldi	r26, 0x38	; 56
    2568:	b0 e0       	ldi	r27, 0x00	; 0
    256a:	e8 e3       	ldi	r30, 0x38	; 56
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	80 81       	ld	r24, Z
    2570:	98 2f       	mov	r25, r24
    2572:	8a 81       	ldd	r24, Y+2	; 0x02
    2574:	80 95       	com	r24
    2576:	89 23       	and	r24, r25
    2578:	8c 93       	st	X, r24
    257a:	19 c0       	rjmp	.+50     	; 0x25ae <DIO_Write+0x152>
			break;
		case GPIOC:
			PORTC_DATA &= ~(pins);
    257c:	a5 e3       	ldi	r26, 0x35	; 53
    257e:	b0 e0       	ldi	r27, 0x00	; 0
    2580:	e5 e3       	ldi	r30, 0x35	; 53
    2582:	f0 e0       	ldi	r31, 0x00	; 0
    2584:	80 81       	ld	r24, Z
    2586:	98 2f       	mov	r25, r24
    2588:	8a 81       	ldd	r24, Y+2	; 0x02
    258a:	80 95       	com	r24
    258c:	89 23       	and	r24, r25
    258e:	8c 93       	st	X, r24
    2590:	0e c0       	rjmp	.+28     	; 0x25ae <DIO_Write+0x152>
			break;
		case GPIOD:
			PORTD_DATA &= ~(pins);
    2592:	a2 e3       	ldi	r26, 0x32	; 50
    2594:	b0 e0       	ldi	r27, 0x00	; 0
    2596:	e2 e3       	ldi	r30, 0x32	; 50
    2598:	f0 e0       	ldi	r31, 0x00	; 0
    259a:	80 81       	ld	r24, Z
    259c:	98 2f       	mov	r25, r24
    259e:	8a 81       	ldd	r24, Y+2	; 0x02
    25a0:	80 95       	com	r24
    25a2:	89 23       	and	r24, r25
    25a4:	8c 93       	st	X, r24
    25a6:	03 c0       	rjmp	.+6      	; 0x25ae <DIO_Write+0x152>
			break;
		default:
			return E_NOK;
    25a8:	91 e0       	ldi	r25, 0x01	; 1
    25aa:	9e 83       	std	Y+6, r25	; 0x06
    25ac:	01 c0       	rjmp	.+2      	; 0x25b0 <DIO_Write+0x154>
			break;
		}
	}

	return E_OK;
    25ae:	1e 82       	std	Y+6, r1	; 0x06
    25b0:	8e 81       	ldd	r24, Y+6	; 0x06
}
    25b2:	28 96       	adiw	r28, 0x08	; 8
    25b4:	0f b6       	in	r0, 0x3f	; 63
    25b6:	f8 94       	cli
    25b8:	de bf       	out	0x3e, r29	; 62
    25ba:	0f be       	out	0x3f, r0	; 63
    25bc:	cd bf       	out	0x3d, r28	; 61
    25be:	cf 91       	pop	r28
    25c0:	df 91       	pop	r29
    25c2:	08 95       	ret

000025c4 <DIO_Read>:
*In/Out:
*Description: This function gets the value of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_Read (uint8 GPIO,uint8 pins, uint8 *data)
{
    25c4:	df 93       	push	r29
    25c6:	cf 93       	push	r28
    25c8:	cd b7       	in	r28, 0x3d	; 61
    25ca:	de b7       	in	r29, 0x3e	; 62
    25cc:	27 97       	sbiw	r28, 0x07	; 7
    25ce:	0f b6       	in	r0, 0x3f	; 63
    25d0:	f8 94       	cli
    25d2:	de bf       	out	0x3e, r29	; 62
    25d4:	0f be       	out	0x3f, r0	; 63
    25d6:	cd bf       	out	0x3d, r28	; 61
    25d8:	89 83       	std	Y+1, r24	; 0x01
    25da:	6a 83       	std	Y+2, r22	; 0x02
    25dc:	5c 83       	std	Y+4, r21	; 0x04
    25de:	4b 83       	std	Y+3, r20	; 0x03
	switch(GPIO){
    25e0:	89 81       	ldd	r24, Y+1	; 0x01
    25e2:	28 2f       	mov	r18, r24
    25e4:	30 e0       	ldi	r19, 0x00	; 0
    25e6:	3f 83       	std	Y+7, r19	; 0x07
    25e8:	2e 83       	std	Y+6, r18	; 0x06
    25ea:	8e 81       	ldd	r24, Y+6	; 0x06
    25ec:	9f 81       	ldd	r25, Y+7	; 0x07
    25ee:	81 30       	cpi	r24, 0x01	; 1
    25f0:	91 05       	cpc	r25, r1
    25f2:	f1 f0       	breq	.+60     	; 0x2630 <DIO_Read+0x6c>
    25f4:	2e 81       	ldd	r18, Y+6	; 0x06
    25f6:	3f 81       	ldd	r19, Y+7	; 0x07
    25f8:	22 30       	cpi	r18, 0x02	; 2
    25fa:	31 05       	cpc	r19, r1
    25fc:	2c f4       	brge	.+10     	; 0x2608 <DIO_Read+0x44>
    25fe:	8e 81       	ldd	r24, Y+6	; 0x06
    2600:	9f 81       	ldd	r25, Y+7	; 0x07
    2602:	00 97       	sbiw	r24, 0x00	; 0
    2604:	61 f0       	breq	.+24     	; 0x261e <DIO_Read+0x5a>
    2606:	2f c0       	rjmp	.+94     	; 0x2666 <DIO_Read+0xa2>
    2608:	2e 81       	ldd	r18, Y+6	; 0x06
    260a:	3f 81       	ldd	r19, Y+7	; 0x07
    260c:	22 30       	cpi	r18, 0x02	; 2
    260e:	31 05       	cpc	r19, r1
    2610:	c1 f0       	breq	.+48     	; 0x2642 <DIO_Read+0x7e>
    2612:	8e 81       	ldd	r24, Y+6	; 0x06
    2614:	9f 81       	ldd	r25, Y+7	; 0x07
    2616:	83 30       	cpi	r24, 0x03	; 3
    2618:	91 05       	cpc	r25, r1
    261a:	e1 f0       	breq	.+56     	; 0x2654 <DIO_Read+0x90>
    261c:	24 c0       	rjmp	.+72     	; 0x2666 <DIO_Read+0xa2>
			case GPIOA:
				*data = PORTA_PIN & pins;
    261e:	e9 e3       	ldi	r30, 0x39	; 57
    2620:	f0 e0       	ldi	r31, 0x00	; 0
    2622:	90 81       	ld	r25, Z
    2624:	8a 81       	ldd	r24, Y+2	; 0x02
    2626:	89 23       	and	r24, r25
    2628:	eb 81       	ldd	r30, Y+3	; 0x03
    262a:	fc 81       	ldd	r31, Y+4	; 0x04
    262c:	80 83       	st	Z, r24
    262e:	1e c0       	rjmp	.+60     	; 0x266c <DIO_Read+0xa8>
				break;
			case GPIOB:
				*data = PORTB_PIN & pins;
    2630:	e6 e3       	ldi	r30, 0x36	; 54
    2632:	f0 e0       	ldi	r31, 0x00	; 0
    2634:	90 81       	ld	r25, Z
    2636:	8a 81       	ldd	r24, Y+2	; 0x02
    2638:	89 23       	and	r24, r25
    263a:	eb 81       	ldd	r30, Y+3	; 0x03
    263c:	fc 81       	ldd	r31, Y+4	; 0x04
    263e:	80 83       	st	Z, r24
    2640:	15 c0       	rjmp	.+42     	; 0x266c <DIO_Read+0xa8>
				break;
			case GPIOC:
				*data = PORTC_PIN & pins;
    2642:	e3 e3       	ldi	r30, 0x33	; 51
    2644:	f0 e0       	ldi	r31, 0x00	; 0
    2646:	90 81       	ld	r25, Z
    2648:	8a 81       	ldd	r24, Y+2	; 0x02
    264a:	89 23       	and	r24, r25
    264c:	eb 81       	ldd	r30, Y+3	; 0x03
    264e:	fc 81       	ldd	r31, Y+4	; 0x04
    2650:	80 83       	st	Z, r24
    2652:	0c c0       	rjmp	.+24     	; 0x266c <DIO_Read+0xa8>
				break;
			case GPIOD:
				*data = PORTD_PIN & pins;
    2654:	e0 e3       	ldi	r30, 0x30	; 48
    2656:	f0 e0       	ldi	r31, 0x00	; 0
    2658:	90 81       	ld	r25, Z
    265a:	8a 81       	ldd	r24, Y+2	; 0x02
    265c:	89 23       	and	r24, r25
    265e:	eb 81       	ldd	r30, Y+3	; 0x03
    2660:	fc 81       	ldd	r31, Y+4	; 0x04
    2662:	80 83       	st	Z, r24
    2664:	03 c0       	rjmp	.+6      	; 0x266c <DIO_Read+0xa8>
				break;
			default :
				return E_NOK;
    2666:	91 e0       	ldi	r25, 0x01	; 1
    2668:	9d 83       	std	Y+5, r25	; 0x05
    266a:	01 c0       	rjmp	.+2      	; 0x266e <DIO_Read+0xaa>
				break;
		}
	return E_OK;
    266c:	1d 82       	std	Y+5, r1	; 0x05
    266e:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2670:	27 96       	adiw	r28, 0x07	; 7
    2672:	0f b6       	in	r0, 0x3f	; 63
    2674:	f8 94       	cli
    2676:	de bf       	out	0x3e, r29	; 62
    2678:	0f be       	out	0x3f, r0	; 63
    267a:	cd bf       	out	0x3d, r28	; 61
    267c:	cf 91       	pop	r28
    267e:	df 91       	pop	r29
    2680:	08 95       	ret

00002682 <DIO_Toggle>:
*In/Out:
*Description: This function toggles the value of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_Toggle (uint8 GPIO, uint8 pins)
{
    2682:	df 93       	push	r29
    2684:	cf 93       	push	r28
    2686:	00 d0       	rcall	.+0      	; 0x2688 <DIO_Toggle+0x6>
    2688:	00 d0       	rcall	.+0      	; 0x268a <DIO_Toggle+0x8>
    268a:	cd b7       	in	r28, 0x3d	; 61
    268c:	de b7       	in	r29, 0x3e	; 62
    268e:	89 83       	std	Y+1, r24	; 0x01
    2690:	6a 83       	std	Y+2, r22	; 0x02
	switch(GPIO){
    2692:	89 81       	ldd	r24, Y+1	; 0x01
    2694:	28 2f       	mov	r18, r24
    2696:	30 e0       	ldi	r19, 0x00	; 0
    2698:	3c 83       	std	Y+4, r19	; 0x04
    269a:	2b 83       	std	Y+3, r18	; 0x03
    269c:	8b 81       	ldd	r24, Y+3	; 0x03
    269e:	9c 81       	ldd	r25, Y+4	; 0x04
    26a0:	81 30       	cpi	r24, 0x01	; 1
    26a2:	91 05       	cpc	r25, r1
    26a4:	f1 f0       	breq	.+60     	; 0x26e2 <DIO_Toggle+0x60>
    26a6:	2b 81       	ldd	r18, Y+3	; 0x03
    26a8:	3c 81       	ldd	r19, Y+4	; 0x04
    26aa:	22 30       	cpi	r18, 0x02	; 2
    26ac:	31 05       	cpc	r19, r1
    26ae:	2c f4       	brge	.+10     	; 0x26ba <DIO_Toggle+0x38>
    26b0:	8b 81       	ldd	r24, Y+3	; 0x03
    26b2:	9c 81       	ldd	r25, Y+4	; 0x04
    26b4:	00 97       	sbiw	r24, 0x00	; 0
    26b6:	61 f0       	breq	.+24     	; 0x26d0 <DIO_Toggle+0x4e>
    26b8:	2e c0       	rjmp	.+92     	; 0x2716 <DIO_Toggle+0x94>
    26ba:	2b 81       	ldd	r18, Y+3	; 0x03
    26bc:	3c 81       	ldd	r19, Y+4	; 0x04
    26be:	22 30       	cpi	r18, 0x02	; 2
    26c0:	31 05       	cpc	r19, r1
    26c2:	c1 f0       	breq	.+48     	; 0x26f4 <DIO_Toggle+0x72>
    26c4:	8b 81       	ldd	r24, Y+3	; 0x03
    26c6:	9c 81       	ldd	r25, Y+4	; 0x04
    26c8:	83 30       	cpi	r24, 0x03	; 3
    26ca:	91 05       	cpc	r25, r1
    26cc:	e1 f0       	breq	.+56     	; 0x2706 <DIO_Toggle+0x84>
    26ce:	23 c0       	rjmp	.+70     	; 0x2716 <DIO_Toggle+0x94>
			case GPIOA:
				PORTA_DATA ^= pins;
    26d0:	ab e3       	ldi	r26, 0x3B	; 59
    26d2:	b0 e0       	ldi	r27, 0x00	; 0
    26d4:	eb e3       	ldi	r30, 0x3B	; 59
    26d6:	f0 e0       	ldi	r31, 0x00	; 0
    26d8:	90 81       	ld	r25, Z
    26da:	8a 81       	ldd	r24, Y+2	; 0x02
    26dc:	89 27       	eor	r24, r25
    26de:	8c 93       	st	X, r24
    26e0:	1a c0       	rjmp	.+52     	; 0x2716 <DIO_Toggle+0x94>
				break;
			case GPIOB:
				PORTB_DATA ^= pins;
    26e2:	a8 e3       	ldi	r26, 0x38	; 56
    26e4:	b0 e0       	ldi	r27, 0x00	; 0
    26e6:	e8 e3       	ldi	r30, 0x38	; 56
    26e8:	f0 e0       	ldi	r31, 0x00	; 0
    26ea:	90 81       	ld	r25, Z
    26ec:	8a 81       	ldd	r24, Y+2	; 0x02
    26ee:	89 27       	eor	r24, r25
    26f0:	8c 93       	st	X, r24
    26f2:	11 c0       	rjmp	.+34     	; 0x2716 <DIO_Toggle+0x94>
				break;
			case GPIOC:
				PORTC_DATA ^= pins;
    26f4:	a5 e3       	ldi	r26, 0x35	; 53
    26f6:	b0 e0       	ldi	r27, 0x00	; 0
    26f8:	e5 e3       	ldi	r30, 0x35	; 53
    26fa:	f0 e0       	ldi	r31, 0x00	; 0
    26fc:	90 81       	ld	r25, Z
    26fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2700:	89 27       	eor	r24, r25
    2702:	8c 93       	st	X, r24
    2704:	08 c0       	rjmp	.+16     	; 0x2716 <DIO_Toggle+0x94>
				break;
			case GPIOD:
				PORTD_DATA ^= pins;
    2706:	a2 e3       	ldi	r26, 0x32	; 50
    2708:	b0 e0       	ldi	r27, 0x00	; 0
    270a:	e2 e3       	ldi	r30, 0x32	; 50
    270c:	f0 e0       	ldi	r31, 0x00	; 0
    270e:	90 81       	ld	r25, Z
    2710:	8a 81       	ldd	r24, Y+2	; 0x02
    2712:	89 27       	eor	r24, r25
    2714:	8c 93       	st	X, r24
				break;
		}
	return E_OK;
    2716:	80 e0       	ldi	r24, 0x00	; 0
}
    2718:	0f 90       	pop	r0
    271a:	0f 90       	pop	r0
    271c:	0f 90       	pop	r0
    271e:	0f 90       	pop	r0
    2720:	cf 91       	pop	r28
    2722:	df 91       	pop	r29
    2724:	08 95       	ret

00002726 <Us_Init>:
 *                    On time of the ECHO signal.                                                   *
 *                                                                                                  *
 *                                                                                                  *
 ***************************************************************************************************/
ERROR_STATUS Us_Init(void)
{
    2726:	df 93       	push	r29
    2728:	cf 93       	push	r28
    272a:	00 d0       	rcall	.+0      	; 0x272c <Us_Init+0x6>
    272c:	cd b7       	in	r28, 0x3d	; 61
    272e:	de b7       	in	r29, 0x3e	; 62
	Icu_cfg_s Icu_Cfg;
	Icu_Cfg.ICU_Ch_No = ICU_CH2;
    2730:	82 e0       	ldi	r24, 0x02	; 2
    2732:	89 83       	std	Y+1, r24	; 0x01
	Icu_Cfg.ICU_Ch_Timer = ICU_TIMER_CH0;
    2734:	1a 82       	std	Y+2, r1	; 0x02
	Icu_Init(&Icu_Cfg);
    2736:	ce 01       	movw	r24, r28
    2738:	01 96       	adiw	r24, 0x01	; 1
    273a:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <Icu_Init>
	SET_BIT(PORTB_DIR,TRIGGER_BIT); //TRIGER PIN
    273e:	a7 e3       	ldi	r26, 0x37	; 55
    2740:	b0 e0       	ldi	r27, 0x00	; 0
    2742:	e7 e3       	ldi	r30, 0x37	; 55
    2744:	f0 e0       	ldi	r31, 0x00	; 0
    2746:	80 81       	ld	r24, Z
    2748:	82 60       	ori	r24, 0x02	; 2
    274a:	8c 93       	st	X, r24
	CLR_BIT(PORTB_DIR,ECHO_PIN); //ECHO PIN
    274c:	a7 e3       	ldi	r26, 0x37	; 55
    274e:	b0 e0       	ldi	r27, 0x00	; 0
    2750:	e7 e3       	ldi	r30, 0x37	; 55
    2752:	f0 e0       	ldi	r31, 0x00	; 0
    2754:	80 81       	ld	r24, Z
    2756:	8b 7f       	andi	r24, 0xFB	; 251
    2758:	8c 93       	st	X, r24
	return E_OK;
    275a:	80 e0       	ldi	r24, 0x00	; 0
}
    275c:	0f 90       	pop	r0
    275e:	0f 90       	pop	r0
    2760:	cf 91       	pop	r28
    2762:	df 91       	pop	r29
    2764:	08 95       	ret

00002766 <Us_Trigger>:
 *                    the  ECUO signal                                                            *
 *************************************************************************************************/


ERROR_STATUS Us_Trigger(void)
{
    2766:	df 93       	push	r29
    2768:	cf 93       	push	r28
    276a:	0f 92       	push	r0
    276c:	cd b7       	in	r28, 0x3d	; 61
    276e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(PORTB_DATA,TRIGGER_BIT);
    2770:	a8 e3       	ldi	r26, 0x38	; 56
    2772:	b0 e0       	ldi	r27, 0x00	; 0
    2774:	e8 e3       	ldi	r30, 0x38	; 56
    2776:	f0 e0       	ldi	r31, 0x00	; 0
    2778:	80 81       	ld	r24, Z
    277a:	82 60       	ori	r24, 0x02	; 2
    277c:	8c 93       	st	X, r24
	for(uint8 Counter=0;Counter<10;Counter++);
    277e:	19 82       	std	Y+1, r1	; 0x01
    2780:	03 c0       	rjmp	.+6      	; 0x2788 <Us_Trigger+0x22>
    2782:	89 81       	ldd	r24, Y+1	; 0x01
    2784:	8f 5f       	subi	r24, 0xFF	; 255
    2786:	89 83       	std	Y+1, r24	; 0x01
    2788:	89 81       	ldd	r24, Y+1	; 0x01
    278a:	8a 30       	cpi	r24, 0x0A	; 10
    278c:	d0 f3       	brcs	.-12     	; 0x2782 <Us_Trigger+0x1c>
	CLR_BIT(PORTB_DATA,TRIGGER_BIT);
    278e:	a8 e3       	ldi	r26, 0x38	; 56
    2790:	b0 e0       	ldi	r27, 0x00	; 0
    2792:	e8 e3       	ldi	r30, 0x38	; 56
    2794:	f0 e0       	ldi	r31, 0x00	; 0
    2796:	80 81       	ld	r24, Z
    2798:	8d 7f       	andi	r24, 0xFD	; 253
    279a:	8c 93       	st	X, r24
	return E_OK;
    279c:	80 e0       	ldi	r24, 0x00	; 0
}
    279e:	0f 90       	pop	r0
    27a0:	cf 91       	pop	r28
    27a2:	df 91       	pop	r29
    27a4:	08 95       	ret

000027a6 <Us_GetDistance>:
 *                    Distance parameter.                                                         *
 *************************************************************************************************/


ERROR_STATUS Us_GetDistance(uint16 *Distance)
{
    27a6:	df 93       	push	r29
    27a8:	cf 93       	push	r28
    27aa:	00 d0       	rcall	.+0      	; 0x27ac <Us_GetDistance+0x6>
    27ac:	00 d0       	rcall	.+0      	; 0x27ae <Us_GetDistance+0x8>
    27ae:	00 d0       	rcall	.+0      	; 0x27b0 <Us_GetDistance+0xa>
    27b0:	cd b7       	in	r28, 0x3d	; 61
    27b2:	de b7       	in	r29, 0x3e	; 62
    27b4:	9e 83       	std	Y+6, r25	; 0x06
    27b6:	8d 83       	std	Y+5, r24	; 0x05
	uint32 Icu_Time =LOW;
    27b8:	19 82       	std	Y+1, r1	; 0x01
    27ba:	1a 82       	std	Y+2, r1	; 0x02
    27bc:	1b 82       	std	Y+3, r1	; 0x03
    27be:	1c 82       	std	Y+4, r1	; 0x04
	Us_Trigger();
    27c0:	0e 94 b3 13 	call	0x2766	; 0x2766 <Us_Trigger>
//	Icu_ReadTime(ICU_CH2,ICU_RISE_TO_FALE,&Icu_Time);
	Icu_RiseToFall(&Icu_Time);
    27c4:	ce 01       	movw	r24, r28
    27c6:	01 96       	adiw	r24, 0x01	; 1
    27c8:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <Icu_RiseToFall>
	*Distance = (Icu_Time /58);
    27cc:	89 81       	ldd	r24, Y+1	; 0x01
    27ce:	9a 81       	ldd	r25, Y+2	; 0x02
    27d0:	ab 81       	ldd	r26, Y+3	; 0x03
    27d2:	bc 81       	ldd	r27, Y+4	; 0x04
    27d4:	2a e3       	ldi	r18, 0x3A	; 58
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	40 e0       	ldi	r20, 0x00	; 0
    27da:	50 e0       	ldi	r21, 0x00	; 0
    27dc:	bc 01       	movw	r22, r24
    27de:	cd 01       	movw	r24, r26
    27e0:	0e 94 e0 1c 	call	0x39c0	; 0x39c0 <__udivmodsi4>
    27e4:	da 01       	movw	r26, r20
    27e6:	c9 01       	movw	r24, r18
    27e8:	ed 81       	ldd	r30, Y+5	; 0x05
    27ea:	fe 81       	ldd	r31, Y+6	; 0x06
    27ec:	91 83       	std	Z+1, r25	; 0x01
    27ee:	80 83       	st	Z, r24
	return E_OK;
    27f0:	80 e0       	ldi	r24, 0x00	; 0
}
    27f2:	26 96       	adiw	r28, 0x06	; 6
    27f4:	0f b6       	in	r0, 0x3f	; 63
    27f6:	f8 94       	cli
    27f8:	de bf       	out	0x3e, r29	; 62
    27fa:	0f be       	out	0x3f, r0	; 63
    27fc:	cd bf       	out	0x3d, r28	; 61
    27fe:	cf 91       	pop	r28
    2800:	df 91       	pop	r29
    2802:	08 95       	ret

00002804 <Motor_Init>:
 * In out		: none
 * Return		: ERROR_STATUS
 * Description	: Initialize (Enable, IN1, IN2) pins as digital outputs.
 */
ERROR_STATUS Motor_Init(uint8 Motor_Number)
{
    2804:	df 93       	push	r29
    2806:	cf 93       	push	r28
    2808:	00 d0       	rcall	.+0      	; 0x280a <Motor_Init+0x6>
    280a:	00 d0       	rcall	.+0      	; 0x280c <Motor_Init+0x8>
    280c:	00 d0       	rcall	.+0      	; 0x280e <Motor_Init+0xa>
    280e:	cd b7       	in	r28, 0x3d	; 61
    2810:	de b7       	in	r29, 0x3e	; 62
    2812:	8b 83       	std	Y+3, r24	; 0x03

	Pwm_Cfg_s_t pwm;
	pwm.channel = PWM_CHAB;
    2814:	84 e0       	ldi	r24, 0x04	; 4
    2816:	89 83       	std	Y+1, r24	; 0x01
	pwm.prescaler = PWM_PRESCALER_64;
    2818:	83 e0       	ldi	r24, 0x03	; 3
    281a:	8a 83       	std	Y+2, r24	; 0x02
	Pwm_Init(&pwm);
    281c:	ce 01       	movw	r24, r28
    281e:	01 96       	adiw	r24, 0x01	; 1
    2820:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <Pwm_Init>
	switch(Motor_Number){
    2824:	8b 81       	ldd	r24, Y+3	; 0x03
    2826:	28 2f       	mov	r18, r24
    2828:	30 e0       	ldi	r19, 0x00	; 0
    282a:	3e 83       	std	Y+6, r19	; 0x06
    282c:	2d 83       	std	Y+5, r18	; 0x05
    282e:	8d 81       	ldd	r24, Y+5	; 0x05
    2830:	9e 81       	ldd	r25, Y+6	; 0x06
    2832:	81 30       	cpi	r24, 0x01	; 1
    2834:	91 05       	cpc	r25, r1
    2836:	31 f0       	breq	.+12     	; 0x2844 <Motor_Init+0x40>
    2838:	2d 81       	ldd	r18, Y+5	; 0x05
    283a:	3e 81       	ldd	r19, Y+6	; 0x06
    283c:	22 30       	cpi	r18, 0x02	; 2
    283e:	31 05       	cpc	r19, r1
    2840:	91 f0       	breq	.+36     	; 0x2866 <Motor_Init+0x62>
    2842:	22 c0       	rjmp	.+68     	; 0x2888 <Motor_Init+0x84>
	case MOTOR_1:
		MOTOR_init.GPIO = MOTOR_EN_1_GPIO;
    2844:	83 e0       	ldi	r24, 0x03	; 3
    2846:	80 93 b5 00 	sts	0x00B5, r24
		MOTOR_init.dir = HIGH;
    284a:	8f ef       	ldi	r24, 0xFF	; 255
    284c:	80 93 b7 00 	sts	0x00B7, r24
		MOTOR_init.pins = (MOTOR_EN_1_BIT|MOTOR_OUT_1A_BIT|MOTOR_OUT_1B_BIT);
    2850:	8c e1       	ldi	r24, 0x1C	; 28
    2852:	80 93 b6 00 	sts	0x00B6, r24
		DIO_init(& MOTOR_init);
    2856:	85 eb       	ldi	r24, 0xB5	; 181
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	0e 94 63 11 	call	0x22c6	; 0x22c6 <DIO_init>
		gu8_MOTOR1_CheckFor_Init = INITIALIZED;
    285e:	81 e0       	ldi	r24, 0x01	; 1
    2860:	80 93 a9 00 	sts	0x00A9, r24
    2864:	14 c0       	rjmp	.+40     	; 0x288e <Motor_Init+0x8a>
		break;
	case MOTOR_2:
		MOTOR_init.GPIO = MOTOR_EN_2_GPIO;
    2866:	83 e0       	ldi	r24, 0x03	; 3
    2868:	80 93 b5 00 	sts	0x00B5, r24
		MOTOR_init.dir = HIGH;
    286c:	8f ef       	ldi	r24, 0xFF	; 255
    286e:	80 93 b7 00 	sts	0x00B7, r24
		MOTOR_init.pins = (MOTOR_EN_2_BIT|MOTOR_OUT_2A_BIT|MOTOR_OUT_2B_BIT);
    2872:	80 ee       	ldi	r24, 0xE0	; 224
    2874:	80 93 b6 00 	sts	0x00B6, r24
		DIO_init(& MOTOR_init);
    2878:	85 eb       	ldi	r24, 0xB5	; 181
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	0e 94 63 11 	call	0x22c6	; 0x22c6 <DIO_init>
		gu8_MOTOR1_CheckFor_Init = INITIALIZED;
    2880:	81 e0       	ldi	r24, 0x01	; 1
    2882:	80 93 a9 00 	sts	0x00A9, r24
    2886:	03 c0       	rjmp	.+6      	; 0x288e <Motor_Init+0x8a>
		break;
	default :
		return E_NOK;
    2888:	31 e0       	ldi	r19, 0x01	; 1
    288a:	3c 83       	std	Y+4, r19	; 0x04
    288c:	01 c0       	rjmp	.+2      	; 0x2890 <Motor_Init+0x8c>
		break;
	}
	return E_OK;
    288e:	1c 82       	std	Y+4, r1	; 0x04
    2890:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2892:	26 96       	adiw	r28, 0x06	; 6
    2894:	0f b6       	in	r0, 0x3f	; 63
    2896:	f8 94       	cli
    2898:	de bf       	out	0x3e, r29	; 62
    289a:	0f be       	out	0x3f, r0	; 63
    289c:	cd bf       	out	0x3d, r28	; 61
    289e:	cf 91       	pop	r28
    28a0:	df 91       	pop	r29
    28a2:	08 95       	ret

000028a4 <Motor_Direction>:
 * output  	 : no output
 * return 	 : ERROR_STATUS
 * Descriptio: Controls the motor direction from getting the motor number and the direction.
 */
ERROR_STATUS Motor_Direction(uint8 Motor_Number, uint8 Motor_Direction)
{
    28a4:	df 93       	push	r29
    28a6:	cf 93       	push	r28
    28a8:	cd b7       	in	r28, 0x3d	; 61
    28aa:	de b7       	in	r29, 0x3e	; 62
    28ac:	29 97       	sbiw	r28, 0x09	; 9
    28ae:	0f b6       	in	r0, 0x3f	; 63
    28b0:	f8 94       	cli
    28b2:	de bf       	out	0x3e, r29	; 62
    28b4:	0f be       	out	0x3f, r0	; 63
    28b6:	cd bf       	out	0x3d, r28	; 61
    28b8:	89 83       	std	Y+1, r24	; 0x01
    28ba:	6a 83       	std	Y+2, r22	; 0x02
	switch(Motor_Number){
    28bc:	89 81       	ldd	r24, Y+1	; 0x01
    28be:	28 2f       	mov	r18, r24
    28c0:	30 e0       	ldi	r19, 0x00	; 0
    28c2:	39 87       	std	Y+9, r19	; 0x09
    28c4:	28 87       	std	Y+8, r18	; 0x08
    28c6:	88 85       	ldd	r24, Y+8	; 0x08
    28c8:	99 85       	ldd	r25, Y+9	; 0x09
    28ca:	81 30       	cpi	r24, 0x01	; 1
    28cc:	91 05       	cpc	r25, r1
    28ce:	31 f0       	breq	.+12     	; 0x28dc <Motor_Direction+0x38>
    28d0:	28 85       	ldd	r18, Y+8	; 0x08
    28d2:	39 85       	ldd	r19, Y+9	; 0x09
    28d4:	22 30       	cpi	r18, 0x02	; 2
    28d6:	31 05       	cpc	r19, r1
    28d8:	51 f1       	breq	.+84     	; 0x292e <Motor_Direction+0x8a>
    28da:	52 c0       	rjmp	.+164    	; 0x2980 <Motor_Direction+0xdc>
	case MOTOR_1:
		switch(Motor_Direction){
    28dc:	8a 81       	ldd	r24, Y+2	; 0x02
    28de:	28 2f       	mov	r18, r24
    28e0:	30 e0       	ldi	r19, 0x00	; 0
    28e2:	3f 83       	std	Y+7, r19	; 0x07
    28e4:	2e 83       	std	Y+6, r18	; 0x06
    28e6:	8e 81       	ldd	r24, Y+6	; 0x06
    28e8:	9f 81       	ldd	r25, Y+7	; 0x07
    28ea:	81 30       	cpi	r24, 0x01	; 1
    28ec:	91 05       	cpc	r25, r1
    28ee:	31 f0       	breq	.+12     	; 0x28fc <Motor_Direction+0x58>
    28f0:	2e 81       	ldd	r18, Y+6	; 0x06
    28f2:	3f 81       	ldd	r19, Y+7	; 0x07
    28f4:	22 30       	cpi	r18, 0x02	; 2
    28f6:	31 05       	cpc	r19, r1
    28f8:	61 f0       	breq	.+24     	; 0x2912 <Motor_Direction+0x6e>
    28fa:	16 c0       	rjmp	.+44     	; 0x2928 <Motor_Direction+0x84>
		case MOTOR_FORWARD:
			DIO_Write (MOTOR_OUT_1A_GPIO, MOTOR_OUT_1A_BIT, HIGH);
    28fc:	83 e0       	ldi	r24, 0x03	; 3
    28fe:	64 e0       	ldi	r22, 0x04	; 4
    2900:	4f ef       	ldi	r20, 0xFF	; 255
    2902:	0e 94 2e 12 	call	0x245c	; 0x245c <DIO_Write>
			DIO_Write (MOTOR_OUT_1B_GPIO, MOTOR_OUT_1B_BIT, LOW);
    2906:	83 e0       	ldi	r24, 0x03	; 3
    2908:	68 e0       	ldi	r22, 0x08	; 8
    290a:	40 e0       	ldi	r20, 0x00	; 0
    290c:	0e 94 2e 12 	call	0x245c	; 0x245c <DIO_Write>
    2910:	3a c0       	rjmp	.+116    	; 0x2986 <Motor_Direction+0xe2>
			break;
		case MOTOR_BACKWORD:
			DIO_Write (MOTOR_OUT_1A_GPIO, MOTOR_OUT_1A_BIT, LOW);
    2912:	83 e0       	ldi	r24, 0x03	; 3
    2914:	64 e0       	ldi	r22, 0x04	; 4
    2916:	40 e0       	ldi	r20, 0x00	; 0
    2918:	0e 94 2e 12 	call	0x245c	; 0x245c <DIO_Write>
			DIO_Write (MOTOR_OUT_1B_GPIO, MOTOR_OUT_1B_BIT, HIGH);
    291c:	83 e0       	ldi	r24, 0x03	; 3
    291e:	68 e0       	ldi	r22, 0x08	; 8
    2920:	4f ef       	ldi	r20, 0xFF	; 255
    2922:	0e 94 2e 12 	call	0x245c	; 0x245c <DIO_Write>
    2926:	2f c0       	rjmp	.+94     	; 0x2986 <Motor_Direction+0xe2>
			break;
		default :
			return E_NOK;
    2928:	31 e0       	ldi	r19, 0x01	; 1
    292a:	3d 83       	std	Y+5, r19	; 0x05
    292c:	2d c0       	rjmp	.+90     	; 0x2988 <Motor_Direction+0xe4>
			break;
		}
		break;
		case MOTOR_2:
			switch(Motor_Direction){
    292e:	8a 81       	ldd	r24, Y+2	; 0x02
    2930:	28 2f       	mov	r18, r24
    2932:	30 e0       	ldi	r19, 0x00	; 0
    2934:	3c 83       	std	Y+4, r19	; 0x04
    2936:	2b 83       	std	Y+3, r18	; 0x03
    2938:	8b 81       	ldd	r24, Y+3	; 0x03
    293a:	9c 81       	ldd	r25, Y+4	; 0x04
    293c:	81 30       	cpi	r24, 0x01	; 1
    293e:	91 05       	cpc	r25, r1
    2940:	31 f0       	breq	.+12     	; 0x294e <Motor_Direction+0xaa>
    2942:	2b 81       	ldd	r18, Y+3	; 0x03
    2944:	3c 81       	ldd	r19, Y+4	; 0x04
    2946:	22 30       	cpi	r18, 0x02	; 2
    2948:	31 05       	cpc	r19, r1
    294a:	61 f0       	breq	.+24     	; 0x2964 <Motor_Direction+0xc0>
    294c:	16 c0       	rjmp	.+44     	; 0x297a <Motor_Direction+0xd6>
			case MOTOR_FORWARD:
				DIO_Write (MOTOR_OUT_2A_GPIO, MOTOR_OUT_2A_BIT, HIGH);
    294e:	83 e0       	ldi	r24, 0x03	; 3
    2950:	60 e4       	ldi	r22, 0x40	; 64
    2952:	4f ef       	ldi	r20, 0xFF	; 255
    2954:	0e 94 2e 12 	call	0x245c	; 0x245c <DIO_Write>
				DIO_Write (MOTOR_OUT_2B_GPIO, MOTOR_OUT_2B_BIT, LOW);
    2958:	83 e0       	ldi	r24, 0x03	; 3
    295a:	60 e8       	ldi	r22, 0x80	; 128
    295c:	40 e0       	ldi	r20, 0x00	; 0
    295e:	0e 94 2e 12 	call	0x245c	; 0x245c <DIO_Write>
    2962:	11 c0       	rjmp	.+34     	; 0x2986 <Motor_Direction+0xe2>
				break;
			case MOTOR_BACKWORD:
				DIO_Write (MOTOR_OUT_2A_GPIO, MOTOR_OUT_2A_BIT, LOW);
    2964:	83 e0       	ldi	r24, 0x03	; 3
    2966:	60 e4       	ldi	r22, 0x40	; 64
    2968:	40 e0       	ldi	r20, 0x00	; 0
    296a:	0e 94 2e 12 	call	0x245c	; 0x245c <DIO_Write>
				DIO_Write (MOTOR_OUT_2B_GPIO, MOTOR_OUT_2B_BIT, HIGH);
    296e:	83 e0       	ldi	r24, 0x03	; 3
    2970:	60 e8       	ldi	r22, 0x80	; 128
    2972:	4f ef       	ldi	r20, 0xFF	; 255
    2974:	0e 94 2e 12 	call	0x245c	; 0x245c <DIO_Write>
    2978:	06 c0       	rjmp	.+12     	; 0x2986 <Motor_Direction+0xe2>
				break;
			default :
				return E_NOK;
    297a:	31 e0       	ldi	r19, 0x01	; 1
    297c:	3d 83       	std	Y+5, r19	; 0x05
    297e:	04 c0       	rjmp	.+8      	; 0x2988 <Motor_Direction+0xe4>
				break;
			}
			break;
			default :
				return E_NOK;
    2980:	81 e0       	ldi	r24, 0x01	; 1
    2982:	8d 83       	std	Y+5, r24	; 0x05
    2984:	01 c0       	rjmp	.+2      	; 0x2988 <Motor_Direction+0xe4>
				break;
	}
	return E_OK;
    2986:	1d 82       	std	Y+5, r1	; 0x05
    2988:	8d 81       	ldd	r24, Y+5	; 0x05

}
    298a:	29 96       	adiw	r28, 0x09	; 9
    298c:	0f b6       	in	r0, 0x3f	; 63
    298e:	f8 94       	cli
    2990:	de bf       	out	0x3e, r29	; 62
    2992:	0f be       	out	0x3f, r0	; 63
    2994:	cd bf       	out	0x3d, r28	; 61
    2996:	cf 91       	pop	r28
    2998:	df 91       	pop	r29
    299a:	08 95       	ret

0000299c <Motor_Start>:
 * output  	 : no output
 * return 	 : ERROR_STATUS
 * Descriptio: Start the motor.
 */
ERROR_STATUS Motor_Start(uint8 Motor_Number, uint8 Mot_Speed)
{
    299c:	df 93       	push	r29
    299e:	cf 93       	push	r28
    29a0:	00 d0       	rcall	.+0      	; 0x29a2 <Motor_Start+0x6>
    29a2:	00 d0       	rcall	.+0      	; 0x29a4 <Motor_Start+0x8>
    29a4:	0f 92       	push	r0
    29a6:	cd b7       	in	r28, 0x3d	; 61
    29a8:	de b7       	in	r29, 0x3e	; 62
    29aa:	89 83       	std	Y+1, r24	; 0x01
    29ac:	6a 83       	std	Y+2, r22	; 0x02
	switch(Motor_Number)
    29ae:	89 81       	ldd	r24, Y+1	; 0x01
    29b0:	28 2f       	mov	r18, r24
    29b2:	30 e0       	ldi	r19, 0x00	; 0
    29b4:	3d 83       	std	Y+5, r19	; 0x05
    29b6:	2c 83       	std	Y+4, r18	; 0x04
    29b8:	8c 81       	ldd	r24, Y+4	; 0x04
    29ba:	9d 81       	ldd	r25, Y+5	; 0x05
    29bc:	81 30       	cpi	r24, 0x01	; 1
    29be:	91 05       	cpc	r25, r1
    29c0:	31 f0       	breq	.+12     	; 0x29ce <Motor_Start+0x32>
    29c2:	2c 81       	ldd	r18, Y+4	; 0x04
    29c4:	3d 81       	ldd	r19, Y+5	; 0x05
    29c6:	22 30       	cpi	r18, 0x02	; 2
    29c8:	31 05       	cpc	r19, r1
    29ca:	51 f0       	breq	.+20     	; 0x29e0 <Motor_Start+0x44>
    29cc:	12 c0       	rjmp	.+36     	; 0x29f2 <Motor_Start+0x56>
	{
	case MOTOR_1:
		Pwm_Start(PWM_CH1A,Mot_Speed,FREQUNCY);
    29ce:	81 e0       	ldi	r24, 0x01	; 1
    29d0:	6a 81       	ldd	r22, Y+2	; 0x02
    29d2:	28 ee       	ldi	r18, 0xE8	; 232
    29d4:	33 e0       	ldi	r19, 0x03	; 3
    29d6:	40 e0       	ldi	r20, 0x00	; 0
    29d8:	50 e0       	ldi	r21, 0x00	; 0
    29da:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <Pwm_Start>
    29de:	0c c0       	rjmp	.+24     	; 0x29f8 <Motor_Start+0x5c>
		break;
	case MOTOR_2:
		Pwm_Start(PWM_CH1B,Mot_Speed,FREQUNCY);
    29e0:	82 e0       	ldi	r24, 0x02	; 2
    29e2:	6a 81       	ldd	r22, Y+2	; 0x02
    29e4:	28 ee       	ldi	r18, 0xE8	; 232
    29e6:	33 e0       	ldi	r19, 0x03	; 3
    29e8:	40 e0       	ldi	r20, 0x00	; 0
    29ea:	50 e0       	ldi	r21, 0x00	; 0
    29ec:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <Pwm_Start>
    29f0:	03 c0       	rjmp	.+6      	; 0x29f8 <Motor_Start+0x5c>
		break;
	default:
		return E_NOK;
    29f2:	31 e0       	ldi	r19, 0x01	; 1
    29f4:	3b 83       	std	Y+3, r19	; 0x03
    29f6:	01 c0       	rjmp	.+2      	; 0x29fa <Motor_Start+0x5e>
		break;
	}
	return E_OK;
    29f8:	1b 82       	std	Y+3, r1	; 0x03
    29fa:	8b 81       	ldd	r24, Y+3	; 0x03

}
    29fc:	0f 90       	pop	r0
    29fe:	0f 90       	pop	r0
    2a00:	0f 90       	pop	r0
    2a02:	0f 90       	pop	r0
    2a04:	0f 90       	pop	r0
    2a06:	cf 91       	pop	r28
    2a08:	df 91       	pop	r29
    2a0a:	08 95       	ret

00002a0c <Motor_SpeedUpdate>:
 * output  	 : no output
 * return 	 : ERROR_STATUS
 * Descriptio: Controls the motor speed from getting the motor number and the speed.
 */
ERROR_STATUS Motor_SpeedUpdate(uint8 Motor_Number, uint8 Mot_Speed)
{
    2a0c:	df 93       	push	r29
    2a0e:	cf 93       	push	r28
    2a10:	00 d0       	rcall	.+0      	; 0x2a12 <Motor_SpeedUpdate+0x6>
    2a12:	00 d0       	rcall	.+0      	; 0x2a14 <Motor_SpeedUpdate+0x8>
    2a14:	0f 92       	push	r0
    2a16:	cd b7       	in	r28, 0x3d	; 61
    2a18:	de b7       	in	r29, 0x3e	; 62
    2a1a:	89 83       	std	Y+1, r24	; 0x01
    2a1c:	6a 83       	std	Y+2, r22	; 0x02
	switch(Motor_Number)
    2a1e:	89 81       	ldd	r24, Y+1	; 0x01
    2a20:	28 2f       	mov	r18, r24
    2a22:	30 e0       	ldi	r19, 0x00	; 0
    2a24:	3d 83       	std	Y+5, r19	; 0x05
    2a26:	2c 83       	std	Y+4, r18	; 0x04
    2a28:	8c 81       	ldd	r24, Y+4	; 0x04
    2a2a:	9d 81       	ldd	r25, Y+5	; 0x05
    2a2c:	81 30       	cpi	r24, 0x01	; 1
    2a2e:	91 05       	cpc	r25, r1
    2a30:	31 f0       	breq	.+12     	; 0x2a3e <Motor_SpeedUpdate+0x32>
    2a32:	2c 81       	ldd	r18, Y+4	; 0x04
    2a34:	3d 81       	ldd	r19, Y+5	; 0x05
    2a36:	22 30       	cpi	r18, 0x02	; 2
    2a38:	31 05       	cpc	r19, r1
    2a3a:	51 f0       	breq	.+20     	; 0x2a50 <Motor_SpeedUpdate+0x44>
    2a3c:	12 c0       	rjmp	.+36     	; 0x2a62 <Motor_SpeedUpdate+0x56>
		{
		case MOTOR_1:
			Pwm_Update(PWM_CH1A,Mot_Speed,FREQUNCY);
    2a3e:	81 e0       	ldi	r24, 0x01	; 1
    2a40:	6a 81       	ldd	r22, Y+2	; 0x02
    2a42:	28 ee       	ldi	r18, 0xE8	; 232
    2a44:	33 e0       	ldi	r19, 0x03	; 3
    2a46:	40 e0       	ldi	r20, 0x00	; 0
    2a48:	50 e0       	ldi	r21, 0x00	; 0
    2a4a:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <Pwm_Update>
    2a4e:	0c c0       	rjmp	.+24     	; 0x2a68 <Motor_SpeedUpdate+0x5c>
			break;
		case MOTOR_2:
			Pwm_Update(PWM_CH1B,Mot_Speed,FREQUNCY);
    2a50:	82 e0       	ldi	r24, 0x02	; 2
    2a52:	6a 81       	ldd	r22, Y+2	; 0x02
    2a54:	28 ee       	ldi	r18, 0xE8	; 232
    2a56:	33 e0       	ldi	r19, 0x03	; 3
    2a58:	40 e0       	ldi	r20, 0x00	; 0
    2a5a:	50 e0       	ldi	r21, 0x00	; 0
    2a5c:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <Pwm_Update>
    2a60:	03 c0       	rjmp	.+6      	; 0x2a68 <Motor_SpeedUpdate+0x5c>
			break;
		default:
			return E_NOK;
    2a62:	31 e0       	ldi	r19, 0x01	; 1
    2a64:	3b 83       	std	Y+3, r19	; 0x03
    2a66:	01 c0       	rjmp	.+2      	; 0x2a6a <Motor_SpeedUpdate+0x5e>
			break;
		}
	return E_OK;
    2a68:	1b 82       	std	Y+3, r1	; 0x03
    2a6a:	8b 81       	ldd	r24, Y+3	; 0x03

}
    2a6c:	0f 90       	pop	r0
    2a6e:	0f 90       	pop	r0
    2a70:	0f 90       	pop	r0
    2a72:	0f 90       	pop	r0
    2a74:	0f 90       	pop	r0
    2a76:	cf 91       	pop	r28
    2a78:	df 91       	pop	r29
    2a7a:	08 95       	ret

00002a7c <Motor_Stop>:
 * output  	 : no output
 * return 	 : ERROR_STATUS
 * Descriptio: stop the motor.
 */
ERROR_STATUS Motor_Stop(uint8 Motor_Number)
{
    2a7c:	df 93       	push	r29
    2a7e:	cf 93       	push	r28
    2a80:	00 d0       	rcall	.+0      	; 0x2a82 <Motor_Stop+0x6>
    2a82:	00 d0       	rcall	.+0      	; 0x2a84 <Motor_Stop+0x8>
    2a84:	cd b7       	in	r28, 0x3d	; 61
    2a86:	de b7       	in	r29, 0x3e	; 62
    2a88:	89 83       	std	Y+1, r24	; 0x01
	switch(Motor_Number){
    2a8a:	89 81       	ldd	r24, Y+1	; 0x01
    2a8c:	28 2f       	mov	r18, r24
    2a8e:	30 e0       	ldi	r19, 0x00	; 0
    2a90:	3c 83       	std	Y+4, r19	; 0x04
    2a92:	2b 83       	std	Y+3, r18	; 0x03
    2a94:	8b 81       	ldd	r24, Y+3	; 0x03
    2a96:	9c 81       	ldd	r25, Y+4	; 0x04
    2a98:	81 30       	cpi	r24, 0x01	; 1
    2a9a:	91 05       	cpc	r25, r1
    2a9c:	31 f0       	breq	.+12     	; 0x2aaa <Motor_Stop+0x2e>
    2a9e:	2b 81       	ldd	r18, Y+3	; 0x03
    2aa0:	3c 81       	ldd	r19, Y+4	; 0x04
    2aa2:	22 30       	cpi	r18, 0x02	; 2
    2aa4:	31 05       	cpc	r19, r1
    2aa6:	61 f0       	breq	.+24     	; 0x2ac0 <Motor_Stop+0x44>
    2aa8:	16 c0       	rjmp	.+44     	; 0x2ad6 <Motor_Stop+0x5a>
	case MOTOR_1:
		DIO_Write (MOTOR_OUT_1A_GPIO, MOTOR_OUT_1A_BIT, LOW);
    2aaa:	83 e0       	ldi	r24, 0x03	; 3
    2aac:	64 e0       	ldi	r22, 0x04	; 4
    2aae:	40 e0       	ldi	r20, 0x00	; 0
    2ab0:	0e 94 2e 12 	call	0x245c	; 0x245c <DIO_Write>
		DIO_Write (MOTOR_OUT_1B_GPIO, MOTOR_OUT_1B_BIT, LOW);
    2ab4:	83 e0       	ldi	r24, 0x03	; 3
    2ab6:	68 e0       	ldi	r22, 0x08	; 8
    2ab8:	40 e0       	ldi	r20, 0x00	; 0
    2aba:	0e 94 2e 12 	call	0x245c	; 0x245c <DIO_Write>
    2abe:	0e c0       	rjmp	.+28     	; 0x2adc <Motor_Stop+0x60>
		break;
	case MOTOR_2:
		DIO_Write (MOTOR_OUT_2A_GPIO, MOTOR_OUT_2A_BIT, LOW);
    2ac0:	83 e0       	ldi	r24, 0x03	; 3
    2ac2:	60 e4       	ldi	r22, 0x40	; 64
    2ac4:	40 e0       	ldi	r20, 0x00	; 0
    2ac6:	0e 94 2e 12 	call	0x245c	; 0x245c <DIO_Write>
		DIO_Write (MOTOR_OUT_2B_GPIO, MOTOR_OUT_2B_BIT, LOW);
    2aca:	83 e0       	ldi	r24, 0x03	; 3
    2acc:	60 e8       	ldi	r22, 0x80	; 128
    2ace:	40 e0       	ldi	r20, 0x00	; 0
    2ad0:	0e 94 2e 12 	call	0x245c	; 0x245c <DIO_Write>
    2ad4:	03 c0       	rjmp	.+6      	; 0x2adc <Motor_Stop+0x60>
		break;
	default :
		return E_NOK;
    2ad6:	31 e0       	ldi	r19, 0x01	; 1
    2ad8:	3a 83       	std	Y+2, r19	; 0x02
    2ada:	01 c0       	rjmp	.+2      	; 0x2ade <Motor_Stop+0x62>
		break;
	}
	return E_OK;
    2adc:	1a 82       	std	Y+2, r1	; 0x02
    2ade:	8a 81       	ldd	r24, Y+2	; 0x02

}
    2ae0:	0f 90       	pop	r0
    2ae2:	0f 90       	pop	r0
    2ae4:	0f 90       	pop	r0
    2ae6:	0f 90       	pop	r0
    2ae8:	cf 91       	pop	r28
    2aea:	df 91       	pop	r29
    2aec:	08 95       	ret

00002aee <Motor_GetStatus>:
 * In out		: none
 * Return		: Initialization_STATUS
 * Description	: Returns status of the motor whether initialized or not
 */
uint8 Motor_GetStatus(uint8 Motor_Number)
{
    2aee:	df 93       	push	r29
    2af0:	cf 93       	push	r28
    2af2:	00 d0       	rcall	.+0      	; 0x2af4 <Motor_GetStatus+0x6>
    2af4:	00 d0       	rcall	.+0      	; 0x2af6 <Motor_GetStatus+0x8>
    2af6:	cd b7       	in	r28, 0x3d	; 61
    2af8:	de b7       	in	r29, 0x3e	; 62
    2afa:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Status = NOT_INITIALIZED;
    2afc:	19 82       	std	Y+1, r1	; 0x01
	switch(Motor_Number){
    2afe:	8a 81       	ldd	r24, Y+2	; 0x02
    2b00:	28 2f       	mov	r18, r24
    2b02:	30 e0       	ldi	r19, 0x00	; 0
    2b04:	3c 83       	std	Y+4, r19	; 0x04
    2b06:	2b 83       	std	Y+3, r18	; 0x03
    2b08:	8b 81       	ldd	r24, Y+3	; 0x03
    2b0a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b0c:	81 30       	cpi	r24, 0x01	; 1
    2b0e:	91 05       	cpc	r25, r1
    2b10:	31 f0       	breq	.+12     	; 0x2b1e <Motor_GetStatus+0x30>
    2b12:	2b 81       	ldd	r18, Y+3	; 0x03
    2b14:	3c 81       	ldd	r19, Y+4	; 0x04
    2b16:	22 30       	cpi	r18, 0x02	; 2
    2b18:	31 05       	cpc	r19, r1
    2b1a:	51 f0       	breq	.+20     	; 0x2b30 <Motor_GetStatus+0x42>
    2b1c:	11 c0       	rjmp	.+34     	; 0x2b40 <Motor_GetStatus+0x52>
	case MOTOR_1:
		if(INITIALIZED == gu8_MOTOR1_CheckFor_Init)
    2b1e:	80 91 a9 00 	lds	r24, 0x00A9
    2b22:	81 30       	cpi	r24, 0x01	; 1
    2b24:	19 f4       	brne	.+6      	; 0x2b2c <Motor_GetStatus+0x3e>
		{
			Status = INITIALIZED;
    2b26:	81 e0       	ldi	r24, 0x01	; 1
    2b28:	89 83       	std	Y+1, r24	; 0x01
    2b2a:	0a c0       	rjmp	.+20     	; 0x2b40 <Motor_GetStatus+0x52>

		}
		else
		{
			Status = NOT_INITIALIZED;
    2b2c:	19 82       	std	Y+1, r1	; 0x01
    2b2e:	08 c0       	rjmp	.+16     	; 0x2b40 <Motor_GetStatus+0x52>

		}
		break;
	case MOTOR_2:
		if(INITIALIZED == gu8_MOTOR2_CheckFor_Init)
    2b30:	80 91 aa 00 	lds	r24, 0x00AA
    2b34:	81 30       	cpi	r24, 0x01	; 1
    2b36:	19 f4       	brne	.+6      	; 0x2b3e <Motor_GetStatus+0x50>
		{
			Status = INITIALIZED;
    2b38:	81 e0       	ldi	r24, 0x01	; 1
    2b3a:	89 83       	std	Y+1, r24	; 0x01
    2b3c:	01 c0       	rjmp	.+2      	; 0x2b40 <Motor_GetStatus+0x52>

		}
		else
		{
			Status = NOT_INITIALIZED;
    2b3e:	19 82       	std	Y+1, r1	; 0x01

		}
		break;
	}

	return Status;
    2b40:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b42:	0f 90       	pop	r0
    2b44:	0f 90       	pop	r0
    2b46:	0f 90       	pop	r0
    2b48:	0f 90       	pop	r0
    2b4a:	cf 91       	pop	r28
    2b4c:	df 91       	pop	r29
    2b4e:	08 95       	ret

00002b50 <Icu_TimerOverFlows_Callback_Func>:
 * Return 		:														   *
 * Description	: Called inside the timer overflow ISR by its address	   *
 * to calculate and deliver the timer overflows to the Icu module		   *
 ***************************************************************************/
void Icu_TimerOverFlows_Callback_Func(void)
{
    2b50:	df 93       	push	r29
    2b52:	cf 93       	push	r28
    2b54:	cd b7       	in	r28, 0x3d	; 61
    2b56:	de b7       	in	r29, 0x3e	; 62

	gOVF_Counts++;
    2b58:	80 91 ab 00 	lds	r24, 0x00AB
    2b5c:	90 91 ac 00 	lds	r25, 0x00AC
    2b60:	01 96       	adiw	r24, 0x01	; 1
    2b62:	90 93 ac 00 	sts	0x00AC, r25
    2b66:	80 93 ab 00 	sts	0x00AB, r24


}
    2b6a:	cf 91       	pop	r28
    2b6c:	df 91       	pop	r29
    2b6e:	08 95       	ret

00002b70 <Icu_EdgeToEdge_Callback_Func>:
 * Return 		:														   *
 * Description	: Called inside the external interrupt ISR by its address  *
 * to calculate and deliver the timer counts to the Icu module		       *
 ***************************************************************************/
void Icu_EdgeToEdge_Callback_Func(void)
{
    2b70:	df 93       	push	r29
    2b72:	cf 93       	push	r28
    2b74:	cd b7       	in	r28, 0x3d	; 61
    2b76:	de b7       	in	r29, 0x3e	; 62


	if(RISING_EDGE==gEdge_Flag )
    2b78:	80 91 75 00 	lds	r24, 0x0075
    2b7c:	83 30       	cpi	r24, 0x03	; 3
    2b7e:	89 f4       	brne	.+34     	; 0x2ba2 <Icu_EdgeToEdge_Callback_Func+0x32>
	{

		gOVF_Counts =IS_CLEAR;
    2b80:	10 92 ac 00 	sts	0x00AC, r1
    2b84:	10 92 ab 00 	sts	0x00AB, r1
		Timer_Start(TIMER_CH0,TCNT_VALUE);
    2b88:	80 e0       	ldi	r24, 0x00	; 0
    2b8a:	6f ef       	ldi	r22, 0xFF	; 255
    2b8c:	70 e0       	ldi	r23, 0x00	; 0
    2b8e:	0e 94 63 07 	call	0xec6	; 0xec6 <Timer_Start>

		ExternInt_SetEvent(EXTRN_INT_2, FALLING_EDGE);
    2b92:	82 e0       	ldi	r24, 0x02	; 2
    2b94:	62 e0       	ldi	r22, 0x02	; 2
    2b96:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <ExternInt_SetEvent>
		gEdge_Flag = FALLING_EDGE;
    2b9a:	82 e0       	ldi	r24, 0x02	; 2
    2b9c:	80 93 75 00 	sts	0x0075, r24
    2ba0:	24 c0       	rjmp	.+72     	; 0x2bea <Icu_EdgeToEdge_Callback_Func+0x7a>

	}
	else if( FALLING_EDGE == gEdge_Flag){
    2ba2:	80 91 75 00 	lds	r24, 0x0075
    2ba6:	82 30       	cpi	r24, 0x02	; 2
    2ba8:	01 f5       	brne	.+64     	; 0x2bea <Icu_EdgeToEdge_Callback_Func+0x7a>


		Timer_Stop(TIMER_CH0);
    2baa:	80 e0       	ldi	r24, 0x00	; 0
    2bac:	0e 94 0d 08 	call	0x101a	; 0x101a <Timer_Stop>

		Timer_GetValue(TIMER_CH0, &gTimer_Counts);
    2bb0:	2d ea       	ldi	r18, 0xAD	; 173
    2bb2:	30 e0       	ldi	r19, 0x00	; 0
    2bb4:	80 e0       	ldi	r24, 0x00	; 0
    2bb6:	b9 01       	movw	r22, r18
    2bb8:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <Timer_GetValue>
		gTimer_Counts += (gOVF_Counts * TIMER_FACTOR);
    2bbc:	80 91 ab 00 	lds	r24, 0x00AB
    2bc0:	90 91 ac 00 	lds	r25, 0x00AC
    2bc4:	38 2f       	mov	r19, r24
    2bc6:	22 27       	eor	r18, r18
    2bc8:	80 91 ad 00 	lds	r24, 0x00AD
    2bcc:	90 91 ae 00 	lds	r25, 0x00AE
    2bd0:	82 0f       	add	r24, r18
    2bd2:	93 1f       	adc	r25, r19
    2bd4:	90 93 ae 00 	sts	0x00AE, r25
    2bd8:	80 93 ad 00 	sts	0x00AD, r24

		ExternInt_SetEvent(EXTRN_INT_2, RISING_EDGE);
    2bdc:	82 e0       	ldi	r24, 0x02	; 2
    2bde:	63 e0       	ldi	r22, 0x03	; 3
    2be0:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <ExternInt_SetEvent>
		gEdge_Flag = RISING_EDGE;
    2be4:	83 e0       	ldi	r24, 0x03	; 3
    2be6:	80 93 75 00 	sts	0x0075, r24

	}
	Ready_To_Send_Flag = IS_SET;
    2bea:	81 e0       	ldi	r24, 0x01	; 1
    2bec:	80 93 af 00 	sts	0x00AF, r24

}
    2bf0:	cf 91       	pop	r28
    2bf2:	df 91       	pop	r29
    2bf4:	08 95       	ret

00002bf6 <Icu_Init>:
 * Description  : Initializes the ICU by initializing the timer			  *
 * 				  and enabling the global interrupt						  *
 **************************************************************************/

ERROR_STATUS Icu_Init(Icu_cfg_s * Icu_Cfg)
{
    2bf6:	df 93       	push	r29
    2bf8:	cf 93       	push	r28
    2bfa:	cd b7       	in	r28, 0x3d	; 61
    2bfc:	de b7       	in	r29, 0x3e	; 62
    2bfe:	2d 97       	sbiw	r28, 0x0d	; 13
    2c00:	0f b6       	in	r0, 0x3f	; 63
    2c02:	f8 94       	cli
    2c04:	de bf       	out	0x3e, r29	; 62
    2c06:	0f be       	out	0x3f, r0	; 63
    2c08:	cd bf       	out	0x3d, r28	; 61
    2c0a:	9c 87       	std	Y+12, r25	; 0x0c
    2c0c:	8b 87       	std	Y+11, r24	; 0x0b

	ExternInt_Cfg_s ExtInt_Cfg;
	ExtInt_Cfg.ExternInt_No = ICU_CH2 ;
    2c0e:	82 e0       	ldi	r24, 0x02	; 2
    2c10:	89 83       	std	Y+1, r24	; 0x01
	ExtInt_Cfg.ExternInt_Event = RISING_EDGE;
    2c12:	83 e0       	ldi	r24, 0x03	; 3
    2c14:	8a 83       	std	Y+2, r24	; 0x02
	ExtInt_Cfg.ExternInt_CBF_Ptr = Icu_EdgeToEdge_Callback_Func;
    2c16:	88 eb       	ldi	r24, 0xB8	; 184
    2c18:	95 e1       	ldi	r25, 0x15	; 21
    2c1a:	9c 83       	std	Y+4, r25	; 0x04
    2c1c:	8b 83       	std	Y+3, r24	; 0x03
	ExternInt_Init(&ExtInt_Cfg);
    2c1e:	ce 01       	movw	r24, r28
    2c20:	01 96       	adiw	r24, 0x01	; 1
    2c22:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <ExternInt_Init>
	ExternInt_Enable(ICU_CH2);
    2c26:	82 e0       	ldi	r24, 0x02	; 2
    2c28:	0e 94 68 10 	call	0x20d0	; 0x20d0 <ExternInt_Enable>
	Timer_cfg_s Timer_Cfg;
	Timer_Cfg.Timer_CH_NO = TIMER_CH0;
    2c2c:	1d 82       	std	Y+5, r1	; 0x05
	Timer_Cfg.Timer_Mode = TIMER_MODE;
    2c2e:	1e 82       	std	Y+6, r1	; 0x06
	Timer_Cfg.Timer_Polling_Or_Interrupt = TIMER_INTERRUPT_MODE;
    2c30:	81 e0       	ldi	r24, 0x01	; 1
    2c32:	8f 83       	std	Y+7, r24	; 0x07
	Timer_Cfg.Timer_Prescaler = TIMER_PRESCALER_1024;
    2c34:	87 e0       	ldi	r24, 0x07	; 7
    2c36:	88 87       	std	Y+8, r24	; 0x08
	Timer_Cfg.Timer_Cbk_ptr= Icu_TimerOverFlows_Callback_Func;
    2c38:	88 ea       	ldi	r24, 0xA8	; 168
    2c3a:	95 e1       	ldi	r25, 0x15	; 21
    2c3c:	9a 87       	std	Y+10, r25	; 0x0a
    2c3e:	89 87       	std	Y+9, r24	; 0x09
	Timer_Init(&Timer_Cfg);
    2c40:	ce 01       	movw	r24, r28
    2c42:	05 96       	adiw	r24, 0x05	; 5
    2c44:	0e 94 3c 06 	call	0xc78	; 0xc78 <Timer_Init>

	if (Icu_Cfg->ICU_Ch_No == ICU_CH2)
    2c48:	eb 85       	ldd	r30, Y+11	; 0x0b
    2c4a:	fc 85       	ldd	r31, Y+12	; 0x0c
    2c4c:	80 81       	ld	r24, Z
    2c4e:	82 30       	cpi	r24, 0x02	; 2
    2c50:	31 f4       	brne	.+12     	; 0x2c5e <Icu_Init+0x68>
	{
		ExternInt_Init(&ExtInt_Cfg);
    2c52:	ce 01       	movw	r24, r28
    2c54:	01 96       	adiw	r24, 0x01	; 1
    2c56:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <ExternInt_Init>
	}
	else
	{
		return E_NOK;
	}
	return E_OK;
    2c5a:	1d 86       	std	Y+13, r1	; 0x0d
    2c5c:	02 c0       	rjmp	.+4      	; 0x2c62 <Icu_Init+0x6c>


	}
	else
	{
		return E_NOK;
    2c5e:	81 e0       	ldi	r24, 0x01	; 1
    2c60:	8d 87       	std	Y+13, r24	; 0x0d
    2c62:	8d 85       	ldd	r24, Y+13	; 0x0d
	}
	return E_OK;
}
    2c64:	2d 96       	adiw	r28, 0x0d	; 13
    2c66:	0f b6       	in	r0, 0x3f	; 63
    2c68:	f8 94       	cli
    2c6a:	de bf       	out	0x3e, r29	; 62
    2c6c:	0f be       	out	0x3f, r0	; 63
    2c6e:	cd bf       	out	0x3d, r28	; 61
    2c70:	cf 91       	pop	r28
    2c72:	df 91       	pop	r29
    2c74:	08 95       	ret

00002c76 <Icu_RiseToFall>:
 * Description	: calculates the time between the rising and the falling   *
 * 				  edges												 	   *
 ***************************************************************************/

ERROR_STATUS Icu_RiseToFall(uint16 * Icu_Time)
{
    2c76:	df 93       	push	r29
    2c78:	cf 93       	push	r28
    2c7a:	00 d0       	rcall	.+0      	; 0x2c7c <Icu_RiseToFall+0x6>
    2c7c:	cd b7       	in	r28, 0x3d	; 61
    2c7e:	de b7       	in	r29, 0x3e	; 62
    2c80:	9a 83       	std	Y+2, r25	; 0x02
    2c82:	89 83       	std	Y+1, r24	; 0x01
//	while (!Ready_To_Send_Flag );
	*Icu_Time = gTimer_Counts;
    2c84:	80 91 ad 00 	lds	r24, 0x00AD
    2c88:	90 91 ae 00 	lds	r25, 0x00AE
    2c8c:	e9 81       	ldd	r30, Y+1	; 0x01
    2c8e:	fa 81       	ldd	r31, Y+2	; 0x02
    2c90:	91 83       	std	Z+1, r25	; 0x01
    2c92:	80 83       	st	Z, r24

	Ready_To_Send_Flag = IS_CLEAR;
    2c94:	10 92 af 00 	sts	0x00AF, r1
	//gTimer_Counts = 0;
	return E_OK;
    2c98:	80 e0       	ldi	r24, 0x00	; 0
}
    2c9a:	0f 90       	pop	r0
    2c9c:	0f 90       	pop	r0
    2c9e:	cf 91       	pop	r28
    2ca0:	df 91       	pop	r29
    2ca2:	08 95       	ret

00002ca4 <Icu_FallToRise>:
 *				  - E_NOK : not successful								   *
 * Description	: calculates the time between the falling and the rising   *
 * 				  edges													   *
 ***************************************************************************/
ERROR_STATUS Icu_FallToRise(uint32 * Icu_Time)
{
    2ca4:	df 93       	push	r29
    2ca6:	cf 93       	push	r28
    2ca8:	00 d0       	rcall	.+0      	; 0x2caa <Icu_FallToRise+0x6>
    2caa:	cd b7       	in	r28, 0x3d	; 61
    2cac:	de b7       	in	r29, 0x3e	; 62
    2cae:	9a 83       	std	Y+2, r25	; 0x02
    2cb0:	89 83       	std	Y+1, r24	; 0x01
	return E_OK;
    2cb2:	80 e0       	ldi	r24, 0x00	; 0
}
    2cb4:	0f 90       	pop	r0
    2cb6:	0f 90       	pop	r0
    2cb8:	cf 91       	pop	r28
    2cba:	df 91       	pop	r29
    2cbc:	08 95       	ret

00002cbe <Icu_RiseToRise>:
 *				  - E_NOK : not successful								   *
 * Description	: calculates the time between the rising edge and the next *
 * 				  rising edge											   *
 ***************************************************************************/
ERROR_STATUS Icu_RiseToRise(uint32 * Icu_Time)
{
    2cbe:	df 93       	push	r29
    2cc0:	cf 93       	push	r28
    2cc2:	00 d0       	rcall	.+0      	; 0x2cc4 <Icu_RiseToRise+0x6>
    2cc4:	cd b7       	in	r28, 0x3d	; 61
    2cc6:	de b7       	in	r29, 0x3e	; 62
    2cc8:	9a 83       	std	Y+2, r25	; 0x02
    2cca:	89 83       	std	Y+1, r24	; 0x01
	return E_OK;
    2ccc:	80 e0       	ldi	r24, 0x00	; 0
}
    2cce:	0f 90       	pop	r0
    2cd0:	0f 90       	pop	r0
    2cd2:	cf 91       	pop	r28
    2cd4:	df 91       	pop	r29
    2cd6:	08 95       	ret

00002cd8 <Steering_Init>:
 * Description: Initiates the module.
 *
 */

ERROR_STATUS Steering_Init(void)
{
    2cd8:	df 93       	push	r29
    2cda:	cf 93       	push	r28
    2cdc:	cd b7       	in	r28, 0x3d	; 61
    2cde:	de b7       	in	r29, 0x3e	; 62

	//INIT MOTOR1
	Motor_Init(MOTOR_1);
    2ce0:	81 e0       	ldi	r24, 0x01	; 1
    2ce2:	0e 94 02 14 	call	0x2804	; 0x2804 <Motor_Init>
	//INIT MOTOR2
	Motor_Init(MOTOR_2);
    2ce6:	82 e0       	ldi	r24, 0x02	; 2
    2ce8:	0e 94 02 14 	call	0x2804	; 0x2804 <Motor_Init>

	Motor_Start( MOTOR_1, OFF);
    2cec:	81 e0       	ldi	r24, 0x01	; 1
    2cee:	60 e0       	ldi	r22, 0x00	; 0
    2cf0:	0e 94 ce 14 	call	0x299c	; 0x299c <Motor_Start>
	Motor_Start( MOTOR_2, OFF);
    2cf4:	82 e0       	ldi	r24, 0x02	; 2
    2cf6:	60 e0       	ldi	r22, 0x00	; 0
    2cf8:	0e 94 ce 14 	call	0x299c	; 0x299c <Motor_Start>

	return E_OK;
    2cfc:	80 e0       	ldi	r24, 0x00	; 0
}
    2cfe:	cf 91       	pop	r28
    2d00:	df 91       	pop	r29
    2d02:	08 95       	ret

00002d04 <Steering_SteerCar>:
 * Return: The error status of the function.
 * Description: This function controls the direction and the speed of the car.
 *
 */
ERROR_STATUS Steering_SteerCar(uint8 carDirection, uint8 speed)
{
    2d04:	df 93       	push	r29
    2d06:	cf 93       	push	r28
    2d08:	00 d0       	rcall	.+0      	; 0x2d0a <Steering_SteerCar+0x6>
    2d0a:	00 d0       	rcall	.+0      	; 0x2d0c <Steering_SteerCar+0x8>
    2d0c:	0f 92       	push	r0
    2d0e:	cd b7       	in	r28, 0x3d	; 61
    2d10:	de b7       	in	r29, 0x3e	; 62
    2d12:	89 83       	std	Y+1, r24	; 0x01
    2d14:	6a 83       	std	Y+2, r22	; 0x02
	switch (carDirection)
    2d16:	89 81       	ldd	r24, Y+1	; 0x01
    2d18:	28 2f       	mov	r18, r24
    2d1a:	30 e0       	ldi	r19, 0x00	; 0
    2d1c:	3d 83       	std	Y+5, r19	; 0x05
    2d1e:	2c 83       	std	Y+4, r18	; 0x04
    2d20:	8c 81       	ldd	r24, Y+4	; 0x04
    2d22:	9d 81       	ldd	r25, Y+5	; 0x05
    2d24:	82 30       	cpi	r24, 0x02	; 2
    2d26:	91 05       	cpc	r25, r1
    2d28:	91 f1       	breq	.+100    	; 0x2d8e <Steering_SteerCar+0x8a>
    2d2a:	2c 81       	ldd	r18, Y+4	; 0x04
    2d2c:	3d 81       	ldd	r19, Y+5	; 0x05
    2d2e:	23 30       	cpi	r18, 0x03	; 3
    2d30:	31 05       	cpc	r19, r1
    2d32:	54 f4       	brge	.+20     	; 0x2d48 <Steering_SteerCar+0x44>
    2d34:	8c 81       	ldd	r24, Y+4	; 0x04
    2d36:	9d 81       	ldd	r25, Y+5	; 0x05
    2d38:	00 97       	sbiw	r24, 0x00	; 0
    2d3a:	89 f0       	breq	.+34     	; 0x2d5e <Steering_SteerCar+0x5a>
    2d3c:	2c 81       	ldd	r18, Y+4	; 0x04
    2d3e:	3d 81       	ldd	r19, Y+5	; 0x05
    2d40:	21 30       	cpi	r18, 0x01	; 1
    2d42:	31 05       	cpc	r19, r1
    2d44:	99 f0       	breq	.+38     	; 0x2d6c <Steering_SteerCar+0x68>
    2d46:	54 c0       	rjmp	.+168    	; 0x2df0 <Steering_SteerCar+0xec>
    2d48:	8c 81       	ldd	r24, Y+4	; 0x04
    2d4a:	9d 81       	ldd	r25, Y+5	; 0x05
    2d4c:	83 30       	cpi	r24, 0x03	; 3
    2d4e:	91 05       	cpc	r25, r1
    2d50:	79 f1       	breq	.+94     	; 0x2db0 <Steering_SteerCar+0xac>
    2d52:	2c 81       	ldd	r18, Y+4	; 0x04
    2d54:	3d 81       	ldd	r19, Y+5	; 0x05
    2d56:	24 30       	cpi	r18, 0x04	; 4
    2d58:	31 05       	cpc	r19, r1
    2d5a:	d1 f1       	breq	.+116    	; 0x2dd0 <Steering_SteerCar+0xcc>
    2d5c:	49 c0       	rjmp	.+146    	; 0x2df0 <Steering_SteerCar+0xec>
	{
	case CAR_STOP :
		Motor_Stop(MOTOR_1);
    2d5e:	81 e0       	ldi	r24, 0x01	; 1
    2d60:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <Motor_Stop>
		Motor_Stop(MOTOR_2);
    2d64:	82 e0       	ldi	r24, 0x02	; 2
    2d66:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <Motor_Stop>
    2d6a:	45 c0       	rjmp	.+138    	; 0x2df6 <Steering_SteerCar+0xf2>
		break;

	case CAR_FORWARD :
		Motor_Direction(MOTOR_1,MOTOR_FORWARD);
    2d6c:	81 e0       	ldi	r24, 0x01	; 1
    2d6e:	61 e0       	ldi	r22, 0x01	; 1
    2d70:	0e 94 52 14 	call	0x28a4	; 0x28a4 <Motor_Direction>
		Motor_Direction(MOTOR_2,MOTOR_FORWARD);
    2d74:	82 e0       	ldi	r24, 0x02	; 2
    2d76:	61 e0       	ldi	r22, 0x01	; 1
    2d78:	0e 94 52 14 	call	0x28a4	; 0x28a4 <Motor_Direction>
		Motor_SpeedUpdate(MOTOR_1,speed);
    2d7c:	81 e0       	ldi	r24, 0x01	; 1
    2d7e:	6a 81       	ldd	r22, Y+2	; 0x02
    2d80:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <Motor_SpeedUpdate>
		Motor_SpeedUpdate(MOTOR_2,speed);
    2d84:	82 e0       	ldi	r24, 0x02	; 2
    2d86:	6a 81       	ldd	r22, Y+2	; 0x02
    2d88:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <Motor_SpeedUpdate>
    2d8c:	34 c0       	rjmp	.+104    	; 0x2df6 <Steering_SteerCar+0xf2>
		break;
	case CAR_BACKWARD :
		Motor_Direction(MOTOR_1,MOTOR_BACKWORD);
    2d8e:	81 e0       	ldi	r24, 0x01	; 1
    2d90:	62 e0       	ldi	r22, 0x02	; 2
    2d92:	0e 94 52 14 	call	0x28a4	; 0x28a4 <Motor_Direction>
		Motor_Direction(MOTOR_2,MOTOR_BACKWORD);
    2d96:	82 e0       	ldi	r24, 0x02	; 2
    2d98:	62 e0       	ldi	r22, 0x02	; 2
    2d9a:	0e 94 52 14 	call	0x28a4	; 0x28a4 <Motor_Direction>
		Motor_SpeedUpdate(MOTOR_1,speed);
    2d9e:	81 e0       	ldi	r24, 0x01	; 1
    2da0:	6a 81       	ldd	r22, Y+2	; 0x02
    2da2:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <Motor_SpeedUpdate>
		Motor_SpeedUpdate(MOTOR_2,speed);
    2da6:	82 e0       	ldi	r24, 0x02	; 2
    2da8:	6a 81       	ldd	r22, Y+2	; 0x02
    2daa:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <Motor_SpeedUpdate>
    2dae:	23 c0       	rjmp	.+70     	; 0x2df6 <Steering_SteerCar+0xf2>
		break;
	case CAR_RIGHT :
		Motor_Direction(MOTOR_1,MOTOR_FORWARD);
    2db0:	81 e0       	ldi	r24, 0x01	; 1
    2db2:	61 e0       	ldi	r22, 0x01	; 1
    2db4:	0e 94 52 14 	call	0x28a4	; 0x28a4 <Motor_Direction>
		Motor_Stop(MOTOR_2);
    2db8:	82 e0       	ldi	r24, 0x02	; 2
    2dba:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <Motor_Stop>
		Motor_SpeedUpdate(MOTOR_1,speed);
    2dbe:	81 e0       	ldi	r24, 0x01	; 1
    2dc0:	6a 81       	ldd	r22, Y+2	; 0x02
    2dc2:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <Motor_SpeedUpdate>
		Motor_SpeedUpdate(MOTOR_2,speed);
    2dc6:	82 e0       	ldi	r24, 0x02	; 2
    2dc8:	6a 81       	ldd	r22, Y+2	; 0x02
    2dca:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <Motor_SpeedUpdate>
    2dce:	13 c0       	rjmp	.+38     	; 0x2df6 <Steering_SteerCar+0xf2>
		break;
	case CAR_LEFT :
		Motor_Direction(MOTOR_2,MOTOR_FORWARD);
    2dd0:	82 e0       	ldi	r24, 0x02	; 2
    2dd2:	61 e0       	ldi	r22, 0x01	; 1
    2dd4:	0e 94 52 14 	call	0x28a4	; 0x28a4 <Motor_Direction>
		Motor_Stop(MOTOR_1);
    2dd8:	81 e0       	ldi	r24, 0x01	; 1
    2dda:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <Motor_Stop>
		Motor_SpeedUpdate(MOTOR_1,speed);
    2dde:	81 e0       	ldi	r24, 0x01	; 1
    2de0:	6a 81       	ldd	r22, Y+2	; 0x02
    2de2:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <Motor_SpeedUpdate>
		Motor_SpeedUpdate(MOTOR_2,speed);
    2de6:	82 e0       	ldi	r24, 0x02	; 2
    2de8:	6a 81       	ldd	r22, Y+2	; 0x02
    2dea:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <Motor_SpeedUpdate>
    2dee:	03 c0       	rjmp	.+6      	; 0x2df6 <Steering_SteerCar+0xf2>
		break;
	default :
		return E_NOK;
    2df0:	31 e0       	ldi	r19, 0x01	; 1
    2df2:	3b 83       	std	Y+3, r19	; 0x03
    2df4:	01 c0       	rjmp	.+2      	; 0x2df8 <Steering_SteerCar+0xf4>
		break;
	}

	return E_OK;
    2df6:	1b 82       	std	Y+3, r1	; 0x03
    2df8:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2dfa:	0f 90       	pop	r0
    2dfc:	0f 90       	pop	r0
    2dfe:	0f 90       	pop	r0
    2e00:	0f 90       	pop	r0
    2e02:	0f 90       	pop	r0
    2e04:	cf 91       	pop	r28
    2e06:	df 91       	pop	r29
    2e08:	08 95       	ret

00002e0a <Car_SM_Init>:
 * -------------- #E_Nok->function operation failed, error exists
 * Description--: Initiate the car state machine with state"forward at speed 80%",
 * -------------- And initiate steering and ultrasonic functions
 */
ERROR_STATUS Car_SM_Init(void)
{
    2e0a:	df 93       	push	r29
    2e0c:	cf 93       	push	r28
    2e0e:	00 d0       	rcall	.+0      	; 0x2e10 <Car_SM_Init+0x6>
    2e10:	0f 92       	push	r0
    2e12:	cd b7       	in	r28, 0x3d	; 61
    2e14:	de b7       	in	r29, 0x3e	; 62
	ERROR_STATUS Check_US_Init=E_NOK;
    2e16:	81 e0       	ldi	r24, 0x01	; 1
    2e18:	8a 83       	std	Y+2, r24	; 0x02
	ERROR_STATUS Check_Steering_Init=E_NOK;
    2e1a:	81 e0       	ldi	r24, 0x01	; 1
    2e1c:	89 83       	std	Y+1, r24	; 0x01

	Check_US_Init = Us_Init();
    2e1e:	0e 94 93 13 	call	0x2726	; 0x2726 <Us_Init>
    2e22:	8a 83       	std	Y+2, r24	; 0x02
	Check_Steering_Init	= Steering_Init();
    2e24:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <Steering_Init>
    2e28:	89 83       	std	Y+1, r24	; 0x01
	if(E_OK == Check_US_Init && E_OK ==  Check_Steering_Init)
    2e2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e2c:	88 23       	and	r24, r24
    2e2e:	29 f4       	brne	.+10     	; 0x2e3a <Car_SM_Init+0x30>
    2e30:	89 81       	ldd	r24, Y+1	; 0x01
    2e32:	88 23       	and	r24, r24
    2e34:	11 f4       	brne	.+4      	; 0x2e3a <Car_SM_Init+0x30>
	{
		return E_OK;
    2e36:	1b 82       	std	Y+3, r1	; 0x03
    2e38:	02 c0       	rjmp	.+4      	; 0x2e3e <Car_SM_Init+0x34>
	}
	else
	{
		return E_NOK;
    2e3a:	81 e0       	ldi	r24, 0x01	; 1
    2e3c:	8b 83       	std	Y+3, r24	; 0x03
    2e3e:	8b 81       	ldd	r24, Y+3	; 0x03

	}


}
    2e40:	0f 90       	pop	r0
    2e42:	0f 90       	pop	r0
    2e44:	0f 90       	pop	r0
    2e46:	cf 91       	pop	r28
    2e48:	df 91       	pop	r29
    2e4a:	08 95       	ret

00002e4c <Car_SM_Update>:
 * -------------- #E_Nok->function operation faild, error exists
 * Description--: changes car state according to the ultrasonic input
 * -------------- And represents the motors output for each state
 */
ERROR_STATUS Car_SM_Update(void)
{
    2e4c:	df 93       	push	r29
    2e4e:	cf 93       	push	r28
    2e50:	00 d0       	rcall	.+0      	; 0x2e52 <Car_SM_Update+0x6>
    2e52:	0f 92       	push	r0
    2e54:	cd b7       	in	r28, 0x3d	; 61
    2e56:	de b7       	in	r29, 0x3e	; 62

	Us_GetDistance(&g_Us_Reading);
    2e58:	81 eb       	ldi	r24, 0xB1	; 177
    2e5a:	90 e0       	ldi	r25, 0x00	; 0
    2e5c:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <Us_GetDistance>
	switch(g_Car_State)
    2e60:	80 91 b0 00 	lds	r24, 0x00B0
    2e64:	28 2f       	mov	r18, r24
    2e66:	30 e0       	ldi	r19, 0x00	; 0
    2e68:	3b 83       	std	Y+3, r19	; 0x03
    2e6a:	2a 83       	std	Y+2, r18	; 0x02
    2e6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e6e:	9b 81       	ldd	r25, Y+3	; 0x03
    2e70:	83 30       	cpi	r24, 0x03	; 3
    2e72:	91 05       	cpc	r25, r1
    2e74:	49 f1       	breq	.+82     	; 0x2ec8 <Car_SM_Update+0x7c>
    2e76:	2a 81       	ldd	r18, Y+2	; 0x02
    2e78:	3b 81       	ldd	r19, Y+3	; 0x03
    2e7a:	24 30       	cpi	r18, 0x04	; 4
    2e7c:	31 05       	cpc	r19, r1
    2e7e:	54 f4       	brge	.+20     	; 0x2e94 <Car_SM_Update+0x48>
    2e80:	8a 81       	ldd	r24, Y+2	; 0x02
    2e82:	9b 81       	ldd	r25, Y+3	; 0x03
    2e84:	00 97       	sbiw	r24, 0x00	; 0
    2e86:	89 f0       	breq	.+34     	; 0x2eaa <Car_SM_Update+0x5e>
    2e88:	2a 81       	ldd	r18, Y+2	; 0x02
    2e8a:	3b 81       	ldd	r19, Y+3	; 0x03
    2e8c:	22 30       	cpi	r18, 0x02	; 2
    2e8e:	31 05       	cpc	r19, r1
    2e90:	01 f1       	breq	.+64     	; 0x2ed2 <Car_SM_Update+0x86>
    2e92:	24 c0       	rjmp	.+72     	; 0x2edc <Car_SM_Update+0x90>
    2e94:	8a 81       	ldd	r24, Y+2	; 0x02
    2e96:	9b 81       	ldd	r25, Y+3	; 0x03
    2e98:	85 30       	cpi	r24, 0x05	; 5
    2e9a:	91 05       	cpc	r25, r1
    2e9c:	59 f0       	breq	.+22     	; 0x2eb4 <Car_SM_Update+0x68>
    2e9e:	2a 81       	ldd	r18, Y+2	; 0x02
    2ea0:	3b 81       	ldd	r19, Y+3	; 0x03
    2ea2:	26 30       	cpi	r18, 0x06	; 6
    2ea4:	31 05       	cpc	r19, r1
    2ea6:	59 f0       	breq	.+22     	; 0x2ebe <Car_SM_Update+0x72>
    2ea8:	19 c0       	rjmp	.+50     	; 0x2edc <Car_SM_Update+0x90>
	{
	case CAR_STOP:
		Steering_SteerCar(CAR_STOP, 0);
    2eaa:	80 e0       	ldi	r24, 0x00	; 0
    2eac:	60 e0       	ldi	r22, 0x00	; 0
    2eae:	0e 94 82 16 	call	0x2d04	; 0x2d04 <Steering_SteerCar>
    2eb2:	17 c0       	rjmp	.+46     	; 0x2ee2 <Car_SM_Update+0x96>
		break;
	case CAR_FORWARD_80:
		Steering_SteerCar(CAR_FORWARD, 80);
    2eb4:	81 e0       	ldi	r24, 0x01	; 1
    2eb6:	60 e5       	ldi	r22, 0x50	; 80
    2eb8:	0e 94 82 16 	call	0x2d04	; 0x2d04 <Steering_SteerCar>
    2ebc:	12 c0       	rjmp	.+36     	; 0x2ee2 <Car_SM_Update+0x96>
		break;
	case CAR_FORWARD_30:
		Steering_SteerCar(CAR_FORWARD, 30);
    2ebe:	81 e0       	ldi	r24, 0x01	; 1
    2ec0:	6e e1       	ldi	r22, 0x1E	; 30
    2ec2:	0e 94 82 16 	call	0x2d04	; 0x2d04 <Steering_SteerCar>
    2ec6:	0d c0       	rjmp	.+26     	; 0x2ee2 <Car_SM_Update+0x96>
		break;
	case CAR_RIGHT:
		Steering_SteerCar(CAR_RIGHT, 30);
    2ec8:	83 e0       	ldi	r24, 0x03	; 3
    2eca:	6e e1       	ldi	r22, 0x1E	; 30
    2ecc:	0e 94 82 16 	call	0x2d04	; 0x2d04 <Steering_SteerCar>
    2ed0:	08 c0       	rjmp	.+16     	; 0x2ee2 <Car_SM_Update+0x96>
		break;
	case CAR_BACKWARD:
		Steering_SteerCar(CAR_BACKWARD, 30);
    2ed2:	82 e0       	ldi	r24, 0x02	; 2
    2ed4:	6e e1       	ldi	r22, 0x1E	; 30
    2ed6:	0e 94 82 16 	call	0x2d04	; 0x2d04 <Steering_SteerCar>
    2eda:	03 c0       	rjmp	.+6      	; 0x2ee2 <Car_SM_Update+0x96>
		break;
	default:
		return E_NOK;
    2edc:	31 e0       	ldi	r19, 0x01	; 1
    2ede:	39 83       	std	Y+1, r19	; 0x01
    2ee0:	25 c0       	rjmp	.+74     	; 0x2f2c <Car_SM_Update+0xe0>
		break;
	}
	if(g_Us_Reading >= 50){
    2ee2:	80 91 b1 00 	lds	r24, 0x00B1
    2ee6:	90 91 b2 00 	lds	r25, 0x00B2
    2eea:	82 33       	cpi	r24, 0x32	; 50
    2eec:	91 05       	cpc	r25, r1
    2eee:	20 f0       	brcs	.+8      	; 0x2ef8 <Car_SM_Update+0xac>
		g_Car_State = CAR_FORWARD_80;
    2ef0:	85 e0       	ldi	r24, 0x05	; 5
    2ef2:	80 93 b0 00 	sts	0x00B0, r24
    2ef6:	19 c0       	rjmp	.+50     	; 0x2f2a <Car_SM_Update+0xde>
		}
		else if((g_Us_Reading > 30 )){
    2ef8:	80 91 b1 00 	lds	r24, 0x00B1
    2efc:	90 91 b2 00 	lds	r25, 0x00B2
    2f00:	8f 31       	cpi	r24, 0x1F	; 31
    2f02:	91 05       	cpc	r25, r1
    2f04:	20 f0       	brcs	.+8      	; 0x2f0e <Car_SM_Update+0xc2>
			g_Car_State = CAR_FORWARD_30;
    2f06:	86 e0       	ldi	r24, 0x06	; 6
    2f08:	80 93 b0 00 	sts	0x00B0, r24
    2f0c:	0e c0       	rjmp	.+28     	; 0x2f2a <Car_SM_Update+0xde>
		}
		else if((g_Us_Reading == 30 )){
    2f0e:	80 91 b1 00 	lds	r24, 0x00B1
    2f12:	90 91 b2 00 	lds	r25, 0x00B2
    2f16:	8e 31       	cpi	r24, 0x1E	; 30
    2f18:	91 05       	cpc	r25, r1
    2f1a:	21 f4       	brne	.+8      	; 0x2f24 <Car_SM_Update+0xd8>
			g_Car_State = CAR_RIGHT;
    2f1c:	83 e0       	ldi	r24, 0x03	; 3
    2f1e:	80 93 b0 00 	sts	0x00B0, r24
    2f22:	03 c0       	rjmp	.+6      	; 0x2f2a <Car_SM_Update+0xde>
		}
		else{
			g_Car_State = CAR_BACKWARD;
    2f24:	82 e0       	ldi	r24, 0x02	; 2
    2f26:	80 93 b0 00 	sts	0x00B0, r24
		}

	return E_OK;
    2f2a:	19 82       	std	Y+1, r1	; 0x01
    2f2c:	89 81       	ldd	r24, Y+1	; 0x01

}
    2f2e:	0f 90       	pop	r0
    2f30:	0f 90       	pop	r0
    2f32:	0f 90       	pop	r0
    2f34:	cf 91       	pop	r28
    2f36:	df 91       	pop	r29
    2f38:	08 95       	ret

00002f3a <LCD_EN_pulse>:
//*****************************************************************************
#include "char_lcd.h"
#include "avr/delay.h"


void LCD_EN_pulse(void){
    2f3a:	df 93       	push	r29
    2f3c:	cf 93       	push	r28
    2f3e:	cd b7       	in	r28, 0x3d	; 61
    2f40:	de b7       	in	r29, 0x3e	; 62
    2f42:	6c 97       	sbiw	r28, 0x1c	; 28
    2f44:	0f b6       	in	r0, 0x3f	; 63
    2f46:	f8 94       	cli
    2f48:	de bf       	out	0x3e, r29	; 62
    2f4a:	0f be       	out	0x3f, r0	; 63
    2f4c:	cd bf       	out	0x3d, r28	; 61
	DIO_Write(LCD_EN_PORT, LCD_EN_PIN, HIGH);
    2f4e:	80 e0       	ldi	r24, 0x00	; 0
    2f50:	68 e0       	ldi	r22, 0x08	; 8
    2f52:	4f ef       	ldi	r20, 0xFF	; 255
    2f54:	0e 94 2e 12 	call	0x245c	; 0x245c <DIO_Write>
    2f58:	80 e0       	ldi	r24, 0x00	; 0
    2f5a:	90 e0       	ldi	r25, 0x00	; 0
    2f5c:	a0 e8       	ldi	r26, 0x80	; 128
    2f5e:	bf e3       	ldi	r27, 0x3F	; 63
    2f60:	89 8f       	std	Y+25, r24	; 0x19
    2f62:	9a 8f       	std	Y+26, r25	; 0x1a
    2f64:	ab 8f       	std	Y+27, r26	; 0x1b
    2f66:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f68:	69 8d       	ldd	r22, Y+25	; 0x19
    2f6a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f6c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f6e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f70:	20 e0       	ldi	r18, 0x00	; 0
    2f72:	30 e0       	ldi	r19, 0x00	; 0
    2f74:	4a e7       	ldi	r20, 0x7A	; 122
    2f76:	53 e4       	ldi	r21, 0x43	; 67
    2f78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f7c:	dc 01       	movw	r26, r24
    2f7e:	cb 01       	movw	r24, r22
    2f80:	8d 8b       	std	Y+21, r24	; 0x15
    2f82:	9e 8b       	std	Y+22, r25	; 0x16
    2f84:	af 8b       	std	Y+23, r26	; 0x17
    2f86:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f88:	6d 89       	ldd	r22, Y+21	; 0x15
    2f8a:	7e 89       	ldd	r23, Y+22	; 0x16
    2f8c:	8f 89       	ldd	r24, Y+23	; 0x17
    2f8e:	98 8d       	ldd	r25, Y+24	; 0x18
    2f90:	20 e0       	ldi	r18, 0x00	; 0
    2f92:	30 e0       	ldi	r19, 0x00	; 0
    2f94:	40 e8       	ldi	r20, 0x80	; 128
    2f96:	5f e3       	ldi	r21, 0x3F	; 63
    2f98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f9c:	88 23       	and	r24, r24
    2f9e:	2c f4       	brge	.+10     	; 0x2faa <LCD_EN_pulse+0x70>
		__ticks = 1;
    2fa0:	81 e0       	ldi	r24, 0x01	; 1
    2fa2:	90 e0       	ldi	r25, 0x00	; 0
    2fa4:	9c 8b       	std	Y+20, r25	; 0x14
    2fa6:	8b 8b       	std	Y+19, r24	; 0x13
    2fa8:	3f c0       	rjmp	.+126    	; 0x3028 <LCD_EN_pulse+0xee>
	else if (__tmp > 65535)
    2faa:	6d 89       	ldd	r22, Y+21	; 0x15
    2fac:	7e 89       	ldd	r23, Y+22	; 0x16
    2fae:	8f 89       	ldd	r24, Y+23	; 0x17
    2fb0:	98 8d       	ldd	r25, Y+24	; 0x18
    2fb2:	20 e0       	ldi	r18, 0x00	; 0
    2fb4:	3f ef       	ldi	r19, 0xFF	; 255
    2fb6:	4f e7       	ldi	r20, 0x7F	; 127
    2fb8:	57 e4       	ldi	r21, 0x47	; 71
    2fba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fbe:	18 16       	cp	r1, r24
    2fc0:	4c f5       	brge	.+82     	; 0x3014 <LCD_EN_pulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fc2:	69 8d       	ldd	r22, Y+25	; 0x19
    2fc4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fc6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fc8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fca:	20 e0       	ldi	r18, 0x00	; 0
    2fcc:	30 e0       	ldi	r19, 0x00	; 0
    2fce:	40 e2       	ldi	r20, 0x20	; 32
    2fd0:	51 e4       	ldi	r21, 0x41	; 65
    2fd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fd6:	dc 01       	movw	r26, r24
    2fd8:	cb 01       	movw	r24, r22
    2fda:	bc 01       	movw	r22, r24
    2fdc:	cd 01       	movw	r24, r26
    2fde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fe2:	dc 01       	movw	r26, r24
    2fe4:	cb 01       	movw	r24, r22
    2fe6:	9c 8b       	std	Y+20, r25	; 0x14
    2fe8:	8b 8b       	std	Y+19, r24	; 0x13
    2fea:	0f c0       	rjmp	.+30     	; 0x300a <LCD_EN_pulse+0xd0>
    2fec:	89 e1       	ldi	r24, 0x19	; 25
    2fee:	90 e0       	ldi	r25, 0x00	; 0
    2ff0:	9a 8b       	std	Y+18, r25	; 0x12
    2ff2:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2ff4:	89 89       	ldd	r24, Y+17	; 0x11
    2ff6:	9a 89       	ldd	r25, Y+18	; 0x12
    2ff8:	01 97       	sbiw	r24, 0x01	; 1
    2ffa:	f1 f7       	brne	.-4      	; 0x2ff8 <LCD_EN_pulse+0xbe>
    2ffc:	9a 8b       	std	Y+18, r25	; 0x12
    2ffe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3000:	8b 89       	ldd	r24, Y+19	; 0x13
    3002:	9c 89       	ldd	r25, Y+20	; 0x14
    3004:	01 97       	sbiw	r24, 0x01	; 1
    3006:	9c 8b       	std	Y+20, r25	; 0x14
    3008:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    300a:	8b 89       	ldd	r24, Y+19	; 0x13
    300c:	9c 89       	ldd	r25, Y+20	; 0x14
    300e:	00 97       	sbiw	r24, 0x00	; 0
    3010:	69 f7       	brne	.-38     	; 0x2fec <LCD_EN_pulse+0xb2>
    3012:	14 c0       	rjmp	.+40     	; 0x303c <LCD_EN_pulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3014:	6d 89       	ldd	r22, Y+21	; 0x15
    3016:	7e 89       	ldd	r23, Y+22	; 0x16
    3018:	8f 89       	ldd	r24, Y+23	; 0x17
    301a:	98 8d       	ldd	r25, Y+24	; 0x18
    301c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3020:	dc 01       	movw	r26, r24
    3022:	cb 01       	movw	r24, r22
    3024:	9c 8b       	std	Y+20, r25	; 0x14
    3026:	8b 8b       	std	Y+19, r24	; 0x13
    3028:	8b 89       	ldd	r24, Y+19	; 0x13
    302a:	9c 89       	ldd	r25, Y+20	; 0x14
    302c:	98 8b       	std	Y+16, r25	; 0x10
    302e:	8f 87       	std	Y+15, r24	; 0x0f
    3030:	8f 85       	ldd	r24, Y+15	; 0x0f
    3032:	98 89       	ldd	r25, Y+16	; 0x10
    3034:	01 97       	sbiw	r24, 0x01	; 1
    3036:	f1 f7       	brne	.-4      	; 0x3034 <LCD_EN_pulse+0xfa>
    3038:	98 8b       	std	Y+16, r25	; 0x10
    303a:	8f 87       	std	Y+15, r24	; 0x0f
_delay_ms(1);
	DIO_Write(LCD_EN_PORT, LCD_EN_PIN, LOW);
    303c:	80 e0       	ldi	r24, 0x00	; 0
    303e:	68 e0       	ldi	r22, 0x08	; 8
    3040:	40 e0       	ldi	r20, 0x00	; 0
    3042:	0e 94 2e 12 	call	0x245c	; 0x245c <DIO_Write>
    3046:	80 e0       	ldi	r24, 0x00	; 0
    3048:	90 e0       	ldi	r25, 0x00	; 0
    304a:	a0 e8       	ldi	r26, 0x80	; 128
    304c:	bf e3       	ldi	r27, 0x3F	; 63
    304e:	8b 87       	std	Y+11, r24	; 0x0b
    3050:	9c 87       	std	Y+12, r25	; 0x0c
    3052:	ad 87       	std	Y+13, r26	; 0x0d
    3054:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3056:	6b 85       	ldd	r22, Y+11	; 0x0b
    3058:	7c 85       	ldd	r23, Y+12	; 0x0c
    305a:	8d 85       	ldd	r24, Y+13	; 0x0d
    305c:	9e 85       	ldd	r25, Y+14	; 0x0e
    305e:	20 e0       	ldi	r18, 0x00	; 0
    3060:	30 e0       	ldi	r19, 0x00	; 0
    3062:	4a e7       	ldi	r20, 0x7A	; 122
    3064:	53 e4       	ldi	r21, 0x43	; 67
    3066:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    306a:	dc 01       	movw	r26, r24
    306c:	cb 01       	movw	r24, r22
    306e:	8f 83       	std	Y+7, r24	; 0x07
    3070:	98 87       	std	Y+8, r25	; 0x08
    3072:	a9 87       	std	Y+9, r26	; 0x09
    3074:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3076:	6f 81       	ldd	r22, Y+7	; 0x07
    3078:	78 85       	ldd	r23, Y+8	; 0x08
    307a:	89 85       	ldd	r24, Y+9	; 0x09
    307c:	9a 85       	ldd	r25, Y+10	; 0x0a
    307e:	20 e0       	ldi	r18, 0x00	; 0
    3080:	30 e0       	ldi	r19, 0x00	; 0
    3082:	40 e8       	ldi	r20, 0x80	; 128
    3084:	5f e3       	ldi	r21, 0x3F	; 63
    3086:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    308a:	88 23       	and	r24, r24
    308c:	2c f4       	brge	.+10     	; 0x3098 <LCD_EN_pulse+0x15e>
		__ticks = 1;
    308e:	81 e0       	ldi	r24, 0x01	; 1
    3090:	90 e0       	ldi	r25, 0x00	; 0
    3092:	9e 83       	std	Y+6, r25	; 0x06
    3094:	8d 83       	std	Y+5, r24	; 0x05
    3096:	3f c0       	rjmp	.+126    	; 0x3116 <LCD_EN_pulse+0x1dc>
	else if (__tmp > 65535)
    3098:	6f 81       	ldd	r22, Y+7	; 0x07
    309a:	78 85       	ldd	r23, Y+8	; 0x08
    309c:	89 85       	ldd	r24, Y+9	; 0x09
    309e:	9a 85       	ldd	r25, Y+10	; 0x0a
    30a0:	20 e0       	ldi	r18, 0x00	; 0
    30a2:	3f ef       	ldi	r19, 0xFF	; 255
    30a4:	4f e7       	ldi	r20, 0x7F	; 127
    30a6:	57 e4       	ldi	r21, 0x47	; 71
    30a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30ac:	18 16       	cp	r1, r24
    30ae:	4c f5       	brge	.+82     	; 0x3102 <LCD_EN_pulse+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    30b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    30b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    30b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    30b8:	20 e0       	ldi	r18, 0x00	; 0
    30ba:	30 e0       	ldi	r19, 0x00	; 0
    30bc:	40 e2       	ldi	r20, 0x20	; 32
    30be:	51 e4       	ldi	r21, 0x41	; 65
    30c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30c4:	dc 01       	movw	r26, r24
    30c6:	cb 01       	movw	r24, r22
    30c8:	bc 01       	movw	r22, r24
    30ca:	cd 01       	movw	r24, r26
    30cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30d0:	dc 01       	movw	r26, r24
    30d2:	cb 01       	movw	r24, r22
    30d4:	9e 83       	std	Y+6, r25	; 0x06
    30d6:	8d 83       	std	Y+5, r24	; 0x05
    30d8:	0f c0       	rjmp	.+30     	; 0x30f8 <LCD_EN_pulse+0x1be>
    30da:	89 e1       	ldi	r24, 0x19	; 25
    30dc:	90 e0       	ldi	r25, 0x00	; 0
    30de:	9c 83       	std	Y+4, r25	; 0x04
    30e0:	8b 83       	std	Y+3, r24	; 0x03
    30e2:	8b 81       	ldd	r24, Y+3	; 0x03
    30e4:	9c 81       	ldd	r25, Y+4	; 0x04
    30e6:	01 97       	sbiw	r24, 0x01	; 1
    30e8:	f1 f7       	brne	.-4      	; 0x30e6 <LCD_EN_pulse+0x1ac>
    30ea:	9c 83       	std	Y+4, r25	; 0x04
    30ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30ee:	8d 81       	ldd	r24, Y+5	; 0x05
    30f0:	9e 81       	ldd	r25, Y+6	; 0x06
    30f2:	01 97       	sbiw	r24, 0x01	; 1
    30f4:	9e 83       	std	Y+6, r25	; 0x06
    30f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30f8:	8d 81       	ldd	r24, Y+5	; 0x05
    30fa:	9e 81       	ldd	r25, Y+6	; 0x06
    30fc:	00 97       	sbiw	r24, 0x00	; 0
    30fe:	69 f7       	brne	.-38     	; 0x30da <LCD_EN_pulse+0x1a0>
    3100:	14 c0       	rjmp	.+40     	; 0x312a <LCD_EN_pulse+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3102:	6f 81       	ldd	r22, Y+7	; 0x07
    3104:	78 85       	ldd	r23, Y+8	; 0x08
    3106:	89 85       	ldd	r24, Y+9	; 0x09
    3108:	9a 85       	ldd	r25, Y+10	; 0x0a
    310a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    310e:	dc 01       	movw	r26, r24
    3110:	cb 01       	movw	r24, r22
    3112:	9e 83       	std	Y+6, r25	; 0x06
    3114:	8d 83       	std	Y+5, r24	; 0x05
    3116:	8d 81       	ldd	r24, Y+5	; 0x05
    3118:	9e 81       	ldd	r25, Y+6	; 0x06
    311a:	9a 83       	std	Y+2, r25	; 0x02
    311c:	89 83       	std	Y+1, r24	; 0x01
    311e:	89 81       	ldd	r24, Y+1	; 0x01
    3120:	9a 81       	ldd	r25, Y+2	; 0x02
    3122:	01 97       	sbiw	r24, 0x01	; 1
    3124:	f1 f7       	brne	.-4      	; 0x3122 <LCD_EN_pulse+0x1e8>
    3126:	9a 83       	std	Y+2, r25	; 0x02
    3128:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    312a:	6c 96       	adiw	r28, 0x1c	; 28
    312c:	0f b6       	in	r0, 0x3f	; 63
    312e:	f8 94       	cli
    3130:	de bf       	out	0x3e, r29	; 62
    3132:	0f be       	out	0x3f, r0	; 63
    3134:	cd bf       	out	0x3d, r28	; 61
    3136:	cf 91       	pop	r28
    3138:	df 91       	pop	r29
    313a:	08 95       	ret

0000313c <LCD_config_pins>:

void LCD_config_pins(void){
    313c:	df 93       	push	r29
    313e:	cf 93       	push	r28
    3140:	00 d0       	rcall	.+0      	; 0x3142 <LCD_config_pins+0x6>
    3142:	0f 92       	push	r0
    3144:	cd b7       	in	r28, 0x3d	; 61
    3146:	de b7       	in	r29, 0x3e	; 62

	/* set LCD pins as outputs */
	DIO_Cfg_s ST_dio = {0};
    3148:	83 e0       	ldi	r24, 0x03	; 3
    314a:	fe 01       	movw	r30, r28
    314c:	31 96       	adiw	r30, 0x01	; 1
    314e:	df 01       	movw	r26, r30
    3150:	98 2f       	mov	r25, r24
    3152:	1d 92       	st	X+, r1
    3154:	9a 95       	dec	r25
    3156:	e9 f7       	brne	.-6      	; 0x3152 <LCD_config_pins+0x16>
	ST_dio.GPIO = LCD_RS_PORT;
    3158:	19 82       	std	Y+1, r1	; 0x01
	ST_dio.dir = HIGH;
    315a:	8f ef       	ldi	r24, 0xFF	; 255
    315c:	8b 83       	std	Y+3, r24	; 0x03
	ST_dio.pins = LCD_RS_PIN;
    315e:	82 e0       	ldi	r24, 0x02	; 2
    3160:	8a 83       	std	Y+2, r24	; 0x02
	DIO_init(&ST_dio);
    3162:	ce 01       	movw	r24, r28
    3164:	01 96       	adiw	r24, 0x01	; 1
    3166:	0e 94 63 11 	call	0x22c6	; 0x22c6 <DIO_init>

	ST_dio.GPIO = LCD_RW_PORT;
    316a:	19 82       	std	Y+1, r1	; 0x01
	ST_dio.pins = LCD_RW_PIN;
    316c:	84 e0       	ldi	r24, 0x04	; 4
    316e:	8a 83       	std	Y+2, r24	; 0x02
	DIO_init(&ST_dio);
    3170:	ce 01       	movw	r24, r28
    3172:	01 96       	adiw	r24, 0x01	; 1
    3174:	0e 94 63 11 	call	0x22c6	; 0x22c6 <DIO_init>

	ST_dio.GPIO = LCD_EN_PORT;
    3178:	19 82       	std	Y+1, r1	; 0x01
	ST_dio.pins = LCD_EN_PIN;
    317a:	88 e0       	ldi	r24, 0x08	; 8
    317c:	8a 83       	std	Y+2, r24	; 0x02
	DIO_init(&ST_dio);
    317e:	ce 01       	movw	r24, r28
    3180:	01 96       	adiw	r24, 0x01	; 1
    3182:	0e 94 63 11 	call	0x22c6	; 0x22c6 <DIO_init>

	ST_dio.GPIO = LCD_D4_PORT;
    3186:	19 82       	std	Y+1, r1	; 0x01
	ST_dio.pins = LCD_D4_PIN;
    3188:	80 e1       	ldi	r24, 0x10	; 16
    318a:	8a 83       	std	Y+2, r24	; 0x02
	DIO_init(&ST_dio);
    318c:	ce 01       	movw	r24, r28
    318e:	01 96       	adiw	r24, 0x01	; 1
    3190:	0e 94 63 11 	call	0x22c6	; 0x22c6 <DIO_init>

	ST_dio.GPIO = LCD_D5_PORT;
    3194:	19 82       	std	Y+1, r1	; 0x01
	ST_dio.pins = LCD_D5_PIN;
    3196:	80 e2       	ldi	r24, 0x20	; 32
    3198:	8a 83       	std	Y+2, r24	; 0x02
	DIO_init(&ST_dio);
    319a:	ce 01       	movw	r24, r28
    319c:	01 96       	adiw	r24, 0x01	; 1
    319e:	0e 94 63 11 	call	0x22c6	; 0x22c6 <DIO_init>

	ST_dio.GPIO = LCD_D6_PORT;
    31a2:	19 82       	std	Y+1, r1	; 0x01
	ST_dio.pins = LCD_D6_PIN;
    31a4:	80 e4       	ldi	r24, 0x40	; 64
    31a6:	8a 83       	std	Y+2, r24	; 0x02
	DIO_init(&ST_dio);
    31a8:	ce 01       	movw	r24, r28
    31aa:	01 96       	adiw	r24, 0x01	; 1
    31ac:	0e 94 63 11 	call	0x22c6	; 0x22c6 <DIO_init>

	ST_dio.GPIO = LCD_D7_PORT;
    31b0:	19 82       	std	Y+1, r1	; 0x01
	ST_dio.pins = LCD_D7_PIN;
    31b2:	80 e8       	ldi	r24, 0x80	; 128
    31b4:	8a 83       	std	Y+2, r24	; 0x02
	DIO_init(&ST_dio);
    31b6:	ce 01       	movw	r24, r28
    31b8:	01 96       	adiw	r24, 0x01	; 1
    31ba:	0e 94 63 11 	call	0x22c6	; 0x22c6 <DIO_init>
}
    31be:	0f 90       	pop	r0
    31c0:	0f 90       	pop	r0
    31c2:	0f 90       	pop	r0
    31c4:	cf 91       	pop	r28
    31c6:	df 91       	pop	r29
    31c8:	08 95       	ret

000031ca <LCD_send_nibble>:

void LCD_send_nibble(uint8 data){
    31ca:	df 93       	push	r29
    31cc:	cf 93       	push	r28
    31ce:	00 d0       	rcall	.+0      	; 0x31d0 <LCD_send_nibble+0x6>
    31d0:	cd b7       	in	r28, 0x3d	; 61
    31d2:	de b7       	in	r29, 0x3e	; 62
    31d4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 mask = 1;
    31d6:	81 e0       	ldi	r24, 0x01	; 1
    31d8:	89 83       	std	Y+1, r24	; 0x01
	data >>= 4;
    31da:	8a 81       	ldd	r24, Y+2	; 0x02
    31dc:	82 95       	swap	r24
    31de:	8f 70       	andi	r24, 0x0F	; 15
    31e0:	8a 83       	std	Y+2, r24	; 0x02
	if(data&mask)
    31e2:	9a 81       	ldd	r25, Y+2	; 0x02
    31e4:	89 81       	ldd	r24, Y+1	; 0x01
    31e6:	89 23       	and	r24, r25
    31e8:	88 23       	and	r24, r24
    31ea:	31 f0       	breq	.+12     	; 0x31f8 <LCD_send_nibble+0x2e>
		DIO_Write(LCD_D4_PORT, LCD_D4_PIN, HIGH);
    31ec:	80 e0       	ldi	r24, 0x00	; 0
    31ee:	60 e1       	ldi	r22, 0x10	; 16
    31f0:	4f ef       	ldi	r20, 0xFF	; 255
    31f2:	0e 94 2e 12 	call	0x245c	; 0x245c <DIO_Write>
    31f6:	05 c0       	rjmp	.+10     	; 0x3202 <LCD_send_nibble+0x38>
	else
		DIO_Write(LCD_D4_PORT, LCD_D4_PIN, LOW);
    31f8:	80 e0       	ldi	r24, 0x00	; 0
    31fa:	60 e1       	ldi	r22, 0x10	; 16
    31fc:	40 e0       	ldi	r20, 0x00	; 0
    31fe:	0e 94 2e 12 	call	0x245c	; 0x245c <DIO_Write>

	mask *= 2;
    3202:	89 81       	ldd	r24, Y+1	; 0x01
    3204:	88 2f       	mov	r24, r24
    3206:	90 e0       	ldi	r25, 0x00	; 0
    3208:	88 0f       	add	r24, r24
    320a:	99 1f       	adc	r25, r25
    320c:	89 83       	std	Y+1, r24	; 0x01
	if(data&mask)
    320e:	9a 81       	ldd	r25, Y+2	; 0x02
    3210:	89 81       	ldd	r24, Y+1	; 0x01
    3212:	89 23       	and	r24, r25
    3214:	88 23       	and	r24, r24
    3216:	31 f0       	breq	.+12     	; 0x3224 <LCD_send_nibble+0x5a>
		DIO_Write(LCD_D5_PORT, LCD_D5_PIN, HIGH);
    3218:	80 e0       	ldi	r24, 0x00	; 0
    321a:	60 e2       	ldi	r22, 0x20	; 32
    321c:	4f ef       	ldi	r20, 0xFF	; 255
    321e:	0e 94 2e 12 	call	0x245c	; 0x245c <DIO_Write>
    3222:	05 c0       	rjmp	.+10     	; 0x322e <LCD_send_nibble+0x64>
	else
		DIO_Write(LCD_D5_PORT, LCD_D5_PIN, LOW);
    3224:	80 e0       	ldi	r24, 0x00	; 0
    3226:	60 e2       	ldi	r22, 0x20	; 32
    3228:	40 e0       	ldi	r20, 0x00	; 0
    322a:	0e 94 2e 12 	call	0x245c	; 0x245c <DIO_Write>

	mask *= 2;
    322e:	89 81       	ldd	r24, Y+1	; 0x01
    3230:	88 2f       	mov	r24, r24
    3232:	90 e0       	ldi	r25, 0x00	; 0
    3234:	88 0f       	add	r24, r24
    3236:	99 1f       	adc	r25, r25
    3238:	89 83       	std	Y+1, r24	; 0x01
	if(data&mask)
    323a:	9a 81       	ldd	r25, Y+2	; 0x02
    323c:	89 81       	ldd	r24, Y+1	; 0x01
    323e:	89 23       	and	r24, r25
    3240:	88 23       	and	r24, r24
    3242:	31 f0       	breq	.+12     	; 0x3250 <LCD_send_nibble+0x86>
		DIO_Write(LCD_D6_PORT, LCD_D6_PIN, HIGH);
    3244:	80 e0       	ldi	r24, 0x00	; 0
    3246:	60 e4       	ldi	r22, 0x40	; 64
    3248:	4f ef       	ldi	r20, 0xFF	; 255
    324a:	0e 94 2e 12 	call	0x245c	; 0x245c <DIO_Write>
    324e:	05 c0       	rjmp	.+10     	; 0x325a <LCD_send_nibble+0x90>
	else
		DIO_Write(LCD_D6_PORT, LCD_D6_PIN, LOW);
    3250:	80 e0       	ldi	r24, 0x00	; 0
    3252:	60 e4       	ldi	r22, 0x40	; 64
    3254:	40 e0       	ldi	r20, 0x00	; 0
    3256:	0e 94 2e 12 	call	0x245c	; 0x245c <DIO_Write>

	mask *= 2;
    325a:	89 81       	ldd	r24, Y+1	; 0x01
    325c:	88 2f       	mov	r24, r24
    325e:	90 e0       	ldi	r25, 0x00	; 0
    3260:	88 0f       	add	r24, r24
    3262:	99 1f       	adc	r25, r25
    3264:	89 83       	std	Y+1, r24	; 0x01
	if(data&mask)
    3266:	9a 81       	ldd	r25, Y+2	; 0x02
    3268:	89 81       	ldd	r24, Y+1	; 0x01
    326a:	89 23       	and	r24, r25
    326c:	88 23       	and	r24, r24
    326e:	31 f0       	breq	.+12     	; 0x327c <LCD_send_nibble+0xb2>
		DIO_Write(LCD_D7_PORT, LCD_D7_PIN, HIGH);
    3270:	80 e0       	ldi	r24, 0x00	; 0
    3272:	60 e8       	ldi	r22, 0x80	; 128
    3274:	4f ef       	ldi	r20, 0xFF	; 255
    3276:	0e 94 2e 12 	call	0x245c	; 0x245c <DIO_Write>
    327a:	05 c0       	rjmp	.+10     	; 0x3286 <LCD_send_nibble+0xbc>
	else
		DIO_Write(LCD_D7_PORT, LCD_D7_PIN, LOW);
    327c:	80 e0       	ldi	r24, 0x00	; 0
    327e:	60 e8       	ldi	r22, 0x80	; 128
    3280:	40 e0       	ldi	r20, 0x00	; 0
    3282:	0e 94 2e 12 	call	0x245c	; 0x245c <DIO_Write>
}
    3286:	0f 90       	pop	r0
    3288:	0f 90       	pop	r0
    328a:	cf 91       	pop	r28
    328c:	df 91       	pop	r29
    328e:	08 95       	ret

00003290 <LCD_send_char>:

void LCD_send_char(char data)		//Sends Char to LCD
{
    3290:	df 93       	push	r29
    3292:	cf 93       	push	r28
    3294:	cd b7       	in	r28, 0x3d	; 61
    3296:	de b7       	in	r29, 0x3e	; 62
    3298:	2f 97       	sbiw	r28, 0x0f	; 15
    329a:	0f b6       	in	r0, 0x3f	; 63
    329c:	f8 94       	cli
    329e:	de bf       	out	0x3e, r29	; 62
    32a0:	0f be       	out	0x3f, r0	; 63
    32a2:	cd bf       	out	0x3d, r28	; 61
    32a4:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_Write(LCD_RS_PORT, LCD_RS_PIN, HIGH);
    32a6:	80 e0       	ldi	r24, 0x00	; 0
    32a8:	62 e0       	ldi	r22, 0x02	; 2
    32aa:	4f ef       	ldi	r20, 0xFF	; 255
    32ac:	0e 94 2e 12 	call	0x245c	; 0x245c <DIO_Write>

	LCD_send_nibble(data); // Higher nibble first
    32b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    32b2:	0e 94 e5 18 	call	0x31ca	; 0x31ca <LCD_send_nibble>
	LCD_EN_pulse();
    32b6:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <LCD_EN_pulse>

	LCD_send_nibble(data<<4);
    32ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    32bc:	82 95       	swap	r24
    32be:	80 7f       	andi	r24, 0xF0	; 240
    32c0:	0e 94 e5 18 	call	0x31ca	; 0x31ca <LCD_send_nibble>
	LCD_EN_pulse();
    32c4:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <LCD_EN_pulse>
    32c8:	80 e0       	ldi	r24, 0x00	; 0
    32ca:	90 e0       	ldi	r25, 0x00	; 0
    32cc:	a0 e8       	ldi	r26, 0x80	; 128
    32ce:	bf e3       	ldi	r27, 0x3F	; 63
    32d0:	8b 87       	std	Y+11, r24	; 0x0b
    32d2:	9c 87       	std	Y+12, r25	; 0x0c
    32d4:	ad 87       	std	Y+13, r26	; 0x0d
    32d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    32da:	7c 85       	ldd	r23, Y+12	; 0x0c
    32dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    32de:	9e 85       	ldd	r25, Y+14	; 0x0e
    32e0:	20 e0       	ldi	r18, 0x00	; 0
    32e2:	30 e0       	ldi	r19, 0x00	; 0
    32e4:	4a e7       	ldi	r20, 0x7A	; 122
    32e6:	53 e4       	ldi	r21, 0x43	; 67
    32e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32ec:	dc 01       	movw	r26, r24
    32ee:	cb 01       	movw	r24, r22
    32f0:	8f 83       	std	Y+7, r24	; 0x07
    32f2:	98 87       	std	Y+8, r25	; 0x08
    32f4:	a9 87       	std	Y+9, r26	; 0x09
    32f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32f8:	6f 81       	ldd	r22, Y+7	; 0x07
    32fa:	78 85       	ldd	r23, Y+8	; 0x08
    32fc:	89 85       	ldd	r24, Y+9	; 0x09
    32fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3300:	20 e0       	ldi	r18, 0x00	; 0
    3302:	30 e0       	ldi	r19, 0x00	; 0
    3304:	40 e8       	ldi	r20, 0x80	; 128
    3306:	5f e3       	ldi	r21, 0x3F	; 63
    3308:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    330c:	88 23       	and	r24, r24
    330e:	2c f4       	brge	.+10     	; 0x331a <LCD_send_char+0x8a>
		__ticks = 1;
    3310:	81 e0       	ldi	r24, 0x01	; 1
    3312:	90 e0       	ldi	r25, 0x00	; 0
    3314:	9e 83       	std	Y+6, r25	; 0x06
    3316:	8d 83       	std	Y+5, r24	; 0x05
    3318:	3f c0       	rjmp	.+126    	; 0x3398 <LCD_send_char+0x108>
	else if (__tmp > 65535)
    331a:	6f 81       	ldd	r22, Y+7	; 0x07
    331c:	78 85       	ldd	r23, Y+8	; 0x08
    331e:	89 85       	ldd	r24, Y+9	; 0x09
    3320:	9a 85       	ldd	r25, Y+10	; 0x0a
    3322:	20 e0       	ldi	r18, 0x00	; 0
    3324:	3f ef       	ldi	r19, 0xFF	; 255
    3326:	4f e7       	ldi	r20, 0x7F	; 127
    3328:	57 e4       	ldi	r21, 0x47	; 71
    332a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    332e:	18 16       	cp	r1, r24
    3330:	4c f5       	brge	.+82     	; 0x3384 <LCD_send_char+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3332:	6b 85       	ldd	r22, Y+11	; 0x0b
    3334:	7c 85       	ldd	r23, Y+12	; 0x0c
    3336:	8d 85       	ldd	r24, Y+13	; 0x0d
    3338:	9e 85       	ldd	r25, Y+14	; 0x0e
    333a:	20 e0       	ldi	r18, 0x00	; 0
    333c:	30 e0       	ldi	r19, 0x00	; 0
    333e:	40 e2       	ldi	r20, 0x20	; 32
    3340:	51 e4       	ldi	r21, 0x41	; 65
    3342:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3346:	dc 01       	movw	r26, r24
    3348:	cb 01       	movw	r24, r22
    334a:	bc 01       	movw	r22, r24
    334c:	cd 01       	movw	r24, r26
    334e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3352:	dc 01       	movw	r26, r24
    3354:	cb 01       	movw	r24, r22
    3356:	9e 83       	std	Y+6, r25	; 0x06
    3358:	8d 83       	std	Y+5, r24	; 0x05
    335a:	0f c0       	rjmp	.+30     	; 0x337a <LCD_send_char+0xea>
    335c:	89 e1       	ldi	r24, 0x19	; 25
    335e:	90 e0       	ldi	r25, 0x00	; 0
    3360:	9c 83       	std	Y+4, r25	; 0x04
    3362:	8b 83       	std	Y+3, r24	; 0x03
    3364:	8b 81       	ldd	r24, Y+3	; 0x03
    3366:	9c 81       	ldd	r25, Y+4	; 0x04
    3368:	01 97       	sbiw	r24, 0x01	; 1
    336a:	f1 f7       	brne	.-4      	; 0x3368 <LCD_send_char+0xd8>
    336c:	9c 83       	std	Y+4, r25	; 0x04
    336e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3370:	8d 81       	ldd	r24, Y+5	; 0x05
    3372:	9e 81       	ldd	r25, Y+6	; 0x06
    3374:	01 97       	sbiw	r24, 0x01	; 1
    3376:	9e 83       	std	Y+6, r25	; 0x06
    3378:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    337a:	8d 81       	ldd	r24, Y+5	; 0x05
    337c:	9e 81       	ldd	r25, Y+6	; 0x06
    337e:	00 97       	sbiw	r24, 0x00	; 0
    3380:	69 f7       	brne	.-38     	; 0x335c <LCD_send_char+0xcc>
    3382:	14 c0       	rjmp	.+40     	; 0x33ac <LCD_send_char+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3384:	6f 81       	ldd	r22, Y+7	; 0x07
    3386:	78 85       	ldd	r23, Y+8	; 0x08
    3388:	89 85       	ldd	r24, Y+9	; 0x09
    338a:	9a 85       	ldd	r25, Y+10	; 0x0a
    338c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3390:	dc 01       	movw	r26, r24
    3392:	cb 01       	movw	r24, r22
    3394:	9e 83       	std	Y+6, r25	; 0x06
    3396:	8d 83       	std	Y+5, r24	; 0x05
    3398:	8d 81       	ldd	r24, Y+5	; 0x05
    339a:	9e 81       	ldd	r25, Y+6	; 0x06
    339c:	9a 83       	std	Y+2, r25	; 0x02
    339e:	89 83       	std	Y+1, r24	; 0x01
    33a0:	89 81       	ldd	r24, Y+1	; 0x01
    33a2:	9a 81       	ldd	r25, Y+2	; 0x02
    33a4:	01 97       	sbiw	r24, 0x01	; 1
    33a6:	f1 f7       	brne	.-4      	; 0x33a4 <LCD_send_char+0x114>
    33a8:	9a 83       	std	Y+2, r25	; 0x02
    33aa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    33ac:	2f 96       	adiw	r28, 0x0f	; 15
    33ae:	0f b6       	in	r0, 0x3f	; 63
    33b0:	f8 94       	cli
    33b2:	de bf       	out	0x3e, r29	; 62
    33b4:	0f be       	out	0x3f, r0	; 63
    33b6:	cd bf       	out	0x3d, r28	; 61
    33b8:	cf 91       	pop	r28
    33ba:	df 91       	pop	r29
    33bc:	08 95       	ret

000033be <LCD_send_command>:
void LCD_send_command(uint8 data)	//Sends Command to LCD
{
    33be:	df 93       	push	r29
    33c0:	cf 93       	push	r28
    33c2:	cd b7       	in	r28, 0x3d	; 61
    33c4:	de b7       	in	r29, 0x3e	; 62
    33c6:	2f 97       	sbiw	r28, 0x0f	; 15
    33c8:	0f b6       	in	r0, 0x3f	; 63
    33ca:	f8 94       	cli
    33cc:	de bf       	out	0x3e, r29	; 62
    33ce:	0f be       	out	0x3f, r0	; 63
    33d0:	cd bf       	out	0x3d, r28	; 61
    33d2:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_Write(LCD_RS_PORT, LCD_RS_PIN, LOW);
    33d4:	80 e0       	ldi	r24, 0x00	; 0
    33d6:	62 e0       	ldi	r22, 0x02	; 2
    33d8:	40 e0       	ldi	r20, 0x00	; 0
    33da:	0e 94 2e 12 	call	0x245c	; 0x245c <DIO_Write>

	LCD_send_nibble(data); // Higher nibble first
    33de:	8f 85       	ldd	r24, Y+15	; 0x0f
    33e0:	0e 94 e5 18 	call	0x31ca	; 0x31ca <LCD_send_nibble>
	LCD_EN_pulse();
    33e4:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <LCD_EN_pulse>

	LCD_send_nibble(data<<4);
    33e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    33ea:	82 95       	swap	r24
    33ec:	80 7f       	andi	r24, 0xF0	; 240
    33ee:	0e 94 e5 18 	call	0x31ca	; 0x31ca <LCD_send_nibble>
	LCD_EN_pulse();
    33f2:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <LCD_EN_pulse>
    33f6:	80 e0       	ldi	r24, 0x00	; 0
    33f8:	90 e0       	ldi	r25, 0x00	; 0
    33fa:	a0 e8       	ldi	r26, 0x80	; 128
    33fc:	bf e3       	ldi	r27, 0x3F	; 63
    33fe:	8b 87       	std	Y+11, r24	; 0x0b
    3400:	9c 87       	std	Y+12, r25	; 0x0c
    3402:	ad 87       	std	Y+13, r26	; 0x0d
    3404:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3406:	6b 85       	ldd	r22, Y+11	; 0x0b
    3408:	7c 85       	ldd	r23, Y+12	; 0x0c
    340a:	8d 85       	ldd	r24, Y+13	; 0x0d
    340c:	9e 85       	ldd	r25, Y+14	; 0x0e
    340e:	20 e0       	ldi	r18, 0x00	; 0
    3410:	30 e0       	ldi	r19, 0x00	; 0
    3412:	4a e7       	ldi	r20, 0x7A	; 122
    3414:	53 e4       	ldi	r21, 0x43	; 67
    3416:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    341a:	dc 01       	movw	r26, r24
    341c:	cb 01       	movw	r24, r22
    341e:	8f 83       	std	Y+7, r24	; 0x07
    3420:	98 87       	std	Y+8, r25	; 0x08
    3422:	a9 87       	std	Y+9, r26	; 0x09
    3424:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3426:	6f 81       	ldd	r22, Y+7	; 0x07
    3428:	78 85       	ldd	r23, Y+8	; 0x08
    342a:	89 85       	ldd	r24, Y+9	; 0x09
    342c:	9a 85       	ldd	r25, Y+10	; 0x0a
    342e:	20 e0       	ldi	r18, 0x00	; 0
    3430:	30 e0       	ldi	r19, 0x00	; 0
    3432:	40 e8       	ldi	r20, 0x80	; 128
    3434:	5f e3       	ldi	r21, 0x3F	; 63
    3436:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    343a:	88 23       	and	r24, r24
    343c:	2c f4       	brge	.+10     	; 0x3448 <LCD_send_command+0x8a>
		__ticks = 1;
    343e:	81 e0       	ldi	r24, 0x01	; 1
    3440:	90 e0       	ldi	r25, 0x00	; 0
    3442:	9e 83       	std	Y+6, r25	; 0x06
    3444:	8d 83       	std	Y+5, r24	; 0x05
    3446:	3f c0       	rjmp	.+126    	; 0x34c6 <LCD_send_command+0x108>
	else if (__tmp > 65535)
    3448:	6f 81       	ldd	r22, Y+7	; 0x07
    344a:	78 85       	ldd	r23, Y+8	; 0x08
    344c:	89 85       	ldd	r24, Y+9	; 0x09
    344e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3450:	20 e0       	ldi	r18, 0x00	; 0
    3452:	3f ef       	ldi	r19, 0xFF	; 255
    3454:	4f e7       	ldi	r20, 0x7F	; 127
    3456:	57 e4       	ldi	r21, 0x47	; 71
    3458:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    345c:	18 16       	cp	r1, r24
    345e:	4c f5       	brge	.+82     	; 0x34b2 <LCD_send_command+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3460:	6b 85       	ldd	r22, Y+11	; 0x0b
    3462:	7c 85       	ldd	r23, Y+12	; 0x0c
    3464:	8d 85       	ldd	r24, Y+13	; 0x0d
    3466:	9e 85       	ldd	r25, Y+14	; 0x0e
    3468:	20 e0       	ldi	r18, 0x00	; 0
    346a:	30 e0       	ldi	r19, 0x00	; 0
    346c:	40 e2       	ldi	r20, 0x20	; 32
    346e:	51 e4       	ldi	r21, 0x41	; 65
    3470:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3474:	dc 01       	movw	r26, r24
    3476:	cb 01       	movw	r24, r22
    3478:	bc 01       	movw	r22, r24
    347a:	cd 01       	movw	r24, r26
    347c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3480:	dc 01       	movw	r26, r24
    3482:	cb 01       	movw	r24, r22
    3484:	9e 83       	std	Y+6, r25	; 0x06
    3486:	8d 83       	std	Y+5, r24	; 0x05
    3488:	0f c0       	rjmp	.+30     	; 0x34a8 <LCD_send_command+0xea>
    348a:	89 e1       	ldi	r24, 0x19	; 25
    348c:	90 e0       	ldi	r25, 0x00	; 0
    348e:	9c 83       	std	Y+4, r25	; 0x04
    3490:	8b 83       	std	Y+3, r24	; 0x03
    3492:	8b 81       	ldd	r24, Y+3	; 0x03
    3494:	9c 81       	ldd	r25, Y+4	; 0x04
    3496:	01 97       	sbiw	r24, 0x01	; 1
    3498:	f1 f7       	brne	.-4      	; 0x3496 <LCD_send_command+0xd8>
    349a:	9c 83       	std	Y+4, r25	; 0x04
    349c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    349e:	8d 81       	ldd	r24, Y+5	; 0x05
    34a0:	9e 81       	ldd	r25, Y+6	; 0x06
    34a2:	01 97       	sbiw	r24, 0x01	; 1
    34a4:	9e 83       	std	Y+6, r25	; 0x06
    34a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34a8:	8d 81       	ldd	r24, Y+5	; 0x05
    34aa:	9e 81       	ldd	r25, Y+6	; 0x06
    34ac:	00 97       	sbiw	r24, 0x00	; 0
    34ae:	69 f7       	brne	.-38     	; 0x348a <LCD_send_command+0xcc>
    34b0:	14 c0       	rjmp	.+40     	; 0x34da <LCD_send_command+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34b2:	6f 81       	ldd	r22, Y+7	; 0x07
    34b4:	78 85       	ldd	r23, Y+8	; 0x08
    34b6:	89 85       	ldd	r24, Y+9	; 0x09
    34b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    34ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34be:	dc 01       	movw	r26, r24
    34c0:	cb 01       	movw	r24, r22
    34c2:	9e 83       	std	Y+6, r25	; 0x06
    34c4:	8d 83       	std	Y+5, r24	; 0x05
    34c6:	8d 81       	ldd	r24, Y+5	; 0x05
    34c8:	9e 81       	ldd	r25, Y+6	; 0x06
    34ca:	9a 83       	std	Y+2, r25	; 0x02
    34cc:	89 83       	std	Y+1, r24	; 0x01
    34ce:	89 81       	ldd	r24, Y+1	; 0x01
    34d0:	9a 81       	ldd	r25, Y+2	; 0x02
    34d2:	01 97       	sbiw	r24, 0x01	; 1
    34d4:	f1 f7       	brne	.-4      	; 0x34d2 <LCD_send_command+0x114>
    34d6:	9a 83       	std	Y+2, r25	; 0x02
    34d8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    34da:	2f 96       	adiw	r28, 0x0f	; 15
    34dc:	0f b6       	in	r0, 0x3f	; 63
    34de:	f8 94       	cli
    34e0:	de bf       	out	0x3e, r29	; 62
    34e2:	0f be       	out	0x3f, r0	; 63
    34e4:	cd bf       	out	0x3d, r28	; 61
    34e6:	cf 91       	pop	r28
    34e8:	df 91       	pop	r29
    34ea:	08 95       	ret

000034ec <LCD_init>:
void LCD_init(void)//Initializes LCD
{
    34ec:	df 93       	push	r29
    34ee:	cf 93       	push	r28
    34f0:	cd b7       	in	r28, 0x3d	; 61
    34f2:	de b7       	in	r29, 0x3e	; 62
    34f4:	6c 97       	sbiw	r28, 0x1c	; 28
    34f6:	0f b6       	in	r0, 0x3f	; 63
    34f8:	f8 94       	cli
    34fa:	de bf       	out	0x3e, r29	; 62
    34fc:	0f be       	out	0x3f, r0	; 63
    34fe:	cd bf       	out	0x3d, r28	; 61
	LCD_config_pins();
    3500:	0e 94 9e 18 	call	0x313c	; 0x313c <LCD_config_pins>
    3504:	80 e0       	ldi	r24, 0x00	; 0
    3506:	90 e0       	ldi	r25, 0x00	; 0
    3508:	a0 ea       	ldi	r26, 0xA0	; 160
    350a:	b1 e4       	ldi	r27, 0x41	; 65
    350c:	89 8f       	std	Y+25, r24	; 0x19
    350e:	9a 8f       	std	Y+26, r25	; 0x1a
    3510:	ab 8f       	std	Y+27, r26	; 0x1b
    3512:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3514:	69 8d       	ldd	r22, Y+25	; 0x19
    3516:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3518:	8b 8d       	ldd	r24, Y+27	; 0x1b
    351a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    351c:	20 e0       	ldi	r18, 0x00	; 0
    351e:	30 e0       	ldi	r19, 0x00	; 0
    3520:	4a e7       	ldi	r20, 0x7A	; 122
    3522:	53 e4       	ldi	r21, 0x43	; 67
    3524:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3528:	dc 01       	movw	r26, r24
    352a:	cb 01       	movw	r24, r22
    352c:	8d 8b       	std	Y+21, r24	; 0x15
    352e:	9e 8b       	std	Y+22, r25	; 0x16
    3530:	af 8b       	std	Y+23, r26	; 0x17
    3532:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3534:	6d 89       	ldd	r22, Y+21	; 0x15
    3536:	7e 89       	ldd	r23, Y+22	; 0x16
    3538:	8f 89       	ldd	r24, Y+23	; 0x17
    353a:	98 8d       	ldd	r25, Y+24	; 0x18
    353c:	20 e0       	ldi	r18, 0x00	; 0
    353e:	30 e0       	ldi	r19, 0x00	; 0
    3540:	40 e8       	ldi	r20, 0x80	; 128
    3542:	5f e3       	ldi	r21, 0x3F	; 63
    3544:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3548:	88 23       	and	r24, r24
    354a:	2c f4       	brge	.+10     	; 0x3556 <LCD_init+0x6a>
		__ticks = 1;
    354c:	81 e0       	ldi	r24, 0x01	; 1
    354e:	90 e0       	ldi	r25, 0x00	; 0
    3550:	9c 8b       	std	Y+20, r25	; 0x14
    3552:	8b 8b       	std	Y+19, r24	; 0x13
    3554:	3f c0       	rjmp	.+126    	; 0x35d4 <LCD_init+0xe8>
	else if (__tmp > 65535)
    3556:	6d 89       	ldd	r22, Y+21	; 0x15
    3558:	7e 89       	ldd	r23, Y+22	; 0x16
    355a:	8f 89       	ldd	r24, Y+23	; 0x17
    355c:	98 8d       	ldd	r25, Y+24	; 0x18
    355e:	20 e0       	ldi	r18, 0x00	; 0
    3560:	3f ef       	ldi	r19, 0xFF	; 255
    3562:	4f e7       	ldi	r20, 0x7F	; 127
    3564:	57 e4       	ldi	r21, 0x47	; 71
    3566:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    356a:	18 16       	cp	r1, r24
    356c:	4c f5       	brge	.+82     	; 0x35c0 <LCD_init+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    356e:	69 8d       	ldd	r22, Y+25	; 0x19
    3570:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3572:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3574:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3576:	20 e0       	ldi	r18, 0x00	; 0
    3578:	30 e0       	ldi	r19, 0x00	; 0
    357a:	40 e2       	ldi	r20, 0x20	; 32
    357c:	51 e4       	ldi	r21, 0x41	; 65
    357e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3582:	dc 01       	movw	r26, r24
    3584:	cb 01       	movw	r24, r22
    3586:	bc 01       	movw	r22, r24
    3588:	cd 01       	movw	r24, r26
    358a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    358e:	dc 01       	movw	r26, r24
    3590:	cb 01       	movw	r24, r22
    3592:	9c 8b       	std	Y+20, r25	; 0x14
    3594:	8b 8b       	std	Y+19, r24	; 0x13
    3596:	0f c0       	rjmp	.+30     	; 0x35b6 <LCD_init+0xca>
    3598:	89 e1       	ldi	r24, 0x19	; 25
    359a:	90 e0       	ldi	r25, 0x00	; 0
    359c:	9a 8b       	std	Y+18, r25	; 0x12
    359e:	89 8b       	std	Y+17, r24	; 0x11
    35a0:	89 89       	ldd	r24, Y+17	; 0x11
    35a2:	9a 89       	ldd	r25, Y+18	; 0x12
    35a4:	01 97       	sbiw	r24, 0x01	; 1
    35a6:	f1 f7       	brne	.-4      	; 0x35a4 <LCD_init+0xb8>
    35a8:	9a 8b       	std	Y+18, r25	; 0x12
    35aa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35ac:	8b 89       	ldd	r24, Y+19	; 0x13
    35ae:	9c 89       	ldd	r25, Y+20	; 0x14
    35b0:	01 97       	sbiw	r24, 0x01	; 1
    35b2:	9c 8b       	std	Y+20, r25	; 0x14
    35b4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35b6:	8b 89       	ldd	r24, Y+19	; 0x13
    35b8:	9c 89       	ldd	r25, Y+20	; 0x14
    35ba:	00 97       	sbiw	r24, 0x00	; 0
    35bc:	69 f7       	brne	.-38     	; 0x3598 <LCD_init+0xac>
    35be:	14 c0       	rjmp	.+40     	; 0x35e8 <LCD_init+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35c0:	6d 89       	ldd	r22, Y+21	; 0x15
    35c2:	7e 89       	ldd	r23, Y+22	; 0x16
    35c4:	8f 89       	ldd	r24, Y+23	; 0x17
    35c6:	98 8d       	ldd	r25, Y+24	; 0x18
    35c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35cc:	dc 01       	movw	r26, r24
    35ce:	cb 01       	movw	r24, r22
    35d0:	9c 8b       	std	Y+20, r25	; 0x14
    35d2:	8b 8b       	std	Y+19, r24	; 0x13
    35d4:	8b 89       	ldd	r24, Y+19	; 0x13
    35d6:	9c 89       	ldd	r25, Y+20	; 0x14
    35d8:	98 8b       	std	Y+16, r25	; 0x10
    35da:	8f 87       	std	Y+15, r24	; 0x0f
    35dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    35de:	98 89       	ldd	r25, Y+16	; 0x10
    35e0:	01 97       	sbiw	r24, 0x01	; 1
    35e2:	f1 f7       	brne	.-4      	; 0x35e0 <LCD_init+0xf4>
    35e4:	98 8b       	std	Y+16, r25	; 0x10
    35e6:	8f 87       	std	Y+15, r24	; 0x0f
//
//	gpioPinWrite(LCD_RS_PORT, LCD_RS_PIN, LOW);
//	gpioPinWrite(LCD_RW_PORT, LCD_RW_PIN, LOW);
//	gpioPinWrite(LCD_EN_PORT, LCD_EN_PIN, LOW);

	LCD_send_command(0x33);
    35e8:	83 e3       	ldi	r24, 0x33	; 51
    35ea:	0e 94 df 19 	call	0x33be	; 0x33be <LCD_send_command>
	LCD_send_command(0x32);
    35ee:	82 e3       	ldi	r24, 0x32	; 50
    35f0:	0e 94 df 19 	call	0x33be	; 0x33be <LCD_send_command>
	LCD_send_command(Four_bit); // 4-bit
    35f4:	88 e2       	ldi	r24, 0x28	; 40
    35f6:	0e 94 df 19 	call	0x33be	; 0x33be <LCD_send_command>
	LCD_send_command(Cursor_on);
    35fa:	8e e0       	ldi	r24, 0x0E	; 14
    35fc:	0e 94 df 19 	call	0x33be	; 0x33be <LCD_send_command>
	LCD_send_command(Lcd_clear);
    3600:	81 e0       	ldi	r24, 0x01	; 1
    3602:	0e 94 df 19 	call	0x33be	; 0x33be <LCD_send_command>
    3606:	80 e0       	ldi	r24, 0x00	; 0
    3608:	90 e0       	ldi	r25, 0x00	; 0
    360a:	a0 e2       	ldi	r26, 0x20	; 32
    360c:	b1 e4       	ldi	r27, 0x41	; 65
    360e:	8b 87       	std	Y+11, r24	; 0x0b
    3610:	9c 87       	std	Y+12, r25	; 0x0c
    3612:	ad 87       	std	Y+13, r26	; 0x0d
    3614:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3616:	6b 85       	ldd	r22, Y+11	; 0x0b
    3618:	7c 85       	ldd	r23, Y+12	; 0x0c
    361a:	8d 85       	ldd	r24, Y+13	; 0x0d
    361c:	9e 85       	ldd	r25, Y+14	; 0x0e
    361e:	20 e0       	ldi	r18, 0x00	; 0
    3620:	30 e0       	ldi	r19, 0x00	; 0
    3622:	4a e7       	ldi	r20, 0x7A	; 122
    3624:	53 e4       	ldi	r21, 0x43	; 67
    3626:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    362a:	dc 01       	movw	r26, r24
    362c:	cb 01       	movw	r24, r22
    362e:	8f 83       	std	Y+7, r24	; 0x07
    3630:	98 87       	std	Y+8, r25	; 0x08
    3632:	a9 87       	std	Y+9, r26	; 0x09
    3634:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3636:	6f 81       	ldd	r22, Y+7	; 0x07
    3638:	78 85       	ldd	r23, Y+8	; 0x08
    363a:	89 85       	ldd	r24, Y+9	; 0x09
    363c:	9a 85       	ldd	r25, Y+10	; 0x0a
    363e:	20 e0       	ldi	r18, 0x00	; 0
    3640:	30 e0       	ldi	r19, 0x00	; 0
    3642:	40 e8       	ldi	r20, 0x80	; 128
    3644:	5f e3       	ldi	r21, 0x3F	; 63
    3646:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    364a:	88 23       	and	r24, r24
    364c:	2c f4       	brge	.+10     	; 0x3658 <LCD_init+0x16c>
		__ticks = 1;
    364e:	81 e0       	ldi	r24, 0x01	; 1
    3650:	90 e0       	ldi	r25, 0x00	; 0
    3652:	9e 83       	std	Y+6, r25	; 0x06
    3654:	8d 83       	std	Y+5, r24	; 0x05
    3656:	3f c0       	rjmp	.+126    	; 0x36d6 <LCD_init+0x1ea>
	else if (__tmp > 65535)
    3658:	6f 81       	ldd	r22, Y+7	; 0x07
    365a:	78 85       	ldd	r23, Y+8	; 0x08
    365c:	89 85       	ldd	r24, Y+9	; 0x09
    365e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3660:	20 e0       	ldi	r18, 0x00	; 0
    3662:	3f ef       	ldi	r19, 0xFF	; 255
    3664:	4f e7       	ldi	r20, 0x7F	; 127
    3666:	57 e4       	ldi	r21, 0x47	; 71
    3668:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    366c:	18 16       	cp	r1, r24
    366e:	4c f5       	brge	.+82     	; 0x36c2 <LCD_init+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3670:	6b 85       	ldd	r22, Y+11	; 0x0b
    3672:	7c 85       	ldd	r23, Y+12	; 0x0c
    3674:	8d 85       	ldd	r24, Y+13	; 0x0d
    3676:	9e 85       	ldd	r25, Y+14	; 0x0e
    3678:	20 e0       	ldi	r18, 0x00	; 0
    367a:	30 e0       	ldi	r19, 0x00	; 0
    367c:	40 e2       	ldi	r20, 0x20	; 32
    367e:	51 e4       	ldi	r21, 0x41	; 65
    3680:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3684:	dc 01       	movw	r26, r24
    3686:	cb 01       	movw	r24, r22
    3688:	bc 01       	movw	r22, r24
    368a:	cd 01       	movw	r24, r26
    368c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3690:	dc 01       	movw	r26, r24
    3692:	cb 01       	movw	r24, r22
    3694:	9e 83       	std	Y+6, r25	; 0x06
    3696:	8d 83       	std	Y+5, r24	; 0x05
    3698:	0f c0       	rjmp	.+30     	; 0x36b8 <LCD_init+0x1cc>
    369a:	89 e1       	ldi	r24, 0x19	; 25
    369c:	90 e0       	ldi	r25, 0x00	; 0
    369e:	9c 83       	std	Y+4, r25	; 0x04
    36a0:	8b 83       	std	Y+3, r24	; 0x03
    36a2:	8b 81       	ldd	r24, Y+3	; 0x03
    36a4:	9c 81       	ldd	r25, Y+4	; 0x04
    36a6:	01 97       	sbiw	r24, 0x01	; 1
    36a8:	f1 f7       	brne	.-4      	; 0x36a6 <LCD_init+0x1ba>
    36aa:	9c 83       	std	Y+4, r25	; 0x04
    36ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36ae:	8d 81       	ldd	r24, Y+5	; 0x05
    36b0:	9e 81       	ldd	r25, Y+6	; 0x06
    36b2:	01 97       	sbiw	r24, 0x01	; 1
    36b4:	9e 83       	std	Y+6, r25	; 0x06
    36b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36b8:	8d 81       	ldd	r24, Y+5	; 0x05
    36ba:	9e 81       	ldd	r25, Y+6	; 0x06
    36bc:	00 97       	sbiw	r24, 0x00	; 0
    36be:	69 f7       	brne	.-38     	; 0x369a <LCD_init+0x1ae>
    36c0:	14 c0       	rjmp	.+40     	; 0x36ea <LCD_init+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36c2:	6f 81       	ldd	r22, Y+7	; 0x07
    36c4:	78 85       	ldd	r23, Y+8	; 0x08
    36c6:	89 85       	ldd	r24, Y+9	; 0x09
    36c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    36ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36ce:	dc 01       	movw	r26, r24
    36d0:	cb 01       	movw	r24, r22
    36d2:	9e 83       	std	Y+6, r25	; 0x06
    36d4:	8d 83       	std	Y+5, r24	; 0x05
    36d6:	8d 81       	ldd	r24, Y+5	; 0x05
    36d8:	9e 81       	ldd	r25, Y+6	; 0x06
    36da:	9a 83       	std	Y+2, r25	; 0x02
    36dc:	89 83       	std	Y+1, r24	; 0x01
    36de:	89 81       	ldd	r24, Y+1	; 0x01
    36e0:	9a 81       	ldd	r25, Y+2	; 0x02
    36e2:	01 97       	sbiw	r24, 0x01	; 1
    36e4:	f1 f7       	brne	.-4      	; 0x36e2 <LCD_init+0x1f6>
    36e6:	9a 83       	std	Y+2, r25	; 0x02
    36e8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	LCD_send_command(Increment_cursor);
    36ea:	86 e0       	ldi	r24, 0x06	; 6
    36ec:	0e 94 df 19 	call	0x33be	; 0x33be <LCD_send_command>
	LCD_send_command(Cursor_off); // Cursor off
    36f0:	8c e0       	ldi	r24, 0x0C	; 12
    36f2:	0e 94 df 19 	call	0x33be	; 0x33be <LCD_send_command>
}
    36f6:	6c 96       	adiw	r28, 0x1c	; 28
    36f8:	0f b6       	in	r0, 0x3f	; 63
    36fa:	f8 94       	cli
    36fc:	de bf       	out	0x3e, r29	; 62
    36fe:	0f be       	out	0x3f, r0	; 63
    3700:	cd bf       	out	0x3d, r28	; 61
    3702:	cf 91       	pop	r28
    3704:	df 91       	pop	r29
    3706:	08 95       	ret

00003708 <LCD_clear>:
void LCD_clear(void)				//Clears LCD
{
    3708:	df 93       	push	r29
    370a:	cf 93       	push	r28
    370c:	cd b7       	in	r28, 0x3d	; 61
    370e:	de b7       	in	r29, 0x3e	; 62
	LCD_send_command(Lcd_clear);
    3710:	81 e0       	ldi	r24, 0x01	; 1
    3712:	0e 94 df 19 	call	0x33be	; 0x33be <LCD_send_command>
}
    3716:	cf 91       	pop	r28
    3718:	df 91       	pop	r29
    371a:	08 95       	ret

0000371c <LCD_send_string>:

void LCD_send_string(char* data)	//Outputs string to LCD
{
    371c:	df 93       	push	r29
    371e:	cf 93       	push	r28
    3720:	00 d0       	rcall	.+0      	; 0x3722 <LCD_send_string+0x6>
    3722:	cd b7       	in	r28, 0x3d	; 61
    3724:	de b7       	in	r29, 0x3e	; 62
    3726:	9a 83       	std	Y+2, r25	; 0x02
    3728:	89 83       	std	Y+1, r24	; 0x01
    372a:	0b c0       	rjmp	.+22     	; 0x3742 <LCD_send_string+0x26>
	while(*data){
		LCD_send_char(*data++);
    372c:	e9 81       	ldd	r30, Y+1	; 0x01
    372e:	fa 81       	ldd	r31, Y+2	; 0x02
    3730:	20 81       	ld	r18, Z
    3732:	89 81       	ldd	r24, Y+1	; 0x01
    3734:	9a 81       	ldd	r25, Y+2	; 0x02
    3736:	01 96       	adiw	r24, 0x01	; 1
    3738:	9a 83       	std	Y+2, r25	; 0x02
    373a:	89 83       	std	Y+1, r24	; 0x01
    373c:	82 2f       	mov	r24, r18
    373e:	0e 94 48 19 	call	0x3290	; 0x3290 <LCD_send_char>
	LCD_send_command(Lcd_clear);
}

void LCD_send_string(char* data)	//Outputs string to LCD
{
	while(*data){
    3742:	e9 81       	ldd	r30, Y+1	; 0x01
    3744:	fa 81       	ldd	r31, Y+2	; 0x02
    3746:	80 81       	ld	r24, Z
    3748:	88 23       	and	r24, r24
    374a:	81 f7       	brne	.-32     	; 0x372c <LCD_send_string+0x10>
		LCD_send_char(*data++);
	}
}
    374c:	0f 90       	pop	r0
    374e:	0f 90       	pop	r0
    3750:	cf 91       	pop	r28
    3752:	df 91       	pop	r29
    3754:	08 95       	ret

00003756 <LCD_goto_xy>:

void LCD_goto_xy(uint8 x, uint8 y)	//Cursor to X Y position
{
    3756:	df 93       	push	r29
    3758:	cf 93       	push	r28
    375a:	00 d0       	rcall	.+0      	; 0x375c <LCD_goto_xy+0x6>
    375c:	00 d0       	rcall	.+0      	; 0x375e <LCD_goto_xy+0x8>
    375e:	0f 92       	push	r0
    3760:	cd b7       	in	r28, 0x3d	; 61
    3762:	de b7       	in	r29, 0x3e	; 62
    3764:	8a 83       	std	Y+2, r24	; 0x02
    3766:	6b 83       	std	Y+3, r22	; 0x03
	uint8 DDRAMAddr;
	// remap lines into proper order
	switch(y)
    3768:	8b 81       	ldd	r24, Y+3	; 0x03
    376a:	28 2f       	mov	r18, r24
    376c:	30 e0       	ldi	r19, 0x00	; 0
    376e:	3d 83       	std	Y+5, r19	; 0x05
    3770:	2c 83       	std	Y+4, r18	; 0x04
    3772:	8c 81       	ldd	r24, Y+4	; 0x04
    3774:	9d 81       	ldd	r25, Y+5	; 0x05
    3776:	81 30       	cpi	r24, 0x01	; 1
    3778:	91 05       	cpc	r25, r1
    377a:	c1 f0       	breq	.+48     	; 0x37ac <LCD_goto_xy+0x56>
    377c:	2c 81       	ldd	r18, Y+4	; 0x04
    377e:	3d 81       	ldd	r19, Y+5	; 0x05
    3780:	22 30       	cpi	r18, 0x02	; 2
    3782:	31 05       	cpc	r19, r1
    3784:	2c f4       	brge	.+10     	; 0x3790 <LCD_goto_xy+0x3a>
    3786:	8c 81       	ldd	r24, Y+4	; 0x04
    3788:	9d 81       	ldd	r25, Y+5	; 0x05
    378a:	00 97       	sbiw	r24, 0x00	; 0
    378c:	61 f0       	breq	.+24     	; 0x37a6 <LCD_goto_xy+0x50>
    378e:	1a c0       	rjmp	.+52     	; 0x37c4 <LCD_goto_xy+0x6e>
    3790:	2c 81       	ldd	r18, Y+4	; 0x04
    3792:	3d 81       	ldd	r19, Y+5	; 0x05
    3794:	22 30       	cpi	r18, 0x02	; 2
    3796:	31 05       	cpc	r19, r1
    3798:	69 f0       	breq	.+26     	; 0x37b4 <LCD_goto_xy+0x5e>
    379a:	8c 81       	ldd	r24, Y+4	; 0x04
    379c:	9d 81       	ldd	r25, Y+5	; 0x05
    379e:	83 30       	cpi	r24, 0x03	; 3
    37a0:	91 05       	cpc	r25, r1
    37a2:	61 f0       	breq	.+24     	; 0x37bc <LCD_goto_xy+0x66>
    37a4:	0f c0       	rjmp	.+30     	; 0x37c4 <LCD_goto_xy+0x6e>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
    37a6:	8a 81       	ldd	r24, Y+2	; 0x02
    37a8:	89 83       	std	Y+1, r24	; 0x01
    37aa:	0e c0       	rjmp	.+28     	; 0x37c8 <LCD_goto_xy+0x72>
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
    37ac:	8a 81       	ldd	r24, Y+2	; 0x02
    37ae:	80 5c       	subi	r24, 0xC0	; 192
    37b0:	89 83       	std	Y+1, r24	; 0x01
    37b2:	0a c0       	rjmp	.+20     	; 0x37c8 <LCD_goto_xy+0x72>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
    37b4:	8a 81       	ldd	r24, Y+2	; 0x02
    37b6:	8c 5e       	subi	r24, 0xEC	; 236
    37b8:	89 83       	std	Y+1, r24	; 0x01
    37ba:	06 c0       	rjmp	.+12     	; 0x37c8 <LCD_goto_xy+0x72>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
    37bc:	8a 81       	ldd	r24, Y+2	; 0x02
    37be:	8c 5a       	subi	r24, 0xAC	; 172
    37c0:	89 83       	std	Y+1, r24	; 0x01
    37c2:	02 c0       	rjmp	.+4      	; 0x37c8 <LCD_goto_xy+0x72>
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
    37c4:	8a 81       	ldd	r24, Y+2	; 0x02
    37c6:	89 83       	std	Y+1, r24	; 0x01
	}
	// set data address
	LCD_send_command(1<<LCD_DDRAM | DDRAMAddr);
    37c8:	89 81       	ldd	r24, Y+1	; 0x01
    37ca:	80 68       	ori	r24, 0x80	; 128
    37cc:	0e 94 df 19 	call	0x33be	; 0x33be <LCD_send_command>

}
    37d0:	0f 90       	pop	r0
    37d2:	0f 90       	pop	r0
    37d4:	0f 90       	pop	r0
    37d6:	0f 90       	pop	r0
    37d8:	0f 90       	pop	r0
    37da:	cf 91       	pop	r28
    37dc:	df 91       	pop	r29
    37de:	08 95       	ret

000037e0 <main>:
uint16 xx=0;
uint8 au8_lcdBuffer[16];


int main()
{
    37e0:	df 93       	push	r29
    37e2:	cf 93       	push	r28
    37e4:	cd b7       	in	r28, 0x3d	; 61
    37e6:	de b7       	in	r29, 0x3e	; 62
    37e8:	62 97       	sbiw	r28, 0x12	; 18
    37ea:	0f b6       	in	r0, 0x3f	; 63
    37ec:	f8 94       	cli
    37ee:	de bf       	out	0x3e, r29	; 62
    37f0:	0f be       	out	0x3f, r0	; 63
    37f2:	cd bf       	out	0x3d, r28	; 61

	sei();
    37f4:	78 94       	sei
	Icu_cfg_s Icu_Cfg;
	Icu_Cfg.ICU_Ch_No = ICU_CH2;
    37f6:	82 e0       	ldi	r24, 0x02	; 2
    37f8:	8f 87       	std	Y+15, r24	; 0x0f
	Icu_Cfg.ICU_Ch_Timer = ICU_TIMER_CH0;
    37fa:	18 8a       	std	Y+16, r1	; 0x10
	Icu_Init(&Icu_Cfg);
    37fc:	ce 01       	movw	r24, r28
    37fe:	0f 96       	adiw	r24, 0x0f	; 15
    3800:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <Icu_Init>

	Pwm_Cfg_s_t pwm;
	pwm.channel = PWM_CH1A;
    3804:	81 e0       	ldi	r24, 0x01	; 1
    3806:	89 8b       	std	Y+17, r24	; 0x11
	pwm.prescaler = PWM_PRESCALER_64;
    3808:	83 e0       	ldi	r24, 0x03	; 3
    380a:	8a 8b       	std	Y+18, r24	; 0x12
	Pwm_Init(&pwm);
    380c:	ce 01       	movw	r24, r28
    380e:	41 96       	adiw	r24, 0x11	; 17
    3810:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <Pwm_Init>
	Pwm_Start(PWM_CH1A,50,500);
    3814:	81 e0       	ldi	r24, 0x01	; 1
    3816:	62 e3       	ldi	r22, 0x32	; 50
    3818:	24 ef       	ldi	r18, 0xF4	; 244
    381a:	31 e0       	ldi	r19, 0x01	; 1
    381c:	40 e0       	ldi	r20, 0x00	; 0
    381e:	50 e0       	ldi	r21, 0x00	; 0
    3820:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <Pwm_Start>
	LCD_init();
    3824:	0e 94 76 1a 	call	0x34ec	; 0x34ec <LCD_init>
	PORTD_DIR |= 0X01;
    3828:	a1 e3       	ldi	r26, 0x31	; 49
    382a:	b0 e0       	ldi	r27, 0x00	; 0
    382c:	e1 e3       	ldi	r30, 0x31	; 49
    382e:	f0 e0       	ldi	r31, 0x00	; 0
    3830:	80 81       	ld	r24, Z
    3832:	81 60       	ori	r24, 0x01	; 1
    3834:	8c 93       	st	X, r24
        Timer_Start(0,255);*/

	while(1)
	{

		sprintf(au8_lcdBuffer, "ss  ");
    3836:	88 eb       	ldi	r24, 0xB8	; 184
    3838:	90 e0       	ldi	r25, 0x00	; 0
    383a:	20 e6       	ldi	r18, 0x60	; 96
    383c:	30 e0       	ldi	r19, 0x00	; 0
    383e:	b9 01       	movw	r22, r18
    3840:	45 e0       	ldi	r20, 0x05	; 5
    3842:	50 e0       	ldi	r21, 0x00	; 0
    3844:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <memcpy>
		Icu_RiseToFall(&xx);
    3848:	83 eb       	ldi	r24, 0xB3	; 179
    384a:	90 e0       	ldi	r25, 0x00	; 0
    384c:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <Icu_RiseToFall>
		sprintf(au8_lcdBuffer, "%d CM  ", xx);
    3850:	20 91 b3 00 	lds	r18, 0x00B3
    3854:	30 91 b4 00 	lds	r19, 0x00B4
    3858:	00 d0       	rcall	.+0      	; 0x385a <main+0x7a>
    385a:	00 d0       	rcall	.+0      	; 0x385c <main+0x7c>
    385c:	00 d0       	rcall	.+0      	; 0x385e <main+0x7e>
    385e:	ed b7       	in	r30, 0x3d	; 61
    3860:	fe b7       	in	r31, 0x3e	; 62
    3862:	31 96       	adiw	r30, 0x01	; 1
    3864:	88 eb       	ldi	r24, 0xB8	; 184
    3866:	90 e0       	ldi	r25, 0x00	; 0
    3868:	91 83       	std	Z+1, r25	; 0x01
    386a:	80 83       	st	Z, r24
    386c:	85 e6       	ldi	r24, 0x65	; 101
    386e:	90 e0       	ldi	r25, 0x00	; 0
    3870:	93 83       	std	Z+3, r25	; 0x03
    3872:	82 83       	std	Z+2, r24	; 0x02
    3874:	35 83       	std	Z+5, r19	; 0x05
    3876:	24 83       	std	Z+4, r18	; 0x04
    3878:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <sprintf>
    387c:	8d b7       	in	r24, 0x3d	; 61
    387e:	9e b7       	in	r25, 0x3e	; 62
    3880:	06 96       	adiw	r24, 0x06	; 6
    3882:	0f b6       	in	r0, 0x3f	; 63
    3884:	f8 94       	cli
    3886:	9e bf       	out	0x3e, r25	; 62
    3888:	0f be       	out	0x3f, r0	; 63
    388a:	8d bf       	out	0x3d, r24	; 61
		LCD_goto_xy(1, 0);
    388c:	81 e0       	ldi	r24, 0x01	; 1
    388e:	60 e0       	ldi	r22, 0x00	; 0
    3890:	0e 94 ab 1b 	call	0x3756	; 0x3756 <LCD_goto_xy>
		LCD_send_string(au8_lcdBuffer);
    3894:	88 eb       	ldi	r24, 0xB8	; 184
    3896:	90 e0       	ldi	r25, 0x00	; 0
    3898:	0e 94 8e 1b 	call	0x371c	; 0x371c <LCD_send_string>
    389c:	80 e0       	ldi	r24, 0x00	; 0
    389e:	90 e0       	ldi	r25, 0x00	; 0
    38a0:	a8 ec       	ldi	r26, 0xC8	; 200
    38a2:	b2 e4       	ldi	r27, 0x42	; 66
    38a4:	8b 87       	std	Y+11, r24	; 0x0b
    38a6:	9c 87       	std	Y+12, r25	; 0x0c
    38a8:	ad 87       	std	Y+13, r26	; 0x0d
    38aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    38ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    38b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    38b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    38b4:	20 e0       	ldi	r18, 0x00	; 0
    38b6:	30 e0       	ldi	r19, 0x00	; 0
    38b8:	4a e7       	ldi	r20, 0x7A	; 122
    38ba:	53 e4       	ldi	r21, 0x43	; 67
    38bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38c0:	dc 01       	movw	r26, r24
    38c2:	cb 01       	movw	r24, r22
    38c4:	8f 83       	std	Y+7, r24	; 0x07
    38c6:	98 87       	std	Y+8, r25	; 0x08
    38c8:	a9 87       	std	Y+9, r26	; 0x09
    38ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    38cc:	6f 81       	ldd	r22, Y+7	; 0x07
    38ce:	78 85       	ldd	r23, Y+8	; 0x08
    38d0:	89 85       	ldd	r24, Y+9	; 0x09
    38d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    38d4:	20 e0       	ldi	r18, 0x00	; 0
    38d6:	30 e0       	ldi	r19, 0x00	; 0
    38d8:	40 e8       	ldi	r20, 0x80	; 128
    38da:	5f e3       	ldi	r21, 0x3F	; 63
    38dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    38e0:	88 23       	and	r24, r24
    38e2:	2c f4       	brge	.+10     	; 0x38ee <main+0x10e>
		__ticks = 1;
    38e4:	81 e0       	ldi	r24, 0x01	; 1
    38e6:	90 e0       	ldi	r25, 0x00	; 0
    38e8:	9e 83       	std	Y+6, r25	; 0x06
    38ea:	8d 83       	std	Y+5, r24	; 0x05
    38ec:	3f c0       	rjmp	.+126    	; 0x396c <main+0x18c>
	else if (__tmp > 65535)
    38ee:	6f 81       	ldd	r22, Y+7	; 0x07
    38f0:	78 85       	ldd	r23, Y+8	; 0x08
    38f2:	89 85       	ldd	r24, Y+9	; 0x09
    38f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    38f6:	20 e0       	ldi	r18, 0x00	; 0
    38f8:	3f ef       	ldi	r19, 0xFF	; 255
    38fa:	4f e7       	ldi	r20, 0x7F	; 127
    38fc:	57 e4       	ldi	r21, 0x47	; 71
    38fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3902:	18 16       	cp	r1, r24
    3904:	4c f5       	brge	.+82     	; 0x3958 <main+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3906:	6b 85       	ldd	r22, Y+11	; 0x0b
    3908:	7c 85       	ldd	r23, Y+12	; 0x0c
    390a:	8d 85       	ldd	r24, Y+13	; 0x0d
    390c:	9e 85       	ldd	r25, Y+14	; 0x0e
    390e:	20 e0       	ldi	r18, 0x00	; 0
    3910:	30 e0       	ldi	r19, 0x00	; 0
    3912:	40 e2       	ldi	r20, 0x20	; 32
    3914:	51 e4       	ldi	r21, 0x41	; 65
    3916:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    391a:	dc 01       	movw	r26, r24
    391c:	cb 01       	movw	r24, r22
    391e:	bc 01       	movw	r22, r24
    3920:	cd 01       	movw	r24, r26
    3922:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3926:	dc 01       	movw	r26, r24
    3928:	cb 01       	movw	r24, r22
    392a:	9e 83       	std	Y+6, r25	; 0x06
    392c:	8d 83       	std	Y+5, r24	; 0x05
    392e:	0f c0       	rjmp	.+30     	; 0x394e <main+0x16e>
    3930:	89 e1       	ldi	r24, 0x19	; 25
    3932:	90 e0       	ldi	r25, 0x00	; 0
    3934:	9c 83       	std	Y+4, r25	; 0x04
    3936:	8b 83       	std	Y+3, r24	; 0x03
    3938:	8b 81       	ldd	r24, Y+3	; 0x03
    393a:	9c 81       	ldd	r25, Y+4	; 0x04
    393c:	01 97       	sbiw	r24, 0x01	; 1
    393e:	f1 f7       	brne	.-4      	; 0x393c <main+0x15c>
    3940:	9c 83       	std	Y+4, r25	; 0x04
    3942:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3944:	8d 81       	ldd	r24, Y+5	; 0x05
    3946:	9e 81       	ldd	r25, Y+6	; 0x06
    3948:	01 97       	sbiw	r24, 0x01	; 1
    394a:	9e 83       	std	Y+6, r25	; 0x06
    394c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    394e:	8d 81       	ldd	r24, Y+5	; 0x05
    3950:	9e 81       	ldd	r25, Y+6	; 0x06
    3952:	00 97       	sbiw	r24, 0x00	; 0
    3954:	69 f7       	brne	.-38     	; 0x3930 <main+0x150>
    3956:	6f cf       	rjmp	.-290    	; 0x3836 <main+0x56>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3958:	6f 81       	ldd	r22, Y+7	; 0x07
    395a:	78 85       	ldd	r23, Y+8	; 0x08
    395c:	89 85       	ldd	r24, Y+9	; 0x09
    395e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3960:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3964:	dc 01       	movw	r26, r24
    3966:	cb 01       	movw	r24, r22
    3968:	9e 83       	std	Y+6, r25	; 0x06
    396a:	8d 83       	std	Y+5, r24	; 0x05
    396c:	8d 81       	ldd	r24, Y+5	; 0x05
    396e:	9e 81       	ldd	r25, Y+6	; 0x06
    3970:	9a 83       	std	Y+2, r25	; 0x02
    3972:	89 83       	std	Y+1, r24	; 0x01
    3974:	89 81       	ldd	r24, Y+1	; 0x01
    3976:	9a 81       	ldd	r25, Y+2	; 0x02
    3978:	01 97       	sbiw	r24, 0x01	; 1
    397a:	f1 f7       	brne	.-4      	; 0x3978 <main+0x198>
    397c:	9a 83       	std	Y+2, r25	; 0x02
    397e:	89 83       	std	Y+1, r24	; 0x01
    3980:	5a cf       	rjmp	.-332    	; 0x3836 <main+0x56>

00003982 <__mulsi3>:
    3982:	62 9f       	mul	r22, r18
    3984:	d0 01       	movw	r26, r0
    3986:	73 9f       	mul	r23, r19
    3988:	f0 01       	movw	r30, r0
    398a:	82 9f       	mul	r24, r18
    398c:	e0 0d       	add	r30, r0
    398e:	f1 1d       	adc	r31, r1
    3990:	64 9f       	mul	r22, r20
    3992:	e0 0d       	add	r30, r0
    3994:	f1 1d       	adc	r31, r1
    3996:	92 9f       	mul	r25, r18
    3998:	f0 0d       	add	r31, r0
    399a:	83 9f       	mul	r24, r19
    399c:	f0 0d       	add	r31, r0
    399e:	74 9f       	mul	r23, r20
    39a0:	f0 0d       	add	r31, r0
    39a2:	65 9f       	mul	r22, r21
    39a4:	f0 0d       	add	r31, r0
    39a6:	99 27       	eor	r25, r25
    39a8:	72 9f       	mul	r23, r18
    39aa:	b0 0d       	add	r27, r0
    39ac:	e1 1d       	adc	r30, r1
    39ae:	f9 1f       	adc	r31, r25
    39b0:	63 9f       	mul	r22, r19
    39b2:	b0 0d       	add	r27, r0
    39b4:	e1 1d       	adc	r30, r1
    39b6:	f9 1f       	adc	r31, r25
    39b8:	bd 01       	movw	r22, r26
    39ba:	cf 01       	movw	r24, r30
    39bc:	11 24       	eor	r1, r1
    39be:	08 95       	ret

000039c0 <__udivmodsi4>:
    39c0:	a1 e2       	ldi	r26, 0x21	; 33
    39c2:	1a 2e       	mov	r1, r26
    39c4:	aa 1b       	sub	r26, r26
    39c6:	bb 1b       	sub	r27, r27
    39c8:	fd 01       	movw	r30, r26
    39ca:	0d c0       	rjmp	.+26     	; 0x39e6 <__udivmodsi4_ep>

000039cc <__udivmodsi4_loop>:
    39cc:	aa 1f       	adc	r26, r26
    39ce:	bb 1f       	adc	r27, r27
    39d0:	ee 1f       	adc	r30, r30
    39d2:	ff 1f       	adc	r31, r31
    39d4:	a2 17       	cp	r26, r18
    39d6:	b3 07       	cpc	r27, r19
    39d8:	e4 07       	cpc	r30, r20
    39da:	f5 07       	cpc	r31, r21
    39dc:	20 f0       	brcs	.+8      	; 0x39e6 <__udivmodsi4_ep>
    39de:	a2 1b       	sub	r26, r18
    39e0:	b3 0b       	sbc	r27, r19
    39e2:	e4 0b       	sbc	r30, r20
    39e4:	f5 0b       	sbc	r31, r21

000039e6 <__udivmodsi4_ep>:
    39e6:	66 1f       	adc	r22, r22
    39e8:	77 1f       	adc	r23, r23
    39ea:	88 1f       	adc	r24, r24
    39ec:	99 1f       	adc	r25, r25
    39ee:	1a 94       	dec	r1
    39f0:	69 f7       	brne	.-38     	; 0x39cc <__udivmodsi4_loop>
    39f2:	60 95       	com	r22
    39f4:	70 95       	com	r23
    39f6:	80 95       	com	r24
    39f8:	90 95       	com	r25
    39fa:	9b 01       	movw	r18, r22
    39fc:	ac 01       	movw	r20, r24
    39fe:	bd 01       	movw	r22, r26
    3a00:	cf 01       	movw	r24, r30
    3a02:	08 95       	ret

00003a04 <__prologue_saves__>:
    3a04:	2f 92       	push	r2
    3a06:	3f 92       	push	r3
    3a08:	4f 92       	push	r4
    3a0a:	5f 92       	push	r5
    3a0c:	6f 92       	push	r6
    3a0e:	7f 92       	push	r7
    3a10:	8f 92       	push	r8
    3a12:	9f 92       	push	r9
    3a14:	af 92       	push	r10
    3a16:	bf 92       	push	r11
    3a18:	cf 92       	push	r12
    3a1a:	df 92       	push	r13
    3a1c:	ef 92       	push	r14
    3a1e:	ff 92       	push	r15
    3a20:	0f 93       	push	r16
    3a22:	1f 93       	push	r17
    3a24:	cf 93       	push	r28
    3a26:	df 93       	push	r29
    3a28:	cd b7       	in	r28, 0x3d	; 61
    3a2a:	de b7       	in	r29, 0x3e	; 62
    3a2c:	ca 1b       	sub	r28, r26
    3a2e:	db 0b       	sbc	r29, r27
    3a30:	0f b6       	in	r0, 0x3f	; 63
    3a32:	f8 94       	cli
    3a34:	de bf       	out	0x3e, r29	; 62
    3a36:	0f be       	out	0x3f, r0	; 63
    3a38:	cd bf       	out	0x3d, r28	; 61
    3a3a:	09 94       	ijmp

00003a3c <__epilogue_restores__>:
    3a3c:	2a 88       	ldd	r2, Y+18	; 0x12
    3a3e:	39 88       	ldd	r3, Y+17	; 0x11
    3a40:	48 88       	ldd	r4, Y+16	; 0x10
    3a42:	5f 84       	ldd	r5, Y+15	; 0x0f
    3a44:	6e 84       	ldd	r6, Y+14	; 0x0e
    3a46:	7d 84       	ldd	r7, Y+13	; 0x0d
    3a48:	8c 84       	ldd	r8, Y+12	; 0x0c
    3a4a:	9b 84       	ldd	r9, Y+11	; 0x0b
    3a4c:	aa 84       	ldd	r10, Y+10	; 0x0a
    3a4e:	b9 84       	ldd	r11, Y+9	; 0x09
    3a50:	c8 84       	ldd	r12, Y+8	; 0x08
    3a52:	df 80       	ldd	r13, Y+7	; 0x07
    3a54:	ee 80       	ldd	r14, Y+6	; 0x06
    3a56:	fd 80       	ldd	r15, Y+5	; 0x05
    3a58:	0c 81       	ldd	r16, Y+4	; 0x04
    3a5a:	1b 81       	ldd	r17, Y+3	; 0x03
    3a5c:	aa 81       	ldd	r26, Y+2	; 0x02
    3a5e:	b9 81       	ldd	r27, Y+1	; 0x01
    3a60:	ce 0f       	add	r28, r30
    3a62:	d1 1d       	adc	r29, r1
    3a64:	0f b6       	in	r0, 0x3f	; 63
    3a66:	f8 94       	cli
    3a68:	de bf       	out	0x3e, r29	; 62
    3a6a:	0f be       	out	0x3f, r0	; 63
    3a6c:	cd bf       	out	0x3d, r28	; 61
    3a6e:	ed 01       	movw	r28, r26
    3a70:	08 95       	ret

00003a72 <memcpy>:
    3a72:	fb 01       	movw	r30, r22
    3a74:	dc 01       	movw	r26, r24
    3a76:	02 c0       	rjmp	.+4      	; 0x3a7c <memcpy+0xa>
    3a78:	01 90       	ld	r0, Z+
    3a7a:	0d 92       	st	X+, r0
    3a7c:	41 50       	subi	r20, 0x01	; 1
    3a7e:	50 40       	sbci	r21, 0x00	; 0
    3a80:	d8 f7       	brcc	.-10     	; 0x3a78 <memcpy+0x6>
    3a82:	08 95       	ret

00003a84 <sprintf>:
    3a84:	ae e0       	ldi	r26, 0x0E	; 14
    3a86:	b0 e0       	ldi	r27, 0x00	; 0
    3a88:	e8 e4       	ldi	r30, 0x48	; 72
    3a8a:	fd e1       	ldi	r31, 0x1D	; 29
    3a8c:	0c 94 10 1d 	jmp	0x3a20	; 0x3a20 <__prologue_saves__+0x1c>
    3a90:	0d 89       	ldd	r16, Y+21	; 0x15
    3a92:	1e 89       	ldd	r17, Y+22	; 0x16
    3a94:	86 e0       	ldi	r24, 0x06	; 6
    3a96:	8c 83       	std	Y+4, r24	; 0x04
    3a98:	1a 83       	std	Y+2, r17	; 0x02
    3a9a:	09 83       	std	Y+1, r16	; 0x01
    3a9c:	8f ef       	ldi	r24, 0xFF	; 255
    3a9e:	9f e7       	ldi	r25, 0x7F	; 127
    3aa0:	9e 83       	std	Y+6, r25	; 0x06
    3aa2:	8d 83       	std	Y+5, r24	; 0x05
    3aa4:	9e 01       	movw	r18, r28
    3aa6:	27 5e       	subi	r18, 0xE7	; 231
    3aa8:	3f 4f       	sbci	r19, 0xFF	; 255
    3aaa:	ce 01       	movw	r24, r28
    3aac:	01 96       	adiw	r24, 0x01	; 1
    3aae:	6f 89       	ldd	r22, Y+23	; 0x17
    3ab0:	78 8d       	ldd	r23, Y+24	; 0x18
    3ab2:	a9 01       	movw	r20, r18
    3ab4:	0e 94 66 1d 	call	0x3acc	; 0x3acc <vfprintf>
    3ab8:	2f 81       	ldd	r18, Y+7	; 0x07
    3aba:	38 85       	ldd	r19, Y+8	; 0x08
    3abc:	02 0f       	add	r16, r18
    3abe:	13 1f       	adc	r17, r19
    3ac0:	f8 01       	movw	r30, r16
    3ac2:	10 82       	st	Z, r1
    3ac4:	2e 96       	adiw	r28, 0x0e	; 14
    3ac6:	e4 e0       	ldi	r30, 0x04	; 4
    3ac8:	0c 94 2c 1d 	jmp	0x3a58	; 0x3a58 <__epilogue_restores__+0x1c>

00003acc <vfprintf>:
    3acc:	ab e0       	ldi	r26, 0x0B	; 11
    3ace:	b0 e0       	ldi	r27, 0x00	; 0
    3ad0:	ec e6       	ldi	r30, 0x6C	; 108
    3ad2:	fd e1       	ldi	r31, 0x1D	; 29
    3ad4:	0c 94 02 1d 	jmp	0x3a04	; 0x3a04 <__prologue_saves__>
    3ad8:	3c 01       	movw	r6, r24
    3ada:	2b 01       	movw	r4, r22
    3adc:	5a 01       	movw	r10, r20
    3ade:	fc 01       	movw	r30, r24
    3ae0:	17 82       	std	Z+7, r1	; 0x07
    3ae2:	16 82       	std	Z+6, r1	; 0x06
    3ae4:	83 81       	ldd	r24, Z+3	; 0x03
    3ae6:	81 fd       	sbrc	r24, 1
    3ae8:	03 c0       	rjmp	.+6      	; 0x3af0 <vfprintf+0x24>
    3aea:	6f ef       	ldi	r22, 0xFF	; 255
    3aec:	7f ef       	ldi	r23, 0xFF	; 255
    3aee:	c6 c1       	rjmp	.+908    	; 0x3e7c <vfprintf+0x3b0>
    3af0:	9a e0       	ldi	r25, 0x0A	; 10
    3af2:	89 2e       	mov	r8, r25
    3af4:	1e 01       	movw	r2, r28
    3af6:	08 94       	sec
    3af8:	21 1c       	adc	r2, r1
    3afa:	31 1c       	adc	r3, r1
    3afc:	f3 01       	movw	r30, r6
    3afe:	23 81       	ldd	r18, Z+3	; 0x03
    3b00:	f2 01       	movw	r30, r4
    3b02:	23 fd       	sbrc	r18, 3
    3b04:	85 91       	lpm	r24, Z+
    3b06:	23 ff       	sbrs	r18, 3
    3b08:	81 91       	ld	r24, Z+
    3b0a:	2f 01       	movw	r4, r30
    3b0c:	88 23       	and	r24, r24
    3b0e:	09 f4       	brne	.+2      	; 0x3b12 <vfprintf+0x46>
    3b10:	b2 c1       	rjmp	.+868    	; 0x3e76 <vfprintf+0x3aa>
    3b12:	85 32       	cpi	r24, 0x25	; 37
    3b14:	39 f4       	brne	.+14     	; 0x3b24 <vfprintf+0x58>
    3b16:	23 fd       	sbrc	r18, 3
    3b18:	85 91       	lpm	r24, Z+
    3b1a:	23 ff       	sbrs	r18, 3
    3b1c:	81 91       	ld	r24, Z+
    3b1e:	2f 01       	movw	r4, r30
    3b20:	85 32       	cpi	r24, 0x25	; 37
    3b22:	29 f4       	brne	.+10     	; 0x3b2e <vfprintf+0x62>
    3b24:	90 e0       	ldi	r25, 0x00	; 0
    3b26:	b3 01       	movw	r22, r6
    3b28:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <fputc>
    3b2c:	e7 cf       	rjmp	.-50     	; 0x3afc <vfprintf+0x30>
    3b2e:	98 2f       	mov	r25, r24
    3b30:	ff 24       	eor	r15, r15
    3b32:	ee 24       	eor	r14, r14
    3b34:	99 24       	eor	r9, r9
    3b36:	ff e1       	ldi	r31, 0x1F	; 31
    3b38:	ff 15       	cp	r31, r15
    3b3a:	d0 f0       	brcs	.+52     	; 0x3b70 <vfprintf+0xa4>
    3b3c:	9b 32       	cpi	r25, 0x2B	; 43
    3b3e:	69 f0       	breq	.+26     	; 0x3b5a <vfprintf+0x8e>
    3b40:	9c 32       	cpi	r25, 0x2C	; 44
    3b42:	28 f4       	brcc	.+10     	; 0x3b4e <vfprintf+0x82>
    3b44:	90 32       	cpi	r25, 0x20	; 32
    3b46:	59 f0       	breq	.+22     	; 0x3b5e <vfprintf+0x92>
    3b48:	93 32       	cpi	r25, 0x23	; 35
    3b4a:	91 f4       	brne	.+36     	; 0x3b70 <vfprintf+0xa4>
    3b4c:	0e c0       	rjmp	.+28     	; 0x3b6a <vfprintf+0x9e>
    3b4e:	9d 32       	cpi	r25, 0x2D	; 45
    3b50:	49 f0       	breq	.+18     	; 0x3b64 <vfprintf+0x98>
    3b52:	90 33       	cpi	r25, 0x30	; 48
    3b54:	69 f4       	brne	.+26     	; 0x3b70 <vfprintf+0xa4>
    3b56:	41 e0       	ldi	r20, 0x01	; 1
    3b58:	24 c0       	rjmp	.+72     	; 0x3ba2 <vfprintf+0xd6>
    3b5a:	52 e0       	ldi	r21, 0x02	; 2
    3b5c:	f5 2a       	or	r15, r21
    3b5e:	84 e0       	ldi	r24, 0x04	; 4
    3b60:	f8 2a       	or	r15, r24
    3b62:	28 c0       	rjmp	.+80     	; 0x3bb4 <vfprintf+0xe8>
    3b64:	98 e0       	ldi	r25, 0x08	; 8
    3b66:	f9 2a       	or	r15, r25
    3b68:	25 c0       	rjmp	.+74     	; 0x3bb4 <vfprintf+0xe8>
    3b6a:	e0 e1       	ldi	r30, 0x10	; 16
    3b6c:	fe 2a       	or	r15, r30
    3b6e:	22 c0       	rjmp	.+68     	; 0x3bb4 <vfprintf+0xe8>
    3b70:	f7 fc       	sbrc	r15, 7
    3b72:	29 c0       	rjmp	.+82     	; 0x3bc6 <vfprintf+0xfa>
    3b74:	89 2f       	mov	r24, r25
    3b76:	80 53       	subi	r24, 0x30	; 48
    3b78:	8a 30       	cpi	r24, 0x0A	; 10
    3b7a:	70 f4       	brcc	.+28     	; 0x3b98 <vfprintf+0xcc>
    3b7c:	f6 fe       	sbrs	r15, 6
    3b7e:	05 c0       	rjmp	.+10     	; 0x3b8a <vfprintf+0xbe>
    3b80:	98 9c       	mul	r9, r8
    3b82:	90 2c       	mov	r9, r0
    3b84:	11 24       	eor	r1, r1
    3b86:	98 0e       	add	r9, r24
    3b88:	15 c0       	rjmp	.+42     	; 0x3bb4 <vfprintf+0xe8>
    3b8a:	e8 9c       	mul	r14, r8
    3b8c:	e0 2c       	mov	r14, r0
    3b8e:	11 24       	eor	r1, r1
    3b90:	e8 0e       	add	r14, r24
    3b92:	f0 e2       	ldi	r31, 0x20	; 32
    3b94:	ff 2a       	or	r15, r31
    3b96:	0e c0       	rjmp	.+28     	; 0x3bb4 <vfprintf+0xe8>
    3b98:	9e 32       	cpi	r25, 0x2E	; 46
    3b9a:	29 f4       	brne	.+10     	; 0x3ba6 <vfprintf+0xda>
    3b9c:	f6 fc       	sbrc	r15, 6
    3b9e:	6b c1       	rjmp	.+726    	; 0x3e76 <vfprintf+0x3aa>
    3ba0:	40 e4       	ldi	r20, 0x40	; 64
    3ba2:	f4 2a       	or	r15, r20
    3ba4:	07 c0       	rjmp	.+14     	; 0x3bb4 <vfprintf+0xe8>
    3ba6:	9c 36       	cpi	r25, 0x6C	; 108
    3ba8:	19 f4       	brne	.+6      	; 0x3bb0 <vfprintf+0xe4>
    3baa:	50 e8       	ldi	r21, 0x80	; 128
    3bac:	f5 2a       	or	r15, r21
    3bae:	02 c0       	rjmp	.+4      	; 0x3bb4 <vfprintf+0xe8>
    3bb0:	98 36       	cpi	r25, 0x68	; 104
    3bb2:	49 f4       	brne	.+18     	; 0x3bc6 <vfprintf+0xfa>
    3bb4:	f2 01       	movw	r30, r4
    3bb6:	23 fd       	sbrc	r18, 3
    3bb8:	95 91       	lpm	r25, Z+
    3bba:	23 ff       	sbrs	r18, 3
    3bbc:	91 91       	ld	r25, Z+
    3bbe:	2f 01       	movw	r4, r30
    3bc0:	99 23       	and	r25, r25
    3bc2:	09 f0       	breq	.+2      	; 0x3bc6 <vfprintf+0xfa>
    3bc4:	b8 cf       	rjmp	.-144    	; 0x3b36 <vfprintf+0x6a>
    3bc6:	89 2f       	mov	r24, r25
    3bc8:	85 54       	subi	r24, 0x45	; 69
    3bca:	83 30       	cpi	r24, 0x03	; 3
    3bcc:	18 f0       	brcs	.+6      	; 0x3bd4 <vfprintf+0x108>
    3bce:	80 52       	subi	r24, 0x20	; 32
    3bd0:	83 30       	cpi	r24, 0x03	; 3
    3bd2:	38 f4       	brcc	.+14     	; 0x3be2 <vfprintf+0x116>
    3bd4:	44 e0       	ldi	r20, 0x04	; 4
    3bd6:	50 e0       	ldi	r21, 0x00	; 0
    3bd8:	a4 0e       	add	r10, r20
    3bda:	b5 1e       	adc	r11, r21
    3bdc:	5f e3       	ldi	r21, 0x3F	; 63
    3bde:	59 83       	std	Y+1, r21	; 0x01
    3be0:	0f c0       	rjmp	.+30     	; 0x3c00 <vfprintf+0x134>
    3be2:	93 36       	cpi	r25, 0x63	; 99
    3be4:	31 f0       	breq	.+12     	; 0x3bf2 <vfprintf+0x126>
    3be6:	93 37       	cpi	r25, 0x73	; 115
    3be8:	79 f0       	breq	.+30     	; 0x3c08 <vfprintf+0x13c>
    3bea:	93 35       	cpi	r25, 0x53	; 83
    3bec:	09 f0       	breq	.+2      	; 0x3bf0 <vfprintf+0x124>
    3bee:	56 c0       	rjmp	.+172    	; 0x3c9c <vfprintf+0x1d0>
    3bf0:	20 c0       	rjmp	.+64     	; 0x3c32 <vfprintf+0x166>
    3bf2:	f5 01       	movw	r30, r10
    3bf4:	80 81       	ld	r24, Z
    3bf6:	89 83       	std	Y+1, r24	; 0x01
    3bf8:	42 e0       	ldi	r20, 0x02	; 2
    3bfa:	50 e0       	ldi	r21, 0x00	; 0
    3bfc:	a4 0e       	add	r10, r20
    3bfe:	b5 1e       	adc	r11, r21
    3c00:	61 01       	movw	r12, r2
    3c02:	01 e0       	ldi	r16, 0x01	; 1
    3c04:	10 e0       	ldi	r17, 0x00	; 0
    3c06:	12 c0       	rjmp	.+36     	; 0x3c2c <vfprintf+0x160>
    3c08:	f5 01       	movw	r30, r10
    3c0a:	c0 80       	ld	r12, Z
    3c0c:	d1 80       	ldd	r13, Z+1	; 0x01
    3c0e:	f6 fc       	sbrc	r15, 6
    3c10:	03 c0       	rjmp	.+6      	; 0x3c18 <vfprintf+0x14c>
    3c12:	6f ef       	ldi	r22, 0xFF	; 255
    3c14:	7f ef       	ldi	r23, 0xFF	; 255
    3c16:	02 c0       	rjmp	.+4      	; 0x3c1c <vfprintf+0x150>
    3c18:	69 2d       	mov	r22, r9
    3c1a:	70 e0       	ldi	r23, 0x00	; 0
    3c1c:	42 e0       	ldi	r20, 0x02	; 2
    3c1e:	50 e0       	ldi	r21, 0x00	; 0
    3c20:	a4 0e       	add	r10, r20
    3c22:	b5 1e       	adc	r11, r21
    3c24:	c6 01       	movw	r24, r12
    3c26:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <strnlen>
    3c2a:	8c 01       	movw	r16, r24
    3c2c:	5f e7       	ldi	r21, 0x7F	; 127
    3c2e:	f5 22       	and	r15, r21
    3c30:	14 c0       	rjmp	.+40     	; 0x3c5a <vfprintf+0x18e>
    3c32:	f5 01       	movw	r30, r10
    3c34:	c0 80       	ld	r12, Z
    3c36:	d1 80       	ldd	r13, Z+1	; 0x01
    3c38:	f6 fc       	sbrc	r15, 6
    3c3a:	03 c0       	rjmp	.+6      	; 0x3c42 <vfprintf+0x176>
    3c3c:	6f ef       	ldi	r22, 0xFF	; 255
    3c3e:	7f ef       	ldi	r23, 0xFF	; 255
    3c40:	02 c0       	rjmp	.+4      	; 0x3c46 <vfprintf+0x17a>
    3c42:	69 2d       	mov	r22, r9
    3c44:	70 e0       	ldi	r23, 0x00	; 0
    3c46:	42 e0       	ldi	r20, 0x02	; 2
    3c48:	50 e0       	ldi	r21, 0x00	; 0
    3c4a:	a4 0e       	add	r10, r20
    3c4c:	b5 1e       	adc	r11, r21
    3c4e:	c6 01       	movw	r24, r12
    3c50:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <strnlen_P>
    3c54:	8c 01       	movw	r16, r24
    3c56:	50 e8       	ldi	r21, 0x80	; 128
    3c58:	f5 2a       	or	r15, r21
    3c5a:	f3 fe       	sbrs	r15, 3
    3c5c:	07 c0       	rjmp	.+14     	; 0x3c6c <vfprintf+0x1a0>
    3c5e:	1a c0       	rjmp	.+52     	; 0x3c94 <vfprintf+0x1c8>
    3c60:	80 e2       	ldi	r24, 0x20	; 32
    3c62:	90 e0       	ldi	r25, 0x00	; 0
    3c64:	b3 01       	movw	r22, r6
    3c66:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <fputc>
    3c6a:	ea 94       	dec	r14
    3c6c:	8e 2d       	mov	r24, r14
    3c6e:	90 e0       	ldi	r25, 0x00	; 0
    3c70:	08 17       	cp	r16, r24
    3c72:	19 07       	cpc	r17, r25
    3c74:	a8 f3       	brcs	.-22     	; 0x3c60 <vfprintf+0x194>
    3c76:	0e c0       	rjmp	.+28     	; 0x3c94 <vfprintf+0x1c8>
    3c78:	f6 01       	movw	r30, r12
    3c7a:	f7 fc       	sbrc	r15, 7
    3c7c:	85 91       	lpm	r24, Z+
    3c7e:	f7 fe       	sbrs	r15, 7
    3c80:	81 91       	ld	r24, Z+
    3c82:	6f 01       	movw	r12, r30
    3c84:	90 e0       	ldi	r25, 0x00	; 0
    3c86:	b3 01       	movw	r22, r6
    3c88:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <fputc>
    3c8c:	e1 10       	cpse	r14, r1
    3c8e:	ea 94       	dec	r14
    3c90:	01 50       	subi	r16, 0x01	; 1
    3c92:	10 40       	sbci	r17, 0x00	; 0
    3c94:	01 15       	cp	r16, r1
    3c96:	11 05       	cpc	r17, r1
    3c98:	79 f7       	brne	.-34     	; 0x3c78 <vfprintf+0x1ac>
    3c9a:	ea c0       	rjmp	.+468    	; 0x3e70 <vfprintf+0x3a4>
    3c9c:	94 36       	cpi	r25, 0x64	; 100
    3c9e:	11 f0       	breq	.+4      	; 0x3ca4 <vfprintf+0x1d8>
    3ca0:	99 36       	cpi	r25, 0x69	; 105
    3ca2:	69 f5       	brne	.+90     	; 0x3cfe <vfprintf+0x232>
    3ca4:	f7 fe       	sbrs	r15, 7
    3ca6:	08 c0       	rjmp	.+16     	; 0x3cb8 <vfprintf+0x1ec>
    3ca8:	f5 01       	movw	r30, r10
    3caa:	20 81       	ld	r18, Z
    3cac:	31 81       	ldd	r19, Z+1	; 0x01
    3cae:	42 81       	ldd	r20, Z+2	; 0x02
    3cb0:	53 81       	ldd	r21, Z+3	; 0x03
    3cb2:	84 e0       	ldi	r24, 0x04	; 4
    3cb4:	90 e0       	ldi	r25, 0x00	; 0
    3cb6:	0a c0       	rjmp	.+20     	; 0x3ccc <vfprintf+0x200>
    3cb8:	f5 01       	movw	r30, r10
    3cba:	80 81       	ld	r24, Z
    3cbc:	91 81       	ldd	r25, Z+1	; 0x01
    3cbe:	9c 01       	movw	r18, r24
    3cc0:	44 27       	eor	r20, r20
    3cc2:	37 fd       	sbrc	r19, 7
    3cc4:	40 95       	com	r20
    3cc6:	54 2f       	mov	r21, r20
    3cc8:	82 e0       	ldi	r24, 0x02	; 2
    3cca:	90 e0       	ldi	r25, 0x00	; 0
    3ccc:	a8 0e       	add	r10, r24
    3cce:	b9 1e       	adc	r11, r25
    3cd0:	9f e6       	ldi	r25, 0x6F	; 111
    3cd2:	f9 22       	and	r15, r25
    3cd4:	57 ff       	sbrs	r21, 7
    3cd6:	09 c0       	rjmp	.+18     	; 0x3cea <vfprintf+0x21e>
    3cd8:	50 95       	com	r21
    3cda:	40 95       	com	r20
    3cdc:	30 95       	com	r19
    3cde:	21 95       	neg	r18
    3ce0:	3f 4f       	sbci	r19, 0xFF	; 255
    3ce2:	4f 4f       	sbci	r20, 0xFF	; 255
    3ce4:	5f 4f       	sbci	r21, 0xFF	; 255
    3ce6:	e0 e8       	ldi	r30, 0x80	; 128
    3ce8:	fe 2a       	or	r15, r30
    3cea:	ca 01       	movw	r24, r20
    3cec:	b9 01       	movw	r22, r18
    3cee:	a1 01       	movw	r20, r2
    3cf0:	2a e0       	ldi	r18, 0x0A	; 10
    3cf2:	30 e0       	ldi	r19, 0x00	; 0
    3cf4:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <__ultoa_invert>
    3cf8:	d8 2e       	mov	r13, r24
    3cfa:	d2 18       	sub	r13, r2
    3cfc:	40 c0       	rjmp	.+128    	; 0x3d7e <vfprintf+0x2b2>
    3cfe:	95 37       	cpi	r25, 0x75	; 117
    3d00:	29 f4       	brne	.+10     	; 0x3d0c <vfprintf+0x240>
    3d02:	1f 2d       	mov	r17, r15
    3d04:	1f 7e       	andi	r17, 0xEF	; 239
    3d06:	2a e0       	ldi	r18, 0x0A	; 10
    3d08:	30 e0       	ldi	r19, 0x00	; 0
    3d0a:	1d c0       	rjmp	.+58     	; 0x3d46 <vfprintf+0x27a>
    3d0c:	1f 2d       	mov	r17, r15
    3d0e:	19 7f       	andi	r17, 0xF9	; 249
    3d10:	9f 36       	cpi	r25, 0x6F	; 111
    3d12:	61 f0       	breq	.+24     	; 0x3d2c <vfprintf+0x260>
    3d14:	90 37       	cpi	r25, 0x70	; 112
    3d16:	20 f4       	brcc	.+8      	; 0x3d20 <vfprintf+0x254>
    3d18:	98 35       	cpi	r25, 0x58	; 88
    3d1a:	09 f0       	breq	.+2      	; 0x3d1e <vfprintf+0x252>
    3d1c:	ac c0       	rjmp	.+344    	; 0x3e76 <vfprintf+0x3aa>
    3d1e:	0f c0       	rjmp	.+30     	; 0x3d3e <vfprintf+0x272>
    3d20:	90 37       	cpi	r25, 0x70	; 112
    3d22:	39 f0       	breq	.+14     	; 0x3d32 <vfprintf+0x266>
    3d24:	98 37       	cpi	r25, 0x78	; 120
    3d26:	09 f0       	breq	.+2      	; 0x3d2a <vfprintf+0x25e>
    3d28:	a6 c0       	rjmp	.+332    	; 0x3e76 <vfprintf+0x3aa>
    3d2a:	04 c0       	rjmp	.+8      	; 0x3d34 <vfprintf+0x268>
    3d2c:	28 e0       	ldi	r18, 0x08	; 8
    3d2e:	30 e0       	ldi	r19, 0x00	; 0
    3d30:	0a c0       	rjmp	.+20     	; 0x3d46 <vfprintf+0x27a>
    3d32:	10 61       	ori	r17, 0x10	; 16
    3d34:	14 fd       	sbrc	r17, 4
    3d36:	14 60       	ori	r17, 0x04	; 4
    3d38:	20 e1       	ldi	r18, 0x10	; 16
    3d3a:	30 e0       	ldi	r19, 0x00	; 0
    3d3c:	04 c0       	rjmp	.+8      	; 0x3d46 <vfprintf+0x27a>
    3d3e:	14 fd       	sbrc	r17, 4
    3d40:	16 60       	ori	r17, 0x06	; 6
    3d42:	20 e1       	ldi	r18, 0x10	; 16
    3d44:	32 e0       	ldi	r19, 0x02	; 2
    3d46:	17 ff       	sbrs	r17, 7
    3d48:	08 c0       	rjmp	.+16     	; 0x3d5a <vfprintf+0x28e>
    3d4a:	f5 01       	movw	r30, r10
    3d4c:	60 81       	ld	r22, Z
    3d4e:	71 81       	ldd	r23, Z+1	; 0x01
    3d50:	82 81       	ldd	r24, Z+2	; 0x02
    3d52:	93 81       	ldd	r25, Z+3	; 0x03
    3d54:	44 e0       	ldi	r20, 0x04	; 4
    3d56:	50 e0       	ldi	r21, 0x00	; 0
    3d58:	08 c0       	rjmp	.+16     	; 0x3d6a <vfprintf+0x29e>
    3d5a:	f5 01       	movw	r30, r10
    3d5c:	80 81       	ld	r24, Z
    3d5e:	91 81       	ldd	r25, Z+1	; 0x01
    3d60:	bc 01       	movw	r22, r24
    3d62:	80 e0       	ldi	r24, 0x00	; 0
    3d64:	90 e0       	ldi	r25, 0x00	; 0
    3d66:	42 e0       	ldi	r20, 0x02	; 2
    3d68:	50 e0       	ldi	r21, 0x00	; 0
    3d6a:	a4 0e       	add	r10, r20
    3d6c:	b5 1e       	adc	r11, r21
    3d6e:	a1 01       	movw	r20, r2
    3d70:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <__ultoa_invert>
    3d74:	d8 2e       	mov	r13, r24
    3d76:	d2 18       	sub	r13, r2
    3d78:	8f e7       	ldi	r24, 0x7F	; 127
    3d7a:	f8 2e       	mov	r15, r24
    3d7c:	f1 22       	and	r15, r17
    3d7e:	f6 fe       	sbrs	r15, 6
    3d80:	0b c0       	rjmp	.+22     	; 0x3d98 <vfprintf+0x2cc>
    3d82:	5e ef       	ldi	r21, 0xFE	; 254
    3d84:	f5 22       	and	r15, r21
    3d86:	d9 14       	cp	r13, r9
    3d88:	38 f4       	brcc	.+14     	; 0x3d98 <vfprintf+0x2cc>
    3d8a:	f4 fe       	sbrs	r15, 4
    3d8c:	07 c0       	rjmp	.+14     	; 0x3d9c <vfprintf+0x2d0>
    3d8e:	f2 fc       	sbrc	r15, 2
    3d90:	05 c0       	rjmp	.+10     	; 0x3d9c <vfprintf+0x2d0>
    3d92:	8f ee       	ldi	r24, 0xEF	; 239
    3d94:	f8 22       	and	r15, r24
    3d96:	02 c0       	rjmp	.+4      	; 0x3d9c <vfprintf+0x2d0>
    3d98:	1d 2d       	mov	r17, r13
    3d9a:	01 c0       	rjmp	.+2      	; 0x3d9e <vfprintf+0x2d2>
    3d9c:	19 2d       	mov	r17, r9
    3d9e:	f4 fe       	sbrs	r15, 4
    3da0:	0d c0       	rjmp	.+26     	; 0x3dbc <vfprintf+0x2f0>
    3da2:	fe 01       	movw	r30, r28
    3da4:	ed 0d       	add	r30, r13
    3da6:	f1 1d       	adc	r31, r1
    3da8:	80 81       	ld	r24, Z
    3daa:	80 33       	cpi	r24, 0x30	; 48
    3dac:	19 f4       	brne	.+6      	; 0x3db4 <vfprintf+0x2e8>
    3dae:	99 ee       	ldi	r25, 0xE9	; 233
    3db0:	f9 22       	and	r15, r25
    3db2:	08 c0       	rjmp	.+16     	; 0x3dc4 <vfprintf+0x2f8>
    3db4:	1f 5f       	subi	r17, 0xFF	; 255
    3db6:	f2 fe       	sbrs	r15, 2
    3db8:	05 c0       	rjmp	.+10     	; 0x3dc4 <vfprintf+0x2f8>
    3dba:	03 c0       	rjmp	.+6      	; 0x3dc2 <vfprintf+0x2f6>
    3dbc:	8f 2d       	mov	r24, r15
    3dbe:	86 78       	andi	r24, 0x86	; 134
    3dc0:	09 f0       	breq	.+2      	; 0x3dc4 <vfprintf+0x2f8>
    3dc2:	1f 5f       	subi	r17, 0xFF	; 255
    3dc4:	0f 2d       	mov	r16, r15
    3dc6:	f3 fc       	sbrc	r15, 3
    3dc8:	14 c0       	rjmp	.+40     	; 0x3df2 <vfprintf+0x326>
    3dca:	f0 fe       	sbrs	r15, 0
    3dcc:	0f c0       	rjmp	.+30     	; 0x3dec <vfprintf+0x320>
    3dce:	1e 15       	cp	r17, r14
    3dd0:	10 f0       	brcs	.+4      	; 0x3dd6 <vfprintf+0x30a>
    3dd2:	9d 2c       	mov	r9, r13
    3dd4:	0b c0       	rjmp	.+22     	; 0x3dec <vfprintf+0x320>
    3dd6:	9d 2c       	mov	r9, r13
    3dd8:	9e 0c       	add	r9, r14
    3dda:	91 1a       	sub	r9, r17
    3ddc:	1e 2d       	mov	r17, r14
    3dde:	06 c0       	rjmp	.+12     	; 0x3dec <vfprintf+0x320>
    3de0:	80 e2       	ldi	r24, 0x20	; 32
    3de2:	90 e0       	ldi	r25, 0x00	; 0
    3de4:	b3 01       	movw	r22, r6
    3de6:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <fputc>
    3dea:	1f 5f       	subi	r17, 0xFF	; 255
    3dec:	1e 15       	cp	r17, r14
    3dee:	c0 f3       	brcs	.-16     	; 0x3de0 <vfprintf+0x314>
    3df0:	04 c0       	rjmp	.+8      	; 0x3dfa <vfprintf+0x32e>
    3df2:	1e 15       	cp	r17, r14
    3df4:	10 f4       	brcc	.+4      	; 0x3dfa <vfprintf+0x32e>
    3df6:	e1 1a       	sub	r14, r17
    3df8:	01 c0       	rjmp	.+2      	; 0x3dfc <vfprintf+0x330>
    3dfa:	ee 24       	eor	r14, r14
    3dfc:	04 ff       	sbrs	r16, 4
    3dfe:	0f c0       	rjmp	.+30     	; 0x3e1e <vfprintf+0x352>
    3e00:	80 e3       	ldi	r24, 0x30	; 48
    3e02:	90 e0       	ldi	r25, 0x00	; 0
    3e04:	b3 01       	movw	r22, r6
    3e06:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <fputc>
    3e0a:	02 ff       	sbrs	r16, 2
    3e0c:	1d c0       	rjmp	.+58     	; 0x3e48 <vfprintf+0x37c>
    3e0e:	01 fd       	sbrc	r16, 1
    3e10:	03 c0       	rjmp	.+6      	; 0x3e18 <vfprintf+0x34c>
    3e12:	88 e7       	ldi	r24, 0x78	; 120
    3e14:	90 e0       	ldi	r25, 0x00	; 0
    3e16:	0e c0       	rjmp	.+28     	; 0x3e34 <vfprintf+0x368>
    3e18:	88 e5       	ldi	r24, 0x58	; 88
    3e1a:	90 e0       	ldi	r25, 0x00	; 0
    3e1c:	0b c0       	rjmp	.+22     	; 0x3e34 <vfprintf+0x368>
    3e1e:	80 2f       	mov	r24, r16
    3e20:	86 78       	andi	r24, 0x86	; 134
    3e22:	91 f0       	breq	.+36     	; 0x3e48 <vfprintf+0x37c>
    3e24:	01 ff       	sbrs	r16, 1
    3e26:	02 c0       	rjmp	.+4      	; 0x3e2c <vfprintf+0x360>
    3e28:	8b e2       	ldi	r24, 0x2B	; 43
    3e2a:	01 c0       	rjmp	.+2      	; 0x3e2e <vfprintf+0x362>
    3e2c:	80 e2       	ldi	r24, 0x20	; 32
    3e2e:	f7 fc       	sbrc	r15, 7
    3e30:	8d e2       	ldi	r24, 0x2D	; 45
    3e32:	90 e0       	ldi	r25, 0x00	; 0
    3e34:	b3 01       	movw	r22, r6
    3e36:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <fputc>
    3e3a:	06 c0       	rjmp	.+12     	; 0x3e48 <vfprintf+0x37c>
    3e3c:	80 e3       	ldi	r24, 0x30	; 48
    3e3e:	90 e0       	ldi	r25, 0x00	; 0
    3e40:	b3 01       	movw	r22, r6
    3e42:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <fputc>
    3e46:	9a 94       	dec	r9
    3e48:	d9 14       	cp	r13, r9
    3e4a:	c0 f3       	brcs	.-16     	; 0x3e3c <vfprintf+0x370>
    3e4c:	da 94       	dec	r13
    3e4e:	f1 01       	movw	r30, r2
    3e50:	ed 0d       	add	r30, r13
    3e52:	f1 1d       	adc	r31, r1
    3e54:	80 81       	ld	r24, Z
    3e56:	90 e0       	ldi	r25, 0x00	; 0
    3e58:	b3 01       	movw	r22, r6
    3e5a:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <fputc>
    3e5e:	dd 20       	and	r13, r13
    3e60:	a9 f7       	brne	.-22     	; 0x3e4c <vfprintf+0x380>
    3e62:	06 c0       	rjmp	.+12     	; 0x3e70 <vfprintf+0x3a4>
    3e64:	80 e2       	ldi	r24, 0x20	; 32
    3e66:	90 e0       	ldi	r25, 0x00	; 0
    3e68:	b3 01       	movw	r22, r6
    3e6a:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <fputc>
    3e6e:	ea 94       	dec	r14
    3e70:	ee 20       	and	r14, r14
    3e72:	c1 f7       	brne	.-16     	; 0x3e64 <vfprintf+0x398>
    3e74:	43 ce       	rjmp	.-890    	; 0x3afc <vfprintf+0x30>
    3e76:	f3 01       	movw	r30, r6
    3e78:	66 81       	ldd	r22, Z+6	; 0x06
    3e7a:	77 81       	ldd	r23, Z+7	; 0x07
    3e7c:	cb 01       	movw	r24, r22
    3e7e:	2b 96       	adiw	r28, 0x0b	; 11
    3e80:	e2 e1       	ldi	r30, 0x12	; 18
    3e82:	0c 94 1e 1d 	jmp	0x3a3c	; 0x3a3c <__epilogue_restores__>

00003e86 <strnlen_P>:
    3e86:	fc 01       	movw	r30, r24
    3e88:	05 90       	lpm	r0, Z+
    3e8a:	61 50       	subi	r22, 0x01	; 1
    3e8c:	70 40       	sbci	r23, 0x00	; 0
    3e8e:	01 10       	cpse	r0, r1
    3e90:	d8 f7       	brcc	.-10     	; 0x3e88 <strnlen_P+0x2>
    3e92:	80 95       	com	r24
    3e94:	90 95       	com	r25
    3e96:	8e 0f       	add	r24, r30
    3e98:	9f 1f       	adc	r25, r31
    3e9a:	08 95       	ret

00003e9c <strnlen>:
    3e9c:	fc 01       	movw	r30, r24
    3e9e:	61 50       	subi	r22, 0x01	; 1
    3ea0:	70 40       	sbci	r23, 0x00	; 0
    3ea2:	01 90       	ld	r0, Z+
    3ea4:	01 10       	cpse	r0, r1
    3ea6:	d8 f7       	brcc	.-10     	; 0x3e9e <strnlen+0x2>
    3ea8:	80 95       	com	r24
    3eaa:	90 95       	com	r25
    3eac:	8e 0f       	add	r24, r30
    3eae:	9f 1f       	adc	r25, r31
    3eb0:	08 95       	ret

00003eb2 <fputc>:
    3eb2:	0f 93       	push	r16
    3eb4:	1f 93       	push	r17
    3eb6:	cf 93       	push	r28
    3eb8:	df 93       	push	r29
    3eba:	8c 01       	movw	r16, r24
    3ebc:	eb 01       	movw	r28, r22
    3ebe:	8b 81       	ldd	r24, Y+3	; 0x03
    3ec0:	81 ff       	sbrs	r24, 1
    3ec2:	1b c0       	rjmp	.+54     	; 0x3efa <fputc+0x48>
    3ec4:	82 ff       	sbrs	r24, 2
    3ec6:	0d c0       	rjmp	.+26     	; 0x3ee2 <fputc+0x30>
    3ec8:	2e 81       	ldd	r18, Y+6	; 0x06
    3eca:	3f 81       	ldd	r19, Y+7	; 0x07
    3ecc:	8c 81       	ldd	r24, Y+4	; 0x04
    3ece:	9d 81       	ldd	r25, Y+5	; 0x05
    3ed0:	28 17       	cp	r18, r24
    3ed2:	39 07       	cpc	r19, r25
    3ed4:	64 f4       	brge	.+24     	; 0x3eee <fputc+0x3c>
    3ed6:	e8 81       	ld	r30, Y
    3ed8:	f9 81       	ldd	r31, Y+1	; 0x01
    3eda:	01 93       	st	Z+, r16
    3edc:	f9 83       	std	Y+1, r31	; 0x01
    3ede:	e8 83       	st	Y, r30
    3ee0:	06 c0       	rjmp	.+12     	; 0x3eee <fputc+0x3c>
    3ee2:	e8 85       	ldd	r30, Y+8	; 0x08
    3ee4:	f9 85       	ldd	r31, Y+9	; 0x09
    3ee6:	80 2f       	mov	r24, r16
    3ee8:	09 95       	icall
    3eea:	89 2b       	or	r24, r25
    3eec:	31 f4       	brne	.+12     	; 0x3efa <fputc+0x48>
    3eee:	8e 81       	ldd	r24, Y+6	; 0x06
    3ef0:	9f 81       	ldd	r25, Y+7	; 0x07
    3ef2:	01 96       	adiw	r24, 0x01	; 1
    3ef4:	9f 83       	std	Y+7, r25	; 0x07
    3ef6:	8e 83       	std	Y+6, r24	; 0x06
    3ef8:	02 c0       	rjmp	.+4      	; 0x3efe <fputc+0x4c>
    3efa:	0f ef       	ldi	r16, 0xFF	; 255
    3efc:	1f ef       	ldi	r17, 0xFF	; 255
    3efe:	c8 01       	movw	r24, r16
    3f00:	df 91       	pop	r29
    3f02:	cf 91       	pop	r28
    3f04:	1f 91       	pop	r17
    3f06:	0f 91       	pop	r16
    3f08:	08 95       	ret

00003f0a <__ultoa_invert>:
    3f0a:	fa 01       	movw	r30, r20
    3f0c:	aa 27       	eor	r26, r26
    3f0e:	28 30       	cpi	r18, 0x08	; 8
    3f10:	51 f1       	breq	.+84     	; 0x3f66 <__ultoa_invert+0x5c>
    3f12:	20 31       	cpi	r18, 0x10	; 16
    3f14:	81 f1       	breq	.+96     	; 0x3f76 <__ultoa_invert+0x6c>
    3f16:	e8 94       	clt
    3f18:	6f 93       	push	r22
    3f1a:	6e 7f       	andi	r22, 0xFE	; 254
    3f1c:	6e 5f       	subi	r22, 0xFE	; 254
    3f1e:	7f 4f       	sbci	r23, 0xFF	; 255
    3f20:	8f 4f       	sbci	r24, 0xFF	; 255
    3f22:	9f 4f       	sbci	r25, 0xFF	; 255
    3f24:	af 4f       	sbci	r26, 0xFF	; 255
    3f26:	b1 e0       	ldi	r27, 0x01	; 1
    3f28:	3e d0       	rcall	.+124    	; 0x3fa6 <__ultoa_invert+0x9c>
    3f2a:	b4 e0       	ldi	r27, 0x04	; 4
    3f2c:	3c d0       	rcall	.+120    	; 0x3fa6 <__ultoa_invert+0x9c>
    3f2e:	67 0f       	add	r22, r23
    3f30:	78 1f       	adc	r23, r24
    3f32:	89 1f       	adc	r24, r25
    3f34:	9a 1f       	adc	r25, r26
    3f36:	a1 1d       	adc	r26, r1
    3f38:	68 0f       	add	r22, r24
    3f3a:	79 1f       	adc	r23, r25
    3f3c:	8a 1f       	adc	r24, r26
    3f3e:	91 1d       	adc	r25, r1
    3f40:	a1 1d       	adc	r26, r1
    3f42:	6a 0f       	add	r22, r26
    3f44:	71 1d       	adc	r23, r1
    3f46:	81 1d       	adc	r24, r1
    3f48:	91 1d       	adc	r25, r1
    3f4a:	a1 1d       	adc	r26, r1
    3f4c:	20 d0       	rcall	.+64     	; 0x3f8e <__ultoa_invert+0x84>
    3f4e:	09 f4       	brne	.+2      	; 0x3f52 <__ultoa_invert+0x48>
    3f50:	68 94       	set
    3f52:	3f 91       	pop	r19
    3f54:	2a e0       	ldi	r18, 0x0A	; 10
    3f56:	26 9f       	mul	r18, r22
    3f58:	11 24       	eor	r1, r1
    3f5a:	30 19       	sub	r19, r0
    3f5c:	30 5d       	subi	r19, 0xD0	; 208
    3f5e:	31 93       	st	Z+, r19
    3f60:	de f6       	brtc	.-74     	; 0x3f18 <__ultoa_invert+0xe>
    3f62:	cf 01       	movw	r24, r30
    3f64:	08 95       	ret
    3f66:	46 2f       	mov	r20, r22
    3f68:	47 70       	andi	r20, 0x07	; 7
    3f6a:	40 5d       	subi	r20, 0xD0	; 208
    3f6c:	41 93       	st	Z+, r20
    3f6e:	b3 e0       	ldi	r27, 0x03	; 3
    3f70:	0f d0       	rcall	.+30     	; 0x3f90 <__ultoa_invert+0x86>
    3f72:	c9 f7       	brne	.-14     	; 0x3f66 <__ultoa_invert+0x5c>
    3f74:	f6 cf       	rjmp	.-20     	; 0x3f62 <__ultoa_invert+0x58>
    3f76:	46 2f       	mov	r20, r22
    3f78:	4f 70       	andi	r20, 0x0F	; 15
    3f7a:	40 5d       	subi	r20, 0xD0	; 208
    3f7c:	4a 33       	cpi	r20, 0x3A	; 58
    3f7e:	18 f0       	brcs	.+6      	; 0x3f86 <__ultoa_invert+0x7c>
    3f80:	49 5d       	subi	r20, 0xD9	; 217
    3f82:	31 fd       	sbrc	r19, 1
    3f84:	40 52       	subi	r20, 0x20	; 32
    3f86:	41 93       	st	Z+, r20
    3f88:	02 d0       	rcall	.+4      	; 0x3f8e <__ultoa_invert+0x84>
    3f8a:	a9 f7       	brne	.-22     	; 0x3f76 <__ultoa_invert+0x6c>
    3f8c:	ea cf       	rjmp	.-44     	; 0x3f62 <__ultoa_invert+0x58>
    3f8e:	b4 e0       	ldi	r27, 0x04	; 4
    3f90:	a6 95       	lsr	r26
    3f92:	97 95       	ror	r25
    3f94:	87 95       	ror	r24
    3f96:	77 95       	ror	r23
    3f98:	67 95       	ror	r22
    3f9a:	ba 95       	dec	r27
    3f9c:	c9 f7       	brne	.-14     	; 0x3f90 <__ultoa_invert+0x86>
    3f9e:	00 97       	sbiw	r24, 0x00	; 0
    3fa0:	61 05       	cpc	r22, r1
    3fa2:	71 05       	cpc	r23, r1
    3fa4:	08 95       	ret
    3fa6:	9b 01       	movw	r18, r22
    3fa8:	ac 01       	movw	r20, r24
    3faa:	0a 2e       	mov	r0, r26
    3fac:	06 94       	lsr	r0
    3fae:	57 95       	ror	r21
    3fb0:	47 95       	ror	r20
    3fb2:	37 95       	ror	r19
    3fb4:	27 95       	ror	r18
    3fb6:	ba 95       	dec	r27
    3fb8:	c9 f7       	brne	.-14     	; 0x3fac <__ultoa_invert+0xa2>
    3fba:	62 0f       	add	r22, r18
    3fbc:	73 1f       	adc	r23, r19
    3fbe:	84 1f       	adc	r24, r20
    3fc0:	95 1f       	adc	r25, r21
    3fc2:	a0 1d       	adc	r26, r0
    3fc4:	08 95       	ret

00003fc6 <_exit>:
    3fc6:	f8 94       	cli

00003fc8 <__stop_program>:
    3fc8:	ff cf       	rjmp	.-2      	; 0x3fc8 <__stop_program>
